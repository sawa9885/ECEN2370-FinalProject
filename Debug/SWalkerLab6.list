
SWalkerLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008da4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013c8  08008f54  08008f54  00009f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a31c  0800a31c  0000c078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a31c  0800a31c  0000b31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a324  0800a324  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a324  0800a324  0000b324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a328  0800a328  0000b328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800a32c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c078  2**0
                  CONTENTS
 10 .bss          00025f8c  20000078  20000078  0000c078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20026004  20026004  0000c078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000171bd  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003941  00000000  00000000  00023265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  00026ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001096  00000000  00000000  000280b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028113  00000000  00000000  00029146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b714  00000000  00000000  00051259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3075  00000000  00000000  0006c96d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014f9e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006240  00000000  00000000  0014fa28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00155c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008f3c 	.word	0x08008f3c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08008f3c 	.word	0x08008f3c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
#endif // COMPILE_TOUCH_FUNCTIONS

volatile AppState currentState = MAIN_MENU;

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000586:	f003 fb57 	bl	8003c38 <initialise_monitor_handles>
    LTCD__Init();
 800058a:	f001 fa79 	bl	8001a80 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058e:	2000      	movs	r0, #0
 8000590:	f001 fa36 	bl	8001a00 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000594:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000598:	2000      	movs	r0, #0
 800059a:	f001 fb55 	bl	8001c48 <LCD_Clear>

    // Initialize the random number generator with a unique seed
    uint32_t seed;
    HAL_RNG_GenerateRandomNumber(&hrng, &seed);
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4619      	mov	r1, r3
 80005a2:	4809      	ldr	r0, [pc, #36]	@ (80005c8 <ApplicationInit+0x48>)
 80005a4:	f006 fb0e 	bl	8006bc4 <HAL_RNG_GenerateRandomNumber>
    srand(seed);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f007 fae4 	bl	8007b78 <srand>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005b0:	f001 fc41 	bl	8001e36 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005b4:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <ApplicationInit+0x4c>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005ba:	f000 f821 	bl	8000600 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20025d60 	.word	0x20025d60
 80005cc:	20000094 	.word	0x20000094

080005d0 <MainMenu>:

void MainMenu(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	DisplayMenu();
 80005d4:	f001 fda2 	bl	800211c <DisplayMenu>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <Game>:

void Game(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	if(currentState == GAME_SCREEN)
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <Game+0x20>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d105      	bne.n	80005f6 <Game+0x1a>
	{
		RenderGameScreen();
 80005ea:	f000 f935 	bl	8000858 <RenderGameScreen>
		UpdateFallingBlock();
 80005ee:	f000 fa41 	bl	8000a74 <UpdateFallingBlock>
        CheckGameOver();
 80005f2:	f001 f87b 	bl	80016ec <CheckGameOver>
	}
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200000a4 	.word	0x200000a4

08000600 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000614:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000618:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 800061a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800061e:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000630:	4a0c      	ldr	r2, [pc, #48]	@ (8000664 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6313      	str	r3, [r2, #48]	@ 0x30
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	4619      	mov	r1, r3
 8000648:	4807      	ldr	r0, [pc, #28]	@ (8000668 <LCDTouchScreenInterruptGPIOInit+0x68>)
 800064a:	f003 fe1d 	bl	8004288 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800064e:	2028      	movs	r0, #40	@ 0x28
 8000650:	f003 fdcb 	bl	80041ea <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000654:	4b05      	ldr	r3, [pc, #20]	@ (800066c <LCDTouchScreenInterruptGPIOInit+0x6c>)
 8000656:	4a06      	ldr	r2, [pc, #24]	@ (8000670 <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000658:	601a      	str	r2, [r3, #0]

}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40020000 	.word	0x40020000
 800066c:	2000009c 	.word	0x2000009c
 8000670:	0600000f 	.word	0x0600000f

08000674 <EXTI15_10_IRQHandler>:

#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

void EXTI15_10_IRQHandler()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // Disable the IRQ to avoid re-entrancy
 800067a:	2028      	movs	r0, #40	@ 0x28
 800067c:	f003 fdc3 	bl	8004206 <HAL_NVIC_DisableIRQ>
    bool isTouchDetected = false;
 8000680:	2300      	movs	r3, #0
 8000682:	71fb      	strb	r3, [r7, #7]

    static uint32_t count;
    count = 0;
 8000684:	4b3a      	ldr	r3, [pc, #232]	@ (8000770 <EXTI15_10_IRQHandler+0xfc>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
    while (count == 0) {
 800068a:	e006      	b.n	800069a <EXTI15_10_IRQHandler+0x26>
        count = STMPE811_Read(STMPE811_FIFO_SIZE);
 800068c:	204c      	movs	r0, #76	@ 0x4c
 800068e:	f003 f842 	bl	8003716 <STMPE811_Read>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	4b36      	ldr	r3, [pc, #216]	@ (8000770 <EXTI15_10_IRQHandler+0xfc>)
 8000698:	601a      	str	r2, [r3, #0]
    while (count == 0) {
 800069a:	4b35      	ldr	r3, [pc, #212]	@ (8000770 <EXTI15_10_IRQHandler+0xfc>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f4      	beq.n	800068c <EXTI15_10_IRQHandler+0x18>
    }

    // Disable touch interrupt bit on the STMPE811
    uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80006a2:	200a      	movs	r0, #10
 80006a4:	f001 fbdd 	bl	8001e62 <ReadRegisterFromTouchModule>
 80006a8:	4603      	mov	r3, r0
 80006aa:	71bb      	strb	r3, [r7, #6]
    WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 80006ac:	2100      	movs	r1, #0
 80006ae:	200a      	movs	r0, #10
 80006b0:	f001 fbe5 	bl	8001e7e <WriteDataToTouchModule>

    // Clear the interrupt bit in the STMPE811
    uint8_t statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 80006b4:	200b      	movs	r0, #11
 80006b6:	f001 fbd4 	bl	8001e62 <ReadRegisterFromTouchModule>
 80006ba:	4603      	mov	r3, r0
 80006bc:	717b      	strb	r3, [r7, #5]
    uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 80006be:	797b      	ldrb	r3, [r7, #5]
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	713b      	strb	r3, [r7, #4]
    WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80006c6:	793b      	ldrb	r3, [r7, #4]
 80006c8:	4619      	mov	r1, r3
 80006ca:	200b      	movs	r0, #11
 80006cc:	f001 fbd7 	bl	8001e7e <WriteDataToTouchModule>

    uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 80006d0:	2040      	movs	r0, #64	@ 0x40
 80006d2:	f001 fbc6 	bl	8001e62 <ReadRegisterFromTouchModule>
 80006d6:	4603      	mov	r3, r0
 80006d8:	70fb      	strb	r3, [r7, #3]
    if (ctrlReg & 0x80) {
 80006da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	da01      	bge.n	80006e6 <EXTI15_10_IRQHandler+0x72>
        isTouchDetected = true;
 80006e2:	2301      	movs	r3, #1
 80006e4:	71fb      	strb	r3, [r7, #7]
    }

    // Determine if it is pressed or unpressed
    if (isTouchDetected) { // Touch has been detected
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d020      	beq.n	800072e <EXTI15_10_IRQHandler+0xba>
        DetermineTouchPosition(&StaticTouchData);
 80006ec:	4821      	ldr	r0, [pc, #132]	@ (8000774 <EXTI15_10_IRQHandler+0x100>)
 80006ee:	f001 fbad 	bl	8001e4c <DetermineTouchPosition>

        if (currentState == MAIN_MENU) {
 80006f2:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <EXTI15_10_IRQHandler+0x104>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d107      	bne.n	800070c <EXTI15_10_IRQHandler+0x98>
            // Handle touch in the main menu
            currentState = GAME_SCREEN;  // Transition to the game screen
 80006fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000778 <EXTI15_10_IRQHandler+0x104>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
            InitializeGame();            // Initialize game state
 8000702:	f000 f889 	bl	8000818 <InitializeGame>
            RenderGameScreen();          // Show the game grid
 8000706:	f000 f8a7 	bl	8000858 <RenderGameScreen>
 800070a:	e010      	b.n	800072e <EXTI15_10_IRQHandler+0xba>
        } else if (currentState == GAME_SCREEN) {
 800070c:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <EXTI15_10_IRQHandler+0x104>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b01      	cmp	r3, #1
 8000714:	d10b      	bne.n	800072e <EXTI15_10_IRQHandler+0xba>
            // Handle touch during the game
            uint16_t screenMidpoint = LCD_PIXEL_WIDTH / 2;
 8000716:	2378      	movs	r3, #120	@ 0x78
 8000718:	803b      	strh	r3, [r7, #0]

            //Flipped because i flipped the pixels 180deg
            if (StaticTouchData.x < screenMidpoint) {
 800071a:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <EXTI15_10_IRQHandler+0x100>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	883a      	ldrh	r2, [r7, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	d902      	bls.n	800072a <EXTI15_10_IRQHandler+0xb6>
                // Left half of the screen
                MoveFallingBlockRight();
 8000724:	f000 fadc 	bl	8000ce0 <MoveFallingBlockRight>
 8000728:	e001      	b.n	800072e <EXTI15_10_IRQHandler+0xba>
            } else {
                // Right half of the screen
                MoveFallingBlockLeft();
 800072a:	f000 fa67 	bl	8000bfc <MoveFallingBlockLeft>
            }
        }
    }

    // Reset FIFO
    STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 800072e:	2101      	movs	r1, #1
 8000730:	204b      	movs	r0, #75	@ 0x4b
 8000732:	f003 f801 	bl	8003738 <STMPE811_Write>
    STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000736:	2100      	movs	r1, #0
 8000738:	204b      	movs	r0, #75	@ 0x4b
 800073a:	f002 fffd 	bl	8003738 <STMPE811_Write>

    // Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	4619      	mov	r1, r3
 8000742:	200a      	movs	r0, #10
 8000744:	f001 fb9b 	bl	8001e7e <WriteDataToTouchModule>
    HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000748:	2103      	movs	r1, #3
 800074a:	480c      	ldr	r0, [pc, #48]	@ (800077c <EXTI15_10_IRQHandler+0x108>)
 800074c:	f003 fd84 	bl	8004258 <HAL_EXTI_ClearPending>

    HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000750:	2028      	movs	r0, #40	@ 0x28
 8000752:	f003 fd72 	bl	800423a <HAL_NVIC_ClearPendingIRQ>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000756:	2028      	movs	r0, #40	@ 0x28
 8000758:	f003 fd47 	bl	80041ea <HAL_NVIC_EnableIRQ>

    // Clear IRQ bit again in case of errata
    WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800075c:	793b      	ldrb	r3, [r7, #4]
 800075e:	4619      	mov	r1, r3
 8000760:	200b      	movs	r0, #11
 8000762:	f001 fb8c 	bl	8001e7e <WriteDataToTouchModule>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000a8 	.word	0x200000a8
 8000774:	20000094 	.word	0x20000094
 8000778:	200000a4 	.word	0x200000a4
 800077c:	2000009c 	.word	0x2000009c

08000780 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d101      	bne.n	8000794 <HAL_GPIO_EXTI_Callback+0x14>
        RotateFallingBlock();
 8000790:	f000 fb26 	bl	8000de0 <RotateFallingBlock>
    }
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) { // Check if TIM2 triggered the callback
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007ac:	d115      	bne.n	80007da <HAL_TIM_PeriodElapsedCallback+0x3e>
        __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE); // Disable TIM2 interrupt
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	68da      	ldr	r2, [r3, #12]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f022 0201 	bic.w	r2, r2, #1
 80007bc:	60da      	str	r2, [r3, #12]
        elapsedTime++; // Increment elapsed time counter
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007c8:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE); // Reenable TIM2 interrupt
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	68da      	ldr	r2, [r3, #12]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f042 0201 	orr.w	r2, r2, #1
 80007d8:	60da      	str	r2, [r3, #12]
    }
    if (htim->Instance == TIM5) { // Check if TIM2 triggered the callback
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a0d      	ldr	r2, [pc, #52]	@ (8000814 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d111      	bne.n	8000808 <HAL_TIM_PeriodElapsedCallback+0x6c>
        __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE); // Disable TIM5 interrupt
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	68da      	ldr	r2, [r3, #12]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f022 0201 	bic.w	r2, r2, #1
 80007f2:	60da      	str	r2, [r3, #12]
        Game();
 80007f4:	f7ff fef2 	bl	80005dc <Game>
        __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE); // Reenable TIM5 interrupt
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	68da      	ldr	r2, [r3, #12]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f042 0201 	orr.w	r2, r2, #1
 8000806:	60da      	str	r2, [r3, #12]
    }
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000031c 	.word	0x2000031c
 8000814:	40000c00 	.word	0x40000c00

08000818 <InitializeGame>:
        .height = 2,
        .color = LCD_COLOR_RED
    }
};

void InitializeGame(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    ShuffleBag();
 800081c:	f000 fd02 	bl	8001224 <ShuffleBag>
    SpawnRandomBlock();
 8000820:	f000 ff16 	bl	8001650 <SpawnRandomBlock>

    // Setup Timers
    elapsedTime = 0;
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <InitializeGame+0x34>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <InitializeGame+0x38>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start_IT(&htim2);
 8000832:	4807      	ldr	r0, [pc, #28]	@ (8000850 <InitializeGame+0x38>)
 8000834:	f006 fd4c 	bl	80072d0 <HAL_TIM_Base_Start_IT>
    __HAL_TIM_SET_COUNTER(&htim5, 0);
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <InitializeGame+0x3c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2200      	movs	r2, #0
 800083e:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start_IT(&htim5);
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <InitializeGame+0x3c>)
 8000842:	f006 fd45 	bl	80072d0 <HAL_TIM_Base_Start_IT>
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000031c 	.word	0x2000031c
 8000850:	20025dc8 	.word	0x20025dc8
 8000854:	20025e10 	.word	0x20025e10

08000858 <RenderGameScreen>:

void RenderGameScreen(void) {
 8000858:	b5b0      	push	{r4, r5, r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_BLACK);
 800085e:	2100      	movs	r1, #0
 8000860:	2000      	movs	r0, #0
 8000862:	f001 f9f1 	bl	8001c48 <LCD_Clear>

    uint16_t gridBlockSize = LCD_PIXEL_HEIGHT / GRID_HEIGHT;
 8000866:	2310      	movs	r3, #16
 8000868:	817b      	strh	r3, [r7, #10]

    // Render the grid
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 800086a:	2300      	movs	r3, #0
 800086c:	75fb      	strb	r3, [r7, #23]
 800086e:	e0be      	b.n	80009ee <RenderGameScreen+0x196>
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 8000870:	2300      	movs	r3, #0
 8000872:	75bb      	strb	r3, [r7, #22]
 8000874:	e0b4      	b.n	80009e0 <RenderGameScreen+0x188>
            // Calculate top-left corner of the block
            uint16_t startX = x * gridBlockSize;
 8000876:	7dbb      	ldrb	r3, [r7, #22]
 8000878:	b29b      	uxth	r3, r3
 800087a:	897a      	ldrh	r2, [r7, #10]
 800087c:	fb12 f303 	smulbb	r3, r2, r3
 8000880:	813b      	strh	r3, [r7, #8]
            uint16_t startY = y * gridBlockSize;
 8000882:	7dfb      	ldrb	r3, [r7, #23]
 8000884:	b29b      	uxth	r3, r3
 8000886:	897a      	ldrh	r2, [r7, #10]
 8000888:	fb12 f303 	smulbb	r3, r2, r3
 800088c:	80fb      	strh	r3, [r7, #6]

            // Draw grid lines (white border for all blocks)
            for (uint16_t i = 0; i < gridBlockSize; i++) {
 800088e:	2300      	movs	r3, #0
 8000890:	82bb      	strh	r3, [r7, #20]
 8000892:	e034      	b.n	80008fe <RenderGameScreen+0xa6>
                LCD_Draw_Pixel(startX + i, startY, LCD_COLOR_WHITE);                 // Top line
 8000894:	893a      	ldrh	r2, [r7, #8]
 8000896:	8abb      	ldrh	r3, [r7, #20]
 8000898:	4413      	add	r3, r2
 800089a:	b29b      	uxth	r3, r3
 800089c:	88f9      	ldrh	r1, [r7, #6]
 800089e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 f94a 	bl	8001b3c <LCD_Draw_Pixel>
                LCD_Draw_Pixel(startX + i, startY + gridBlockSize - 1, LCD_COLOR_WHITE); // Bottom line
 80008a8:	893a      	ldrh	r2, [r7, #8]
 80008aa:	8abb      	ldrh	r3, [r7, #20]
 80008ac:	4413      	add	r3, r2
 80008ae:	b298      	uxth	r0, r3
 80008b0:	88fa      	ldrh	r2, [r7, #6]
 80008b2:	897b      	ldrh	r3, [r7, #10]
 80008b4:	4413      	add	r3, r2
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	3b01      	subs	r3, #1
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008c0:	4619      	mov	r1, r3
 80008c2:	f001 f93b 	bl	8001b3c <LCD_Draw_Pixel>
                LCD_Draw_Pixel(startX, startY + i, LCD_COLOR_WHITE);                 // Left line
 80008c6:	88fa      	ldrh	r2, [r7, #6]
 80008c8:	8abb      	ldrh	r3, [r7, #20]
 80008ca:	4413      	add	r3, r2
 80008cc:	b299      	uxth	r1, r3
 80008ce:	893b      	ldrh	r3, [r7, #8]
 80008d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 f931 	bl	8001b3c <LCD_Draw_Pixel>
                LCD_Draw_Pixel(startX + gridBlockSize - 1, startY + i, LCD_COLOR_WHITE); // Right line
 80008da:	893a      	ldrh	r2, [r7, #8]
 80008dc:	897b      	ldrh	r3, [r7, #10]
 80008de:	4413      	add	r3, r2
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	3b01      	subs	r3, #1
 80008e4:	b298      	uxth	r0, r3
 80008e6:	88fa      	ldrh	r2, [r7, #6]
 80008e8:	8abb      	ldrh	r3, [r7, #20]
 80008ea:	4413      	add	r3, r2
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008f2:	4619      	mov	r1, r3
 80008f4:	f001 f922 	bl	8001b3c <LCD_Draw_Pixel>
            for (uint16_t i = 0; i < gridBlockSize; i++) {
 80008f8:	8abb      	ldrh	r3, [r7, #20]
 80008fa:	3301      	adds	r3, #1
 80008fc:	82bb      	strh	r3, [r7, #20]
 80008fe:	8aba      	ldrh	r2, [r7, #20]
 8000900:	897b      	ldrh	r3, [r7, #10]
 8000902:	429a      	cmp	r2, r3
 8000904:	d3c6      	bcc.n	8000894 <RenderGameScreen+0x3c>
            }

            // Render the static matrix (blockMatrix) with stored colors
            if (blockMatrix[y][x] != 0x0000) {
 8000906:	7dfa      	ldrb	r2, [r7, #23]
 8000908:	7db9      	ldrb	r1, [r7, #22]
 800090a:	483f      	ldr	r0, [pc, #252]	@ (8000a08 <RenderGameScreen+0x1b0>)
 800090c:	4613      	mov	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	440b      	add	r3, r1
 8000916:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d02b      	beq.n	8000976 <RenderGameScreen+0x11e>
                for (uint16_t i = 1; i < gridBlockSize - 1; i++) {
 800091e:	2301      	movs	r3, #1
 8000920:	827b      	strh	r3, [r7, #18]
 8000922:	e023      	b.n	800096c <RenderGameScreen+0x114>
                    for (uint16_t j = 1; j < gridBlockSize - 1; j++) {
 8000924:	2301      	movs	r3, #1
 8000926:	823b      	strh	r3, [r7, #16]
 8000928:	e018      	b.n	800095c <RenderGameScreen+0x104>
                        LCD_Draw_Pixel(startX + i, startY + j, blockMatrix[y][x]);
 800092a:	893a      	ldrh	r2, [r7, #8]
 800092c:	8a7b      	ldrh	r3, [r7, #18]
 800092e:	4413      	add	r3, r2
 8000930:	b298      	uxth	r0, r3
 8000932:	88fa      	ldrh	r2, [r7, #6]
 8000934:	8a3b      	ldrh	r3, [r7, #16]
 8000936:	4413      	add	r3, r2
 8000938:	b29c      	uxth	r4, r3
 800093a:	7dfa      	ldrb	r2, [r7, #23]
 800093c:	7db9      	ldrb	r1, [r7, #22]
 800093e:	4d32      	ldr	r5, [pc, #200]	@ (8000a08 <RenderGameScreen+0x1b0>)
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	440b      	add	r3, r1
 800094a:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800094e:	461a      	mov	r2, r3
 8000950:	4621      	mov	r1, r4
 8000952:	f001 f8f3 	bl	8001b3c <LCD_Draw_Pixel>
                    for (uint16_t j = 1; j < gridBlockSize - 1; j++) {
 8000956:	8a3b      	ldrh	r3, [r7, #16]
 8000958:	3301      	adds	r3, #1
 800095a:	823b      	strh	r3, [r7, #16]
 800095c:	8a3a      	ldrh	r2, [r7, #16]
 800095e:	897b      	ldrh	r3, [r7, #10]
 8000960:	3b01      	subs	r3, #1
 8000962:	429a      	cmp	r2, r3
 8000964:	dbe1      	blt.n	800092a <RenderGameScreen+0xd2>
                for (uint16_t i = 1; i < gridBlockSize - 1; i++) {
 8000966:	8a7b      	ldrh	r3, [r7, #18]
 8000968:	3301      	adds	r3, #1
 800096a:	827b      	strh	r3, [r7, #18]
 800096c:	8a7a      	ldrh	r2, [r7, #18]
 800096e:	897b      	ldrh	r3, [r7, #10]
 8000970:	3b01      	subs	r3, #1
 8000972:	429a      	cmp	r2, r3
 8000974:	dbd6      	blt.n	8000924 <RenderGameScreen+0xcc>
                    }
                }
            }

            // Render the falling block (fallingBlockMatrix) with its color
            if (fallingBlockMatrix[y][x] == 1) {
 8000976:	7dfa      	ldrb	r2, [r7, #23]
 8000978:	7db9      	ldrb	r1, [r7, #22]
 800097a:	4824      	ldr	r0, [pc, #144]	@ (8000a0c <RenderGameScreen+0x1b4>)
 800097c:	4613      	mov	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4403      	add	r3, r0
 8000986:	440b      	add	r3, r1
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d125      	bne.n	80009da <RenderGameScreen+0x182>
                uint32_t color = fallingBlock.color;
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <RenderGameScreen+0x1b8>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	603b      	str	r3, [r7, #0]

                for (uint16_t i = 1; i < gridBlockSize - 1; i++) {
 8000994:	2301      	movs	r3, #1
 8000996:	81fb      	strh	r3, [r7, #14]
 8000998:	e01a      	b.n	80009d0 <RenderGameScreen+0x178>
                    for (uint16_t j = 1; j < gridBlockSize - 1; j++) {
 800099a:	2301      	movs	r3, #1
 800099c:	81bb      	strh	r3, [r7, #12]
 800099e:	e00f      	b.n	80009c0 <RenderGameScreen+0x168>
                        LCD_Draw_Pixel(startX + i, startY + j, color);
 80009a0:	893a      	ldrh	r2, [r7, #8]
 80009a2:	89fb      	ldrh	r3, [r7, #14]
 80009a4:	4413      	add	r3, r2
 80009a6:	b298      	uxth	r0, r3
 80009a8:	88fa      	ldrh	r2, [r7, #6]
 80009aa:	89bb      	ldrh	r3, [r7, #12]
 80009ac:	4413      	add	r3, r2
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	b292      	uxth	r2, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	f001 f8c1 	bl	8001b3c <LCD_Draw_Pixel>
                    for (uint16_t j = 1; j < gridBlockSize - 1; j++) {
 80009ba:	89bb      	ldrh	r3, [r7, #12]
 80009bc:	3301      	adds	r3, #1
 80009be:	81bb      	strh	r3, [r7, #12]
 80009c0:	89ba      	ldrh	r2, [r7, #12]
 80009c2:	897b      	ldrh	r3, [r7, #10]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	429a      	cmp	r2, r3
 80009c8:	dbea      	blt.n	80009a0 <RenderGameScreen+0x148>
                for (uint16_t i = 1; i < gridBlockSize - 1; i++) {
 80009ca:	89fb      	ldrh	r3, [r7, #14]
 80009cc:	3301      	adds	r3, #1
 80009ce:	81fb      	strh	r3, [r7, #14]
 80009d0:	89fa      	ldrh	r2, [r7, #14]
 80009d2:	897b      	ldrh	r3, [r7, #10]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	429a      	cmp	r2, r3
 80009d8:	dbdf      	blt.n	800099a <RenderGameScreen+0x142>
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 80009da:	7dbb      	ldrb	r3, [r7, #22]
 80009dc:	3301      	adds	r3, #1
 80009de:	75bb      	strb	r3, [r7, #22]
 80009e0:	7dbb      	ldrb	r3, [r7, #22]
 80009e2:	2b09      	cmp	r3, #9
 80009e4:	f67f af47 	bls.w	8000876 <RenderGameScreen+0x1e>
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 80009e8:	7dfb      	ldrb	r3, [r7, #23]
 80009ea:	3301      	adds	r3, #1
 80009ec:	75fb      	strb	r3, [r7, #23]
 80009ee:	7dfb      	ldrb	r3, [r7, #23]
 80009f0:	2b13      	cmp	r3, #19
 80009f2:	f67f af3d 	bls.w	8000870 <RenderGameScreen+0x18>
                    }
                }
            }
        }
    }
    DisplayTimer();
 80009f6:	f000 fca1 	bl	800133c <DisplayTimer>
    RenderNextBlock();
 80009fa:	f000 f80b 	bl	8000a14 <RenderNextBlock>
}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bdb0      	pop	{r4, r5, r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000ac 	.word	0x200000ac
 8000a0c:	2000023c 	.word	0x2000023c
 8000a10:	20000304 	.word	0x20000304

08000a14 <RenderNextBlock>:

void RenderNextBlock(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
    uint16_t nextBlockX = LCD_PIXEL_WIDTH - 80;
 8000a1a:	23a0      	movs	r3, #160	@ 0xa0
 8000a1c:	80fb      	strh	r3, [r7, #6]
    uint16_t nextBlockY = 50;
 8000a1e:	2332      	movs	r3, #50	@ 0x32
 8000a20:	80bb      	strh	r3, [r7, #4]

    LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a22:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000a26:	f001 f931 	bl	8001c8c <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8000a2a:	480e      	ldr	r0, [pc, #56]	@ (8000a64 <RenderNextBlock+0x50>)
 8000a2c:	f001 f93e 	bl	8001cac <LCD_SetFont>
    LCD_DisplayString(nextBlockX, nextBlockY - 20, "Next:");
 8000a30:	88bb      	ldrh	r3, [r7, #4]
 8000a32:	3b14      	subs	r3, #20
 8000a34:	b299      	uxth	r1, r3
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	4a0b      	ldr	r2, [pc, #44]	@ (8000a68 <RenderNextBlock+0x54>)
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 f9d6 	bl	8001dec <LCD_DisplayString>
    LCD_Draw_Block(nextBlockX, nextBlockY, &tetrisBlocks[nextBlock]);
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <RenderNextBlock+0x58>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4613      	mov	r3, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	4a08      	ldr	r2, [pc, #32]	@ (8000a70 <RenderNextBlock+0x5c>)
 8000a50:	441a      	add	r2, r3
 8000a52:	88b9      	ldrh	r1, [r7, #4]
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 f896 	bl	8001b88 <LCD_Draw_Block>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000004 	.word	0x20000004
 8000a68:	08008f54 	.word	0x08008f54
 8000a6c:	20000322 	.word	0x20000322
 8000a70:	08008fac 	.word	0x08008fac

08000a74 <UpdateFallingBlock>:

void UpdateFallingBlock(void) {
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
    for (int8_t y = GRID_HEIGHT - 1; y >= 0; y--) {
 8000a7a:	2313      	movs	r3, #19
 8000a7c:	73fb      	strb	r3, [r7, #15]
 8000a7e:	e070      	b.n	8000b62 <UpdateFallingBlock+0xee>
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 8000a80:	2300      	movs	r3, #0
 8000a82:	73bb      	strb	r3, [r7, #14]
 8000a84:	e064      	b.n	8000b50 <UpdateFallingBlock+0xdc>
            if (fallingBlockMatrix[y][x] == 1) {
 8000a86:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000a8a:	7bb9      	ldrb	r1, [r7, #14]
 8000a8c:	4857      	ldr	r0, [pc, #348]	@ (8000bec <UpdateFallingBlock+0x178>)
 8000a8e:	4613      	mov	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	4403      	add	r3, r0
 8000a98:	440b      	add	r3, r1
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d154      	bne.n	8000b4a <UpdateFallingBlock+0xd6>
                // Check collision with bottom or static blocks
                if (y == GRID_HEIGHT - 1 || blockMatrix[y + 1][x] != 0x000000) {
 8000aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa4:	2b13      	cmp	r3, #19
 8000aa6:	d00d      	beq.n	8000ac4 <UpdateFallingBlock+0x50>
 8000aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aac:	1c5a      	adds	r2, r3, #1
 8000aae:	7bb9      	ldrb	r1, [r7, #14]
 8000ab0:	484f      	ldr	r0, [pc, #316]	@ (8000bf0 <UpdateFallingBlock+0x17c>)
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4413      	add	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	440b      	add	r3, r1
 8000abc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d042      	beq.n	8000b4a <UpdateFallingBlock+0xd6>
                    // Determine the color of the falling block
                    uint32_t blockColor = fallingBlock.color;
 8000ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8000bf4 <UpdateFallingBlock+0x180>)
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	607b      	str	r3, [r7, #4]

                    // Merge falling block into the static block matrix
                    for (uint8_t mergeY = 0; mergeY < GRID_HEIGHT; mergeY++) {
 8000aca:	2300      	movs	r3, #0
 8000acc:	737b      	strb	r3, [r7, #13]
 8000ace:	e02f      	b.n	8000b30 <UpdateFallingBlock+0xbc>
                        for (uint8_t mergeX = 0; mergeX < GRID_WIDTH; mergeX++) {
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	733b      	strb	r3, [r7, #12]
 8000ad4:	e026      	b.n	8000b24 <UpdateFallingBlock+0xb0>
                            if (fallingBlockMatrix[mergeY][mergeX] == 1) {
 8000ad6:	7b7a      	ldrb	r2, [r7, #13]
 8000ad8:	7b39      	ldrb	r1, [r7, #12]
 8000ada:	4844      	ldr	r0, [pc, #272]	@ (8000bec <UpdateFallingBlock+0x178>)
 8000adc:	4613      	mov	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	4403      	add	r3, r0
 8000ae6:	440b      	add	r3, r1
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d117      	bne.n	8000b1e <UpdateFallingBlock+0xaa>
                                blockMatrix[mergeY][mergeX] = blockColor; // Store the block's color
 8000aee:	7b7a      	ldrb	r2, [r7, #13]
 8000af0:	7b39      	ldrb	r1, [r7, #12]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	b29c      	uxth	r4, r3
 8000af6:	483e      	ldr	r0, [pc, #248]	@ (8000bf0 <UpdateFallingBlock+0x17c>)
 8000af8:	4613      	mov	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	440b      	add	r3, r1
 8000b02:	4622      	mov	r2, r4
 8000b04:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
                                fallingBlockMatrix[mergeY][mergeX] = 0;  // Clear the falling block
 8000b08:	7b7a      	ldrb	r2, [r7, #13]
 8000b0a:	7b39      	ldrb	r1, [r7, #12]
 8000b0c:	4837      	ldr	r0, [pc, #220]	@ (8000bec <UpdateFallingBlock+0x178>)
 8000b0e:	4613      	mov	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4403      	add	r3, r0
 8000b18:	440b      	add	r3, r1
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
                        for (uint8_t mergeX = 0; mergeX < GRID_WIDTH; mergeX++) {
 8000b1e:	7b3b      	ldrb	r3, [r7, #12]
 8000b20:	3301      	adds	r3, #1
 8000b22:	733b      	strb	r3, [r7, #12]
 8000b24:	7b3b      	ldrb	r3, [r7, #12]
 8000b26:	2b09      	cmp	r3, #9
 8000b28:	d9d5      	bls.n	8000ad6 <UpdateFallingBlock+0x62>
                    for (uint8_t mergeY = 0; mergeY < GRID_HEIGHT; mergeY++) {
 8000b2a:	7b7b      	ldrb	r3, [r7, #13]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	737b      	strb	r3, [r7, #13]
 8000b30:	7b7b      	ldrb	r3, [r7, #13]
 8000b32:	2b13      	cmp	r3, #19
 8000b34:	d9cc      	bls.n	8000ad0 <UpdateFallingBlock+0x5c>
                            }
                        }
                    }
                    ClearFullRows();
 8000b36:	f000 fc4b 	bl	80013d0 <ClearFullRows>
                    if (currentState != GAME_OVER)
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf8 <UpdateFallingBlock+0x184>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d04f      	beq.n	8000be4 <UpdateFallingBlock+0x170>
                        SpawnRandomBlock();
 8000b44:	f000 fd84 	bl	8001650 <SpawnRandomBlock>
                    return;
 8000b48:	e04c      	b.n	8000be4 <UpdateFallingBlock+0x170>
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 8000b4a:	7bbb      	ldrb	r3, [r7, #14]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	73bb      	strb	r3, [r7, #14]
 8000b50:	7bbb      	ldrb	r3, [r7, #14]
 8000b52:	2b09      	cmp	r3, #9
 8000b54:	d997      	bls.n	8000a86 <UpdateFallingBlock+0x12>
    for (int8_t y = GRID_HEIGHT - 1; y >= 0; y--) {
 8000b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	da8a      	bge.n	8000a80 <UpdateFallingBlock+0xc>
            }
        }
    }

    // Move the falling block down
    for (int8_t y = GRID_HEIGHT - 1; y >= 0; y--) {
 8000b6a:	2313      	movs	r3, #19
 8000b6c:	72fb      	strb	r3, [r7, #11]
 8000b6e:	e034      	b.n	8000bda <UpdateFallingBlock+0x166>
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 8000b70:	2300      	movs	r3, #0
 8000b72:	72bb      	strb	r3, [r7, #10]
 8000b74:	e028      	b.n	8000bc8 <UpdateFallingBlock+0x154>
            if (fallingBlockMatrix[y][x] == 1) {
 8000b76:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000b7a:	7ab9      	ldrb	r1, [r7, #10]
 8000b7c:	481b      	ldr	r0, [pc, #108]	@ (8000bec <UpdateFallingBlock+0x178>)
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	4403      	add	r3, r0
 8000b88:	440b      	add	r3, r1
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d118      	bne.n	8000bc2 <UpdateFallingBlock+0x14e>
                fallingBlockMatrix[y + 1][x] = 1;
 8000b90:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	7ab9      	ldrb	r1, [r7, #10]
 8000b98:	4814      	ldr	r0, [pc, #80]	@ (8000bec <UpdateFallingBlock+0x178>)
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4413      	add	r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4403      	add	r3, r0
 8000ba4:	440b      	add	r3, r1
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
                fallingBlockMatrix[y][x] = 0;
 8000baa:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000bae:	7ab9      	ldrb	r1, [r7, #10]
 8000bb0:	480e      	ldr	r0, [pc, #56]	@ (8000bec <UpdateFallingBlock+0x178>)
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	4403      	add	r3, r0
 8000bbc:	440b      	add	r3, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 8000bc2:	7abb      	ldrb	r3, [r7, #10]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	72bb      	strb	r3, [r7, #10]
 8000bc8:	7abb      	ldrb	r3, [r7, #10]
 8000bca:	2b09      	cmp	r3, #9
 8000bcc:	d9d3      	bls.n	8000b76 <UpdateFallingBlock+0x102>
    for (int8_t y = GRID_HEIGHT - 1; y >= 0; y--) {
 8000bce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	72fb      	strb	r3, [r7, #11]
 8000bda:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	dac6      	bge.n	8000b70 <UpdateFallingBlock+0xfc>
 8000be2:	e000      	b.n	8000be6 <UpdateFallingBlock+0x172>
                    return;
 8000be4:	bf00      	nop
            }
        }
    }
}
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd90      	pop	{r4, r7, pc}
 8000bec:	2000023c 	.word	0x2000023c
 8000bf0:	200000ac 	.word	0x200000ac
 8000bf4:	20000304 	.word	0x20000304
 8000bf8:	200000a4 	.word	0x200000a4

08000bfc <MoveFallingBlockLeft>:



void MoveFallingBlockLeft(void) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
    // Check if the block can move left
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	71fb      	strb	r3, [r7, #7]
 8000c06:	e027      	b.n	8000c58 <MoveFallingBlockLeft+0x5c>
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 8000c08:	2300      	movs	r3, #0
 8000c0a:	71bb      	strb	r3, [r7, #6]
 8000c0c:	e01e      	b.n	8000c4c <MoveFallingBlockLeft+0x50>
            if (fallingBlockMatrix[y][x] == 1) {
 8000c0e:	79fa      	ldrb	r2, [r7, #7]
 8000c10:	79b9      	ldrb	r1, [r7, #6]
 8000c12:	4831      	ldr	r0, [pc, #196]	@ (8000cd8 <MoveFallingBlockLeft+0xdc>)
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	4403      	add	r3, r0
 8000c1e:	440b      	add	r3, r1
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d10f      	bne.n	8000c46 <MoveFallingBlockLeft+0x4a>
                if (x == 0 || blockMatrix[y][x - 1] == 1) {
 8000c26:	79bb      	ldrb	r3, [r7, #6]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d04e      	beq.n	8000cca <MoveFallingBlockLeft+0xce>
 8000c2c:	79fa      	ldrb	r2, [r7, #7]
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	1e59      	subs	r1, r3, #1
 8000c32:	482a      	ldr	r0, [pc, #168]	@ (8000cdc <MoveFallingBlockLeft+0xe0>)
 8000c34:	4613      	mov	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	440b      	add	r3, r1
 8000c3e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d041      	beq.n	8000cca <MoveFallingBlockLeft+0xce>
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	71bb      	strb	r3, [r7, #6]
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	2b09      	cmp	r3, #9
 8000c50:	d9dd      	bls.n	8000c0e <MoveFallingBlockLeft+0x12>
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	3301      	adds	r3, #1
 8000c56:	71fb      	strb	r3, [r7, #7]
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b13      	cmp	r3, #19
 8000c5c:	d9d4      	bls.n	8000c08 <MoveFallingBlockLeft+0xc>
            }
        }
    }

    // Move the block left
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	717b      	strb	r3, [r7, #5]
 8000c62:	e02e      	b.n	8000cc2 <MoveFallingBlockLeft+0xc6>
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 8000c64:	2300      	movs	r3, #0
 8000c66:	713b      	strb	r3, [r7, #4]
 8000c68:	e025      	b.n	8000cb6 <MoveFallingBlockLeft+0xba>
            if (fallingBlockMatrix[y][x] == 1) {
 8000c6a:	797a      	ldrb	r2, [r7, #5]
 8000c6c:	7939      	ldrb	r1, [r7, #4]
 8000c6e:	481a      	ldr	r0, [pc, #104]	@ (8000cd8 <MoveFallingBlockLeft+0xdc>)
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4403      	add	r3, r0
 8000c7a:	440b      	add	r3, r1
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d116      	bne.n	8000cb0 <MoveFallingBlockLeft+0xb4>
                fallingBlockMatrix[y][x - 1] = 1;
 8000c82:	797a      	ldrb	r2, [r7, #5]
 8000c84:	793b      	ldrb	r3, [r7, #4]
 8000c86:	1e59      	subs	r1, r3, #1
 8000c88:	4813      	ldr	r0, [pc, #76]	@ (8000cd8 <MoveFallingBlockLeft+0xdc>)
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	4403      	add	r3, r0
 8000c94:	440b      	add	r3, r1
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
                fallingBlockMatrix[y][x] = 0;
 8000c9a:	797a      	ldrb	r2, [r7, #5]
 8000c9c:	7939      	ldrb	r1, [r7, #4]
 8000c9e:	480e      	ldr	r0, [pc, #56]	@ (8000cd8 <MoveFallingBlockLeft+0xdc>)
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4403      	add	r3, r0
 8000caa:	440b      	add	r3, r1
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 8000cb0:	793b      	ldrb	r3, [r7, #4]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	713b      	strb	r3, [r7, #4]
 8000cb6:	793b      	ldrb	r3, [r7, #4]
 8000cb8:	2b09      	cmp	r3, #9
 8000cba:	d9d6      	bls.n	8000c6a <MoveFallingBlockLeft+0x6e>
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 8000cbc:	797b      	ldrb	r3, [r7, #5]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	717b      	strb	r3, [r7, #5]
 8000cc2:	797b      	ldrb	r3, [r7, #5]
 8000cc4:	2b13      	cmp	r3, #19
 8000cc6:	d9cd      	bls.n	8000c64 <MoveFallingBlockLeft+0x68>
 8000cc8:	e000      	b.n	8000ccc <MoveFallingBlockLeft+0xd0>
                    return; // Illegal move, do nothing
 8000cca:	bf00      	nop
            }
        }
    }
}
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	2000023c 	.word	0x2000023c
 8000cdc:	200000ac 	.word	0x200000ac

08000ce0 <MoveFallingBlockRight>:

void MoveFallingBlockRight(void) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
    // Check if the block can move right
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	71fb      	strb	r3, [r7, #7]
 8000cea:	e02e      	b.n	8000d4a <MoveFallingBlockRight+0x6a>
        for (int8_t x = GRID_WIDTH - 1; x >= 0; x--) {
 8000cec:	2309      	movs	r3, #9
 8000cee:	71bb      	strb	r3, [r7, #6]
 8000cf0:	e024      	b.n	8000d3c <MoveFallingBlockRight+0x5c>
            if (fallingBlockMatrix[y][x] == 1) {
 8000cf2:	79fa      	ldrb	r2, [r7, #7]
 8000cf4:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8000cf8:	4837      	ldr	r0, [pc, #220]	@ (8000dd8 <MoveFallingBlockRight+0xf8>)
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4403      	add	r3, r0
 8000d04:	440b      	add	r3, r1
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d111      	bne.n	8000d30 <MoveFallingBlockRight+0x50>
                if (x == GRID_WIDTH - 1 || blockMatrix[y][x + 1] == 1) {
 8000d0c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d10:	2b09      	cmp	r3, #9
 8000d12:	d05a      	beq.n	8000dca <MoveFallingBlockRight+0xea>
 8000d14:	79fa      	ldrb	r2, [r7, #7]
 8000d16:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d1a:	1c59      	adds	r1, r3, #1
 8000d1c:	482f      	ldr	r0, [pc, #188]	@ (8000ddc <MoveFallingBlockRight+0xfc>)
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	440b      	add	r3, r1
 8000d28:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d04c      	beq.n	8000dca <MoveFallingBlockRight+0xea>
        for (int8_t x = GRID_WIDTH - 1; x >= 0; x--) {
 8000d30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	3b01      	subs	r3, #1
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	71bb      	strb	r3, [r7, #6]
 8000d3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dad6      	bge.n	8000cf2 <MoveFallingBlockRight+0x12>
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	3301      	adds	r3, #1
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b13      	cmp	r3, #19
 8000d4e:	d9cd      	bls.n	8000cec <MoveFallingBlockRight+0xc>
            }
        }
    }

    // Move the block right
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 8000d50:	2300      	movs	r3, #0
 8000d52:	717b      	strb	r3, [r7, #5]
 8000d54:	e035      	b.n	8000dc2 <MoveFallingBlockRight+0xe2>
        for (int8_t x = GRID_WIDTH - 1; x >= 0; x--) {
 8000d56:	2309      	movs	r3, #9
 8000d58:	713b      	strb	r3, [r7, #4]
 8000d5a:	e02b      	b.n	8000db4 <MoveFallingBlockRight+0xd4>
            if (fallingBlockMatrix[y][x] == 1) {
 8000d5c:	797a      	ldrb	r2, [r7, #5]
 8000d5e:	f997 1004 	ldrsb.w	r1, [r7, #4]
 8000d62:	481d      	ldr	r0, [pc, #116]	@ (8000dd8 <MoveFallingBlockRight+0xf8>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4403      	add	r3, r0
 8000d6e:	440b      	add	r3, r1
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d118      	bne.n	8000da8 <MoveFallingBlockRight+0xc8>
                fallingBlockMatrix[y][x + 1] = 1;
 8000d76:	797a      	ldrb	r2, [r7, #5]
 8000d78:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000d7c:	1c59      	adds	r1, r3, #1
 8000d7e:	4816      	ldr	r0, [pc, #88]	@ (8000dd8 <MoveFallingBlockRight+0xf8>)
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4403      	add	r3, r0
 8000d8a:	440b      	add	r3, r1
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
                fallingBlockMatrix[y][x] = 0;
 8000d90:	797a      	ldrb	r2, [r7, #5]
 8000d92:	f997 1004 	ldrsb.w	r1, [r7, #4]
 8000d96:	4810      	ldr	r0, [pc, #64]	@ (8000dd8 <MoveFallingBlockRight+0xf8>)
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4403      	add	r3, r0
 8000da2:	440b      	add	r3, r1
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
        for (int8_t x = GRID_WIDTH - 1; x >= 0; x--) {
 8000da8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	3b01      	subs	r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	713b      	strb	r3, [r7, #4]
 8000db4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	dacf      	bge.n	8000d5c <MoveFallingBlockRight+0x7c>
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 8000dbc:	797b      	ldrb	r3, [r7, #5]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	717b      	strb	r3, [r7, #5]
 8000dc2:	797b      	ldrb	r3, [r7, #5]
 8000dc4:	2b13      	cmp	r3, #19
 8000dc6:	d9c6      	bls.n	8000d56 <MoveFallingBlockRight+0x76>
 8000dc8:	e000      	b.n	8000dcc <MoveFallingBlockRight+0xec>
                    return; // Illegal move, do nothing
 8000dca:	bf00      	nop
            }
        }
    }
}
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000023c 	.word	0x2000023c
 8000ddc:	200000ac 	.word	0x200000ac

08000de0 <RotateFallingBlock>:

void RotateFallingBlock(void) {
 8000de0:	b4b0      	push	{r4, r5, r7}
 8000de2:	b08d      	sub	sp, #52	@ 0x34
 8000de4:	af00      	add	r7, sp, #0
    uint8_t tempMatrix[4][4] = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
    uint8_t blockWidth = fallingBlock.width;
 8000df2:	4bb8      	ldr	r3, [pc, #736]	@ (80010d4 <RotateFallingBlock+0x2f4>)
 8000df4:	7c1b      	ldrb	r3, [r3, #16]
 8000df6:	76fb      	strb	r3, [r7, #27]
    uint8_t blockHeight = fallingBlock.height;
 8000df8:	4bb6      	ldr	r3, [pc, #728]	@ (80010d4 <RotateFallingBlock+0x2f4>)
 8000dfa:	7c5b      	ldrb	r3, [r3, #17]
 8000dfc:	76bb      	strb	r3, [r7, #26]
    uint8_t topLeftX = GRID_WIDTH;
 8000dfe:	230a      	movs	r3, #10
 8000e00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t topLeftY = GRID_HEIGHT;
 8000e04:	2314      	movs	r3, #20
 8000e06:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // Find the minimum x and y coordinates of the falling block
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000e10:	e033      	b.n	8000e7a <RotateFallingBlock+0x9a>
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 8000e12:	2300      	movs	r3, #0
 8000e14:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000e18:	e026      	b.n	8000e68 <RotateFallingBlock+0x88>
            if (fallingBlockMatrix[y][x] == 1) {
 8000e1a:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000e1e:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8000e22:	48ad      	ldr	r0, [pc, #692]	@ (80010d8 <RotateFallingBlock+0x2f8>)
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	4403      	add	r3, r0
 8000e2e:	440b      	add	r3, r1
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d113      	bne.n	8000e5e <RotateFallingBlock+0x7e>
                if (x < topLeftX) topLeftX = x;
 8000e36:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000e3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d203      	bcs.n	8000e4a <RotateFallingBlock+0x6a>
 8000e42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                if (y < topLeftY) topLeftY = y;
 8000e4a:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000e4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d203      	bcs.n	8000e5e <RotateFallingBlock+0x7e>
 8000e56:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000e5a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 8000e5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e62:	3301      	adds	r3, #1
 8000e64:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000e68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e6c:	2b09      	cmp	r3, #9
 8000e6e:	d9d4      	bls.n	8000e1a <RotateFallingBlock+0x3a>
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 8000e70:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000e74:	3301      	adds	r3, #1
 8000e76:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000e7a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000e7e:	2b13      	cmp	r3, #19
 8000e80:	d9c7      	bls.n	8000e12 <RotateFallingBlock+0x32>
            }
        }
    }

    // Extract the current block into tempMatrix
    for (uint8_t y = 0; y < BLOCK_SIZE; y++) {
 8000e82:	2300      	movs	r3, #0
 8000e84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000e88:	e02d      	b.n	8000ee6 <RotateFallingBlock+0x106>
        for (uint8_t x = 0; x < BLOCK_SIZE; x++) {
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000e90:	e020      	b.n	8000ed4 <RotateFallingBlock+0xf4>
            tempMatrix[y][x] = fallingBlockMatrix[topLeftY + y][topLeftX + x];
 8000e92:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000e96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000e9a:	441a      	add	r2, r3
 8000e9c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8000ea0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000ea4:	18cc      	adds	r4, r1, r3
 8000ea6:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 8000eaa:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8000eae:	4d8a      	ldr	r5, [pc, #552]	@ (80010d8 <RotateFallingBlock+0x2f8>)
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	442b      	add	r3, r5
 8000eba:	4423      	add	r3, r4
 8000ebc:	781a      	ldrb	r2, [r3, #0]
 8000ebe:	0083      	lsls	r3, r0, #2
 8000ec0:	3330      	adds	r3, #48	@ 0x30
 8000ec2:	443b      	add	r3, r7
 8000ec4:	440b      	add	r3, r1
 8000ec6:	3b2c      	subs	r3, #44	@ 0x2c
 8000ec8:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 0; x < BLOCK_SIZE; x++) {
 8000eca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000ece:	3301      	adds	r3, #1
 8000ed0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000ed4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d9da      	bls.n	8000e92 <RotateFallingBlock+0xb2>
    for (uint8_t y = 0; y < BLOCK_SIZE; y++) {
 8000edc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000ee6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d9cd      	bls.n	8000e8a <RotateFallingBlock+0xaa>
        }
    }

    // Transpose the matrix
    for (uint8_t i = 0; i < BLOCK_SIZE; i++) {
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8000ef4:	e03e      	b.n	8000f74 <RotateFallingBlock+0x194>
        for (uint8_t j = i + 1; j < BLOCK_SIZE; j++) {
 8000ef6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000efa:	3301      	adds	r3, #1
 8000efc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000f00:	e02f      	b.n	8000f62 <RotateFallingBlock+0x182>
            uint8_t temp = tempMatrix[i][j];
 8000f02:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8000f06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	3230      	adds	r2, #48	@ 0x30
 8000f0e:	443a      	add	r2, r7
 8000f10:	4413      	add	r3, r2
 8000f12:	3b2c      	subs	r3, #44	@ 0x2c
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	757b      	strb	r3, [r7, #21]
            tempMatrix[i][j] = tempMatrix[j][i];
 8000f18:	f897 0028 	ldrb.w	r0, [r7, #40]	@ 0x28
 8000f1c:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8000f20:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8000f24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f28:	0080      	lsls	r0, r0, #2
 8000f2a:	3030      	adds	r0, #48	@ 0x30
 8000f2c:	4438      	add	r0, r7
 8000f2e:	4401      	add	r1, r0
 8000f30:	392c      	subs	r1, #44	@ 0x2c
 8000f32:	7809      	ldrb	r1, [r1, #0]
 8000f34:	0092      	lsls	r2, r2, #2
 8000f36:	3230      	adds	r2, #48	@ 0x30
 8000f38:	443a      	add	r2, r7
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3b2c      	subs	r3, #44	@ 0x2c
 8000f3e:	460a      	mov	r2, r1
 8000f40:	701a      	strb	r2, [r3, #0]
            tempMatrix[j][i] = temp;
 8000f42:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f46:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	3230      	adds	r2, #48	@ 0x30
 8000f4e:	443a      	add	r2, r7
 8000f50:	4413      	add	r3, r2
 8000f52:	3b2c      	subs	r3, #44	@ 0x2c
 8000f54:	7d7a      	ldrb	r2, [r7, #21]
 8000f56:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = i + 1; j < BLOCK_SIZE; j++) {
 8000f58:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000f62:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d9cb      	bls.n	8000f02 <RotateFallingBlock+0x122>
    for (uint8_t i = 0; i < BLOCK_SIZE; i++) {
 8000f6a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8000f74:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d9bc      	bls.n	8000ef6 <RotateFallingBlock+0x116>
        }
    }

    // Reverse each row
    for (uint8_t i = 0; i < BLOCK_SIZE; i++) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f82:	e046      	b.n	8001012 <RotateFallingBlock+0x232>
        uint8_t start = 0, end = BLOCK_SIZE-1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        while (start < end) {
 8000f90:	e034      	b.n	8000ffc <RotateFallingBlock+0x21c>
            uint8_t temp = tempMatrix[i][start];
 8000f92:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	3230      	adds	r2, #48	@ 0x30
 8000f9e:	443a      	add	r2, r7
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3b2c      	subs	r3, #44	@ 0x2c
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	75bb      	strb	r3, [r7, #22]
            tempMatrix[i][start] = tempMatrix[i][end];
 8000fa8:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8000fac:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8000fb0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000fb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000fb8:	0080      	lsls	r0, r0, #2
 8000fba:	3030      	adds	r0, #48	@ 0x30
 8000fbc:	4438      	add	r0, r7
 8000fbe:	4401      	add	r1, r0
 8000fc0:	392c      	subs	r1, #44	@ 0x2c
 8000fc2:	7809      	ldrb	r1, [r1, #0]
 8000fc4:	0092      	lsls	r2, r2, #2
 8000fc6:	3230      	adds	r2, #48	@ 0x30
 8000fc8:	443a      	add	r2, r7
 8000fca:	4413      	add	r3, r2
 8000fcc:	3b2c      	subs	r3, #44	@ 0x2c
 8000fce:	460a      	mov	r2, r1
 8000fd0:	701a      	strb	r2, [r3, #0]
            tempMatrix[i][end] = temp;
 8000fd2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000fd6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	3230      	adds	r2, #48	@ 0x30
 8000fde:	443a      	add	r2, r7
 8000fe0:	4413      	add	r3, r2
 8000fe2:	3b2c      	subs	r3, #44	@ 0x2c
 8000fe4:	7dba      	ldrb	r2, [r7, #22]
 8000fe6:	701a      	strb	r2, [r3, #0]
            start++;
 8000fe8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000fec:	3301      	adds	r3, #1
 8000fee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            end--;
 8000ff2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        while (start < end) {
 8000ffc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001000:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001004:	429a      	cmp	r2, r3
 8001006:	d3c4      	bcc.n	8000f92 <RotateFallingBlock+0x1b2>
    for (uint8_t i = 0; i < BLOCK_SIZE; i++) {
 8001008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800100c:	3301      	adds	r3, #1
 800100e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001012:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001016:	2b03      	cmp	r3, #3
 8001018:	d9b4      	bls.n	8000f84 <RotateFallingBlock+0x1a4>
        }
    }

    // Shift the tempMatrix left by the calculated amount for every row
    uint8_t shiftAmount = (fallingBlock.width < fallingBlock.height) ? 1 : 2;
 800101a:	4b2e      	ldr	r3, [pc, #184]	@ (80010d4 <RotateFallingBlock+0x2f4>)
 800101c:	7c1a      	ldrb	r2, [r3, #16]
 800101e:	4b2d      	ldr	r3, [pc, #180]	@ (80010d4 <RotateFallingBlock+0x2f4>)
 8001020:	7c5b      	ldrb	r3, [r3, #17]
 8001022:	429a      	cmp	r2, r3
 8001024:	d201      	bcs.n	800102a <RotateFallingBlock+0x24a>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <RotateFallingBlock+0x24c>
 800102a:	2302      	movs	r3, #2
 800102c:	767b      	strb	r3, [r7, #25]
    for (uint8_t i = 0; i < BLOCK_SIZE; i++) {
 800102e:	2300      	movs	r3, #0
 8001030:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001034:	e042      	b.n	80010bc <RotateFallingBlock+0x2dc>
        for (uint8_t j = shiftAmount; j < BLOCK_SIZE; j++)
 8001036:	7e7b      	ldrb	r3, [r7, #25]
 8001038:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800103c:	e01b      	b.n	8001076 <RotateFallingBlock+0x296>
            tempMatrix[i][j - shiftAmount] = tempMatrix[i][j];
 800103e:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8001042:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8001046:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800104a:	f897 4023 	ldrb.w	r4, [r7, #35]	@ 0x23
 800104e:	7e7b      	ldrb	r3, [r7, #25]
 8001050:	1ae3      	subs	r3, r4, r3
 8001052:	0080      	lsls	r0, r0, #2
 8001054:	3030      	adds	r0, #48	@ 0x30
 8001056:	4438      	add	r0, r7
 8001058:	4401      	add	r1, r0
 800105a:	392c      	subs	r1, #44	@ 0x2c
 800105c:	7809      	ldrb	r1, [r1, #0]
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	3230      	adds	r2, #48	@ 0x30
 8001062:	443a      	add	r2, r7
 8001064:	4413      	add	r3, r2
 8001066:	3b2c      	subs	r3, #44	@ 0x2c
 8001068:	460a      	mov	r2, r1
 800106a:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = shiftAmount; j < BLOCK_SIZE; j++)
 800106c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001070:	3301      	adds	r3, #1
 8001072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001076:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800107a:	2b03      	cmp	r3, #3
 800107c:	d9df      	bls.n	800103e <RotateFallingBlock+0x25e>
        for (uint8_t j = BLOCK_SIZE - shiftAmount; j < BLOCK_SIZE; j++)
 800107e:	7e7b      	ldrb	r3, [r7, #25]
 8001080:	f1c3 0304 	rsb	r3, r3, #4
 8001084:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001088:	e00f      	b.n	80010aa <RotateFallingBlock+0x2ca>
            tempMatrix[i][j] = 0;
 800108a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800108e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	3230      	adds	r2, #48	@ 0x30
 8001096:	443a      	add	r2, r7
 8001098:	4413      	add	r3, r2
 800109a:	3b2c      	subs	r3, #44	@ 0x2c
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = BLOCK_SIZE - shiftAmount; j < BLOCK_SIZE; j++)
 80010a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80010a4:	3301      	adds	r3, #1
 80010a6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80010aa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d9eb      	bls.n	800108a <RotateFallingBlock+0x2aa>
    for (uint8_t i = 0; i < BLOCK_SIZE; i++) {
 80010b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80010b6:	3301      	adds	r3, #1
 80010b8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80010bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d9b8      	bls.n	8001036 <RotateFallingBlock+0x256>
    }

    // Check for boundary collisions or overlaps
    for (uint8_t y = 0; y < BLOCK_SIZE; y++) {
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80010ca:	e03f      	b.n	800114c <RotateFallingBlock+0x36c>
        for (uint8_t x = 0; x < BLOCK_SIZE; x++) {
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 3020 	strb.w	r3, [r7, #32]
 80010d2:	e032      	b.n	800113a <RotateFallingBlock+0x35a>
 80010d4:	20000304 	.word	0x20000304
 80010d8:	2000023c 	.word	0x2000023c
            if (tempMatrix[y][x] == 1) {
 80010dc:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80010e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	3230      	adds	r2, #48	@ 0x30
 80010e8:	443a      	add	r2, r7
 80010ea:	4413      	add	r3, r2
 80010ec:	3b2c      	subs	r3, #44	@ 0x2c
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d11d      	bne.n	8001130 <RotateFallingBlock+0x350>
                uint8_t gridX = topLeftX + x;
 80010f4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80010f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010fc:	4413      	add	r3, r2
 80010fe:	763b      	strb	r3, [r7, #24]
                uint8_t gridY = topLeftY + y;
 8001100:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001104:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001108:	4413      	add	r3, r2
 800110a:	75fb      	strb	r3, [r7, #23]

                if (gridX >= GRID_WIDTH || gridY >= GRID_HEIGHT || blockMatrix[gridY][gridX] != 0x0000) {
 800110c:	7e3b      	ldrb	r3, [r7, #24]
 800110e:	2b09      	cmp	r3, #9
 8001110:	d87d      	bhi.n	800120e <RotateFallingBlock+0x42e>
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	2b13      	cmp	r3, #19
 8001116:	d87a      	bhi.n	800120e <RotateFallingBlock+0x42e>
 8001118:	7dfa      	ldrb	r2, [r7, #23]
 800111a:	7e39      	ldrb	r1, [r7, #24]
 800111c:	483e      	ldr	r0, [pc, #248]	@ (8001218 <RotateFallingBlock+0x438>)
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	440b      	add	r3, r1
 8001128:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d16e      	bne.n	800120e <RotateFallingBlock+0x42e>
        for (uint8_t x = 0; x < BLOCK_SIZE; x++) {
 8001130:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001134:	3301      	adds	r3, #1
 8001136:	f887 3020 	strb.w	r3, [r7, #32]
 800113a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800113e:	2b03      	cmp	r3, #3
 8001140:	d9cc      	bls.n	80010dc <RotateFallingBlock+0x2fc>
    for (uint8_t y = 0; y < BLOCK_SIZE; y++) {
 8001142:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001146:	3301      	adds	r3, #1
 8001148:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800114c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001150:	2b03      	cmp	r3, #3
 8001152:	d9bb      	bls.n	80010cc <RotateFallingBlock+0x2ec>
            }
        }
    }

    // Clear the current falling block from the grid
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 8001154:	2300      	movs	r3, #0
 8001156:	77fb      	strb	r3, [r7, #31]
 8001158:	e022      	b.n	80011a0 <RotateFallingBlock+0x3c0>
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 800115a:	2300      	movs	r3, #0
 800115c:	77bb      	strb	r3, [r7, #30]
 800115e:	e019      	b.n	8001194 <RotateFallingBlock+0x3b4>
            if (fallingBlockMatrix[y][x] == 1) {
 8001160:	7ffa      	ldrb	r2, [r7, #31]
 8001162:	7fb9      	ldrb	r1, [r7, #30]
 8001164:	482d      	ldr	r0, [pc, #180]	@ (800121c <RotateFallingBlock+0x43c>)
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4403      	add	r3, r0
 8001170:	440b      	add	r3, r1
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d10a      	bne.n	800118e <RotateFallingBlock+0x3ae>
                fallingBlockMatrix[y][x] = 0;
 8001178:	7ffa      	ldrb	r2, [r7, #31]
 800117a:	7fb9      	ldrb	r1, [r7, #30]
 800117c:	4827      	ldr	r0, [pc, #156]	@ (800121c <RotateFallingBlock+0x43c>)
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4403      	add	r3, r0
 8001188:	440b      	add	r3, r1
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 800118e:	7fbb      	ldrb	r3, [r7, #30]
 8001190:	3301      	adds	r3, #1
 8001192:	77bb      	strb	r3, [r7, #30]
 8001194:	7fbb      	ldrb	r3, [r7, #30]
 8001196:	2b09      	cmp	r3, #9
 8001198:	d9e2      	bls.n	8001160 <RotateFallingBlock+0x380>
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 800119a:	7ffb      	ldrb	r3, [r7, #31]
 800119c:	3301      	adds	r3, #1
 800119e:	77fb      	strb	r3, [r7, #31]
 80011a0:	7ffb      	ldrb	r3, [r7, #31]
 80011a2:	2b13      	cmp	r3, #19
 80011a4:	d9d9      	bls.n	800115a <RotateFallingBlock+0x37a>
            }
        }
    }

    // Apply rotated block back to the falling block matrix
    for (uint8_t y = 0; y < BLOCK_SIZE; y++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	777b      	strb	r3, [r7, #29]
 80011aa:	e026      	b.n	80011fa <RotateFallingBlock+0x41a>
        for (uint8_t x = 0; x < BLOCK_SIZE; x++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	773b      	strb	r3, [r7, #28]
 80011b0:	e01d      	b.n	80011ee <RotateFallingBlock+0x40e>
            if (tempMatrix[y][x] == 1) {
 80011b2:	7f7a      	ldrb	r2, [r7, #29]
 80011b4:	7f3b      	ldrb	r3, [r7, #28]
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	3230      	adds	r2, #48	@ 0x30
 80011ba:	443a      	add	r2, r7
 80011bc:	4413      	add	r3, r2
 80011be:	3b2c      	subs	r3, #44	@ 0x2c
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d110      	bne.n	80011e8 <RotateFallingBlock+0x408>
                fallingBlockMatrix[topLeftY + y][topLeftX + x] = 1;
 80011c6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80011ca:	7f7b      	ldrb	r3, [r7, #29]
 80011cc:	441a      	add	r2, r3
 80011ce:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80011d2:	7f3b      	ldrb	r3, [r7, #28]
 80011d4:	4419      	add	r1, r3
 80011d6:	4811      	ldr	r0, [pc, #68]	@ (800121c <RotateFallingBlock+0x43c>)
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4403      	add	r3, r0
 80011e2:	440b      	add	r3, r1
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 0; x < BLOCK_SIZE; x++) {
 80011e8:	7f3b      	ldrb	r3, [r7, #28]
 80011ea:	3301      	adds	r3, #1
 80011ec:	773b      	strb	r3, [r7, #28]
 80011ee:	7f3b      	ldrb	r3, [r7, #28]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d9de      	bls.n	80011b2 <RotateFallingBlock+0x3d2>
    for (uint8_t y = 0; y < BLOCK_SIZE; y++) {
 80011f4:	7f7b      	ldrb	r3, [r7, #29]
 80011f6:	3301      	adds	r3, #1
 80011f8:	777b      	strb	r3, [r7, #29]
 80011fa:	7f7b      	ldrb	r3, [r7, #29]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d9d5      	bls.n	80011ac <RotateFallingBlock+0x3cc>
            }
        }
    }

    // Update the falling block's dimensions for multiple rotation purposes
    fallingBlock.width = blockHeight;
 8001200:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <RotateFallingBlock+0x440>)
 8001202:	7ebb      	ldrb	r3, [r7, #26]
 8001204:	7413      	strb	r3, [r2, #16]
    fallingBlock.height = blockWidth;
 8001206:	4a06      	ldr	r2, [pc, #24]	@ (8001220 <RotateFallingBlock+0x440>)
 8001208:	7efb      	ldrb	r3, [r7, #27]
 800120a:	7453      	strb	r3, [r2, #17]
 800120c:	e000      	b.n	8001210 <RotateFallingBlock+0x430>
                    return;
 800120e:	bf00      	nop
}
 8001210:	3734      	adds	r7, #52	@ 0x34
 8001212:	46bd      	mov	sp, r7
 8001214:	bcb0      	pop	{r4, r5, r7}
 8001216:	4770      	bx	lr
 8001218:	200000ac 	.word	0x200000ac
 800121c:	2000023c 	.word	0x2000023c
 8001220:	20000304 	.word	0x20000304

08001224 <ShuffleBag>:

void ShuffleBag(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
    // Fill the bag with block indices
    for (uint8_t i = 0; i < BAG_SIZE; i++) {
 800122a:	2300      	movs	r3, #0
 800122c:	71fb      	strb	r3, [r7, #7]
 800122e:	e006      	b.n	800123e <ShuffleBag+0x1a>
        blockBag[i] = i;
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	491a      	ldr	r1, [pc, #104]	@ (800129c <ShuffleBag+0x78>)
 8001234:	79fa      	ldrb	r2, [r7, #7]
 8001236:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < BAG_SIZE; i++) {
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	3301      	adds	r3, #1
 800123c:	71fb      	strb	r3, [r7, #7]
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b06      	cmp	r3, #6
 8001242:	d9f5      	bls.n	8001230 <ShuffleBag+0xc>
    }

    // Shuffle the bag using Fisher-Yates algorithm
    for (uint8_t i = BAG_SIZE - 1; i > 0; i--) {
 8001244:	2306      	movs	r3, #6
 8001246:	71bb      	strb	r3, [r7, #6]
 8001248:	e020      	b.n	800128c <ShuffleBag+0x68>
        uint32_t rngValue = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
        HAL_RNG_GenerateRandomNumber(&hrng, &rngValue);
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4813      	ldr	r0, [pc, #76]	@ (80012a0 <ShuffleBag+0x7c>)
 8001254:	f005 fcb6 	bl	8006bc4 <HAL_RNG_GenerateRandomNumber>
        uint8_t j = rngValue % (i + 1);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	79ba      	ldrb	r2, [r7, #6]
 800125c:	3201      	adds	r2, #1
 800125e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001262:	fb01 f202 	mul.w	r2, r1, r2
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	717b      	strb	r3, [r7, #5]
        uint8_t temp = blockBag[i];
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	4a0b      	ldr	r2, [pc, #44]	@ (800129c <ShuffleBag+0x78>)
 800126e:	5cd3      	ldrb	r3, [r2, r3]
 8001270:	713b      	strb	r3, [r7, #4]
        blockBag[i] = blockBag[j];
 8001272:	797a      	ldrb	r2, [r7, #5]
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	4909      	ldr	r1, [pc, #36]	@ (800129c <ShuffleBag+0x78>)
 8001278:	5c89      	ldrb	r1, [r1, r2]
 800127a:	4a08      	ldr	r2, [pc, #32]	@ (800129c <ShuffleBag+0x78>)
 800127c:	54d1      	strb	r1, [r2, r3]
        blockBag[j] = temp;
 800127e:	797b      	ldrb	r3, [r7, #5]
 8001280:	4906      	ldr	r1, [pc, #24]	@ (800129c <ShuffleBag+0x78>)
 8001282:	793a      	ldrb	r2, [r7, #4]
 8001284:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = BAG_SIZE - 1; i > 0; i--) {
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	3b01      	subs	r3, #1
 800128a:	71bb      	strb	r3, [r7, #6]
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1db      	bne.n	800124a <ShuffleBag+0x26>
    }
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000324 	.word	0x20000324
 80012a0:	20025d60 	.word	0x20025d60

080012a4 <FormatTimerString>:

void FormatTimerString(char *timerString, uint32_t minutes, uint32_t seconds) {
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
    timerString[0] = '0' + (minutes / 10);  // First digit of minutes
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4a21      	ldr	r2, [pc, #132]	@ (8001338 <FormatTimerString+0x94>)
 80012b4:	fba2 2303 	umull	r2, r3, r2, r3
 80012b8:	08db      	lsrs	r3, r3, #3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	3330      	adds	r3, #48	@ 0x30
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	701a      	strb	r2, [r3, #0]
    timerString[1] = '0' + (minutes % 10);  // Second digit of minutes
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <FormatTimerString+0x94>)
 80012c8:	fba3 2301 	umull	r2, r3, r3, r1
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	1aca      	subs	r2, r1, r3
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3301      	adds	r3, #1
 80012de:	3230      	adds	r2, #48	@ 0x30
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]
    timerString[2] = ':';                   // Colon separator
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3302      	adds	r3, #2
 80012e8:	223a      	movs	r2, #58	@ 0x3a
 80012ea:	701a      	strb	r2, [r3, #0]
    timerString[3] = '0' + (seconds / 10);  // First digit of seconds
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a12      	ldr	r2, [pc, #72]	@ (8001338 <FormatTimerString+0x94>)
 80012f0:	fba2 2303 	umull	r2, r3, r2, r3
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3303      	adds	r3, #3
 80012fc:	3230      	adds	r2, #48	@ 0x30
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	701a      	strb	r2, [r3, #0]
    timerString[4] = '0' + (seconds % 10);  // Second digit of seconds
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <FormatTimerString+0x94>)
 8001306:	fba3 2301 	umull	r2, r3, r3, r1
 800130a:	08da      	lsrs	r2, r3, #3
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	1aca      	subs	r2, r1, r3
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3304      	adds	r3, #4
 800131c:	3230      	adds	r2, #48	@ 0x30
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	701a      	strb	r2, [r3, #0]
    timerString[5] = '\0';                  // Null terminator
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	3305      	adds	r3, #5
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	cccccccd 	.word	0xcccccccd

0800133c <DisplayTimer>:

// Function to display the timer on the screen
void DisplayTimer(void) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
    char timerString[TIMER_NUMCHARS];

    // Format elapsedTime into a string (e.g., "00:00")
    uint32_t minutes = elapsedTime / 60;
 8001342:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <DisplayTimer+0x88>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4a20      	ldr	r2, [pc, #128]	@ (80013c8 <DisplayTimer+0x8c>)
 8001348:	fba2 2303 	umull	r2, r3, r2, r3
 800134c:	095b      	lsrs	r3, r3, #5
 800134e:	b2db      	uxtb	r3, r3
 8001350:	617b      	str	r3, [r7, #20]
    uint32_t seconds = elapsedTime % 60;
 8001352:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <DisplayTimer+0x88>)
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <DisplayTimer+0x8c>)
 8001358:	fba3 1302 	umull	r1, r3, r3, r2
 800135c:	0959      	lsrs	r1, r3, #5
 800135e:	460b      	mov	r3, r1
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	1a5b      	subs	r3, r3, r1
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	613b      	str	r3, [r7, #16]
    FormatTimerString(timerString, minutes, seconds);
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	6979      	ldr	r1, [r7, #20]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff96 	bl	80012a4 <FormatTimerString>

    // Calculate position to render the timer (top-right)
    uint16_t timerX = LCD_PIXEL_WIDTH - (CHAR_WIDTH * (TIMER_NUMCHARS-1)); // Adjust based on character width (5 chars)
 8001378:	23a0      	movs	r3, #160	@ 0xa0
 800137a:	81fb      	strh	r3, [r7, #14]
    uint16_t timerY = Y_OFF;
 800137c:	2305      	movs	r3, #5
 800137e:	81bb      	strh	r3, [r7, #12]

    // Display the timer text in white
    LCD_SetTextColor(LCD_COLOR_WHITE);
 8001380:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001384:	f000 fc82 	bl	8001c8c <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8001388:	4810      	ldr	r0, [pc, #64]	@ (80013cc <DisplayTimer+0x90>)
 800138a:	f000 fc8f 	bl	8001cac <LCD_SetFont>
    uint16_t currentX = timerX; // Track position for each character
 800138e:	89fb      	ldrh	r3, [r7, #14]
 8001390:	83fb      	strh	r3, [r7, #30]
    for (const char *p = timerString; *p != '\0'; p++) {
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	e00c      	b.n	80013b2 <DisplayTimer+0x76>
        LCD_DisplayChar(currentX, timerY, *p);
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	89b9      	ldrh	r1, [r7, #12]
 800139e:	8bfb      	ldrh	r3, [r7, #30]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fd01 	bl	8001da8 <LCD_DisplayChar>
        currentX += CHAR_WIDTH; // Advance by character width
 80013a6:	8bfb      	ldrh	r3, [r7, #30]
 80013a8:	3310      	adds	r3, #16
 80013aa:	83fb      	strh	r3, [r7, #30]
    for (const char *p = timerString; *p != '\0'; p++) {
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	3301      	adds	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1ee      	bne.n	8001398 <DisplayTimer+0x5c>
    }
}
 80013ba:	bf00      	nop
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000031c 	.word	0x2000031c
 80013c8:	88888889 	.word	0x88888889
 80013cc:	20000004 	.word	0x20000004

080013d0 <ClearFullRows>:

void ClearFullRows(void) {
 80013d0:	b4b0      	push	{r4, r5, r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
    uint8_t clearedRows = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	71fb      	strb	r3, [r7, #7]

    for (int8_t y = GRID_HEIGHT - 1; y >= 0; y--) {
 80013da:	2313      	movs	r3, #19
 80013dc:	71bb      	strb	r3, [r7, #6]
 80013de:	e07d      	b.n	80014dc <ClearFullRows+0x10c>
        bool isFullRow = true;
 80013e0:	2301      	movs	r3, #1
 80013e2:	717b      	strb	r3, [r7, #5]

        // Check if the row is full
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 80013e4:	2300      	movs	r3, #0
 80013e6:	713b      	strb	r3, [r7, #4]
 80013e8:	e012      	b.n	8001410 <ClearFullRows+0x40>
            if (blockMatrix[y][x] == 0x0000) {
 80013ea:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80013ee:	7939      	ldrb	r1, [r7, #4]
 80013f0:	4855      	ldr	r0, [pc, #340]	@ (8001548 <ClearFullRows+0x178>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	440b      	add	r3, r1
 80013fc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <ClearFullRows+0x3a>
                isFullRow = false;
 8001404:	2300      	movs	r3, #0
 8001406:	717b      	strb	r3, [r7, #5]
                break;
 8001408:	e005      	b.n	8001416 <ClearFullRows+0x46>
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 800140a:	793b      	ldrb	r3, [r7, #4]
 800140c:	3301      	adds	r3, #1
 800140e:	713b      	strb	r3, [r7, #4]
 8001410:	793b      	ldrb	r3, [r7, #4]
 8001412:	2b09      	cmp	r3, #9
 8001414:	d9e9      	bls.n	80013ea <ClearFullRows+0x1a>
            }
        }

        if (isFullRow) {
 8001416:	797b      	ldrb	r3, [r7, #5]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d059      	beq.n	80014d0 <ClearFullRows+0x100>
            clearedRows++;
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	3301      	adds	r3, #1
 8001420:	71fb      	strb	r3, [r7, #7]

            // Clear the row
            for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 8001422:	2300      	movs	r3, #0
 8001424:	70fb      	strb	r3, [r7, #3]
 8001426:	e00e      	b.n	8001446 <ClearFullRows+0x76>
                blockMatrix[y][x] = 0x0000;
 8001428:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800142c:	78f9      	ldrb	r1, [r7, #3]
 800142e:	4846      	ldr	r0, [pc, #280]	@ (8001548 <ClearFullRows+0x178>)
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	440b      	add	r3, r1
 800143a:	2200      	movs	r2, #0
 800143c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
            for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	3301      	adds	r3, #1
 8001444:	70fb      	strb	r3, [r7, #3]
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	2b09      	cmp	r3, #9
 800144a:	d9ed      	bls.n	8001428 <ClearFullRows+0x58>
            }

            // Shift rows above down
            for (int8_t row = y; row > 0; row--) {
 800144c:	79bb      	ldrb	r3, [r7, #6]
 800144e:	70bb      	strb	r3, [r7, #2]
 8001450:	e026      	b.n	80014a0 <ClearFullRows+0xd0>
                for (uint8_t col = 0; col < GRID_WIDTH; col++) {
 8001452:	2300      	movs	r3, #0
 8001454:	707b      	strb	r3, [r7, #1]
 8001456:	e01a      	b.n	800148e <ClearFullRows+0xbe>
                    blockMatrix[row][col] = blockMatrix[row - 1][col];
 8001458:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800145c:	1e59      	subs	r1, r3, #1
 800145e:	787c      	ldrb	r4, [r7, #1]
 8001460:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8001464:	7878      	ldrb	r0, [r7, #1]
 8001466:	4d38      	ldr	r5, [pc, #224]	@ (8001548 <ClearFullRows+0x178>)
 8001468:	460b      	mov	r3, r1
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4423      	add	r3, r4
 8001472:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 8001476:	4934      	ldr	r1, [pc, #208]	@ (8001548 <ClearFullRows+0x178>)
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4403      	add	r3, r0
 8001482:	4622      	mov	r2, r4
 8001484:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (uint8_t col = 0; col < GRID_WIDTH; col++) {
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	3301      	adds	r3, #1
 800148c:	707b      	strb	r3, [r7, #1]
 800148e:	787b      	ldrb	r3, [r7, #1]
 8001490:	2b09      	cmp	r3, #9
 8001492:	d9e1      	bls.n	8001458 <ClearFullRows+0x88>
            for (int8_t row = y; row > 0; row--) {
 8001494:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	3b01      	subs	r3, #1
 800149c:	b2db      	uxtb	r3, r3
 800149e:	70bb      	strb	r3, [r7, #2]
 80014a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	dcd4      	bgt.n	8001452 <ClearFullRows+0x82>
                }
            }

            // Clear the top row (after shift)
            for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	703b      	strb	r3, [r7, #0]
 80014ac:	e007      	b.n	80014be <ClearFullRows+0xee>
                blockMatrix[0][x] = 0x0000;
 80014ae:	783b      	ldrb	r3, [r7, #0]
 80014b0:	4a25      	ldr	r2, [pc, #148]	@ (8001548 <ClearFullRows+0x178>)
 80014b2:	2100      	movs	r1, #0
 80014b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 80014b8:	783b      	ldrb	r3, [r7, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	703b      	strb	r3, [r7, #0]
 80014be:	783b      	ldrb	r3, [r7, #0]
 80014c0:	2b09      	cmp	r3, #9
 80014c2:	d9f4      	bls.n	80014ae <ClearFullRows+0xde>
            }

            // Adjust row index to recheck the current row after shifting
            y++;
 80014c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	71bb      	strb	r3, [r7, #6]
    for (int8_t y = GRID_HEIGHT - 1; y >= 0; y--) {
 80014d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	3b01      	subs	r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	71bb      	strb	r3, [r7, #6]
 80014dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f6bf af7d 	bge.w	80013e0 <ClearFullRows+0x10>
        }
    }

    // Update scoring based on the number of cleared rows
    switch (clearedRows) {
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d826      	bhi.n	800153c <ClearFullRows+0x16c>
 80014ee:	a201      	add	r2, pc, #4	@ (adr r2, 80014f4 <ClearFullRows+0x124>)
 80014f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f4:	08001505 	.word	0x08001505
 80014f8:	08001513 	.word	0x08001513
 80014fc:	08001521 	.word	0x08001521
 8001500:	0800152f 	.word	0x0800152f
        case 1:
            singles++;
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <ClearFullRows+0x17c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <ClearFullRows+0x17c>)
 800150e:	701a      	strb	r2, [r3, #0]
            break;
 8001510:	e015      	b.n	800153e <ClearFullRows+0x16e>
        case 2:
            doubles++;
 8001512:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <ClearFullRows+0x180>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <ClearFullRows+0x180>)
 800151c:	701a      	strb	r2, [r3, #0]
            break;
 800151e:	e00e      	b.n	800153e <ClearFullRows+0x16e>
        case 3:
            triples++;
 8001520:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <ClearFullRows+0x184>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <ClearFullRows+0x184>)
 800152a:	701a      	strb	r2, [r3, #0]
            break;
 800152c:	e007      	b.n	800153e <ClearFullRows+0x16e>
        case 4:
            tetri++;
 800152e:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <ClearFullRows+0x188>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <ClearFullRows+0x188>)
 8001538:	701a      	strb	r2, [r3, #0]
            break;
 800153a:	e000      	b.n	800153e <ClearFullRows+0x16e>
        default:
            break;
 800153c:	bf00      	nop
    }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bcb0      	pop	{r4, r5, r7}
 8001546:	4770      	bx	lr
 8001548:	200000ac 	.word	0x200000ac
 800154c:	2000031d 	.word	0x2000031d
 8001550:	2000031e 	.word	0x2000031e
 8001554:	2000031f 	.word	0x2000031f
 8001558:	20000320 	.word	0x20000320

0800155c <SpawnFallingBlock>:


void SpawnFallingBlock(uint8_t blockIndex) {
 800155c:	b4b0      	push	{r4, r5, r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
    // Clear the current falling block matrix
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	e016      	b.n	800159a <SpawnFallingBlock+0x3e>
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 800156c:	2300      	movs	r3, #0
 800156e:	73bb      	strb	r3, [r7, #14]
 8001570:	e00d      	b.n	800158e <SpawnFallingBlock+0x32>
            fallingBlockMatrix[y][x] = 0;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	7bb9      	ldrb	r1, [r7, #14]
 8001576:	4833      	ldr	r0, [pc, #204]	@ (8001644 <SpawnFallingBlock+0xe8>)
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4403      	add	r3, r0
 8001582:	440b      	add	r3, r1
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 8001588:	7bbb      	ldrb	r3, [r7, #14]
 800158a:	3301      	adds	r3, #1
 800158c:	73bb      	strb	r3, [r7, #14]
 800158e:	7bbb      	ldrb	r3, [r7, #14]
 8001590:	2b09      	cmp	r3, #9
 8001592:	d9ee      	bls.n	8001572 <SpawnFallingBlock+0x16>
    for (uint8_t y = 0; y < GRID_HEIGHT; y++) {
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	3301      	adds	r3, #1
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	2b13      	cmp	r3, #19
 800159e:	d9e5      	bls.n	800156c <SpawnFallingBlock+0x10>
        }
    }

    fallingBlock = tetrisBlocks[blockIndex];
 80015a0:	79fa      	ldrb	r2, [r7, #7]
 80015a2:	4829      	ldr	r0, [pc, #164]	@ (8001648 <SpawnFallingBlock+0xec>)
 80015a4:	4929      	ldr	r1, [pc, #164]	@ (800164c <SpawnFallingBlock+0xf0>)
 80015a6:	4613      	mov	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4413      	add	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	440b      	add	r3, r1
 80015b0:	4604      	mov	r4, r0
 80015b2:	461d      	mov	r5, r3
 80015b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015bc:	e884 0003 	stmia.w	r4, {r0, r1}

    // Place the block at the top center of the grid
    uint8_t startX = (GRID_WIDTH - fallingBlock.width) / 2;
 80015c0:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <SpawnFallingBlock+0xec>)
 80015c2:	7c1b      	ldrb	r3, [r3, #16]
 80015c4:	f1c3 030a 	rsb	r3, r3, #10
 80015c8:	0fda      	lsrs	r2, r3, #31
 80015ca:	4413      	add	r3, r2
 80015cc:	105b      	asrs	r3, r3, #1
 80015ce:	72fb      	strb	r3, [r7, #11]
    for (uint8_t y = 0; y < fallingBlock.height; y++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	737b      	strb	r3, [r7, #13]
 80015d4:	e02a      	b.n	800162c <SpawnFallingBlock+0xd0>
        for (uint8_t x = 0; x < fallingBlock.width; x++) {
 80015d6:	2300      	movs	r3, #0
 80015d8:	733b      	strb	r3, [r7, #12]
 80015da:	e01f      	b.n	800161c <SpawnFallingBlock+0xc0>
            if (fallingBlock.shape[y][x]) {
 80015dc:	7b7a      	ldrb	r2, [r7, #13]
 80015de:	7b3b      	ldrb	r3, [r7, #12]
 80015e0:	4919      	ldr	r1, [pc, #100]	@ (8001648 <SpawnFallingBlock+0xec>)
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	440a      	add	r2, r1
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d013      	beq.n	8001616 <SpawnFallingBlock+0xba>
                fallingBlockMatrix[y][startX + x] = fallingBlock.shape[y][x];
 80015ee:	7b78      	ldrb	r0, [r7, #13]
 80015f0:	7b3b      	ldrb	r3, [r7, #12]
 80015f2:	7b7a      	ldrb	r2, [r7, #13]
 80015f4:	7afc      	ldrb	r4, [r7, #11]
 80015f6:	7b39      	ldrb	r1, [r7, #12]
 80015f8:	4421      	add	r1, r4
 80015fa:	4c13      	ldr	r4, [pc, #76]	@ (8001648 <SpawnFallingBlock+0xec>)
 80015fc:	0080      	lsls	r0, r0, #2
 80015fe:	4420      	add	r0, r4
 8001600:	4403      	add	r3, r0
 8001602:	781c      	ldrb	r4, [r3, #0]
 8001604:	480f      	ldr	r0, [pc, #60]	@ (8001644 <SpawnFallingBlock+0xe8>)
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4403      	add	r3, r0
 8001610:	440b      	add	r3, r1
 8001612:	4622      	mov	r2, r4
 8001614:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 0; x < fallingBlock.width; x++) {
 8001616:	7b3b      	ldrb	r3, [r7, #12]
 8001618:	3301      	adds	r3, #1
 800161a:	733b      	strb	r3, [r7, #12]
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <SpawnFallingBlock+0xec>)
 800161e:	7c1b      	ldrb	r3, [r3, #16]
 8001620:	7b3a      	ldrb	r2, [r7, #12]
 8001622:	429a      	cmp	r2, r3
 8001624:	d3da      	bcc.n	80015dc <SpawnFallingBlock+0x80>
    for (uint8_t y = 0; y < fallingBlock.height; y++) {
 8001626:	7b7b      	ldrb	r3, [r7, #13]
 8001628:	3301      	adds	r3, #1
 800162a:	737b      	strb	r3, [r7, #13]
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <SpawnFallingBlock+0xec>)
 800162e:	7c5b      	ldrb	r3, [r3, #17]
 8001630:	7b7a      	ldrb	r2, [r7, #13]
 8001632:	429a      	cmp	r2, r3
 8001634:	d3cf      	bcc.n	80015d6 <SpawnFallingBlock+0x7a>
            }
        }
    }
}
 8001636:	bf00      	nop
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bcb0      	pop	{r4, r5, r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2000023c 	.word	0x2000023c
 8001648:	20000304 	.word	0x20000304
 800164c:	08008fac 	.word	0x08008fac

08001650 <SpawnRandomBlock>:

void SpawnRandomBlock(void) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
    if (bagIndex >= BAG_SIZE) {
 8001656:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <SpawnRandomBlock+0x88>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b06      	cmp	r3, #6
 800165c:	d904      	bls.n	8001668 <SpawnRandomBlock+0x18>
        ShuffleBag();
 800165e:	f7ff fde1 	bl	8001224 <ShuffleBag>
        bagIndex = 0;
 8001662:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <SpawnRandomBlock+0x88>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
    }

    currentFallingBlock = nextBlock;
 8001668:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <SpawnRandomBlock+0x8c>)
 800166a:	781a      	ldrb	r2, [r3, #0]
 800166c:	4b1c      	ldr	r3, [pc, #112]	@ (80016e0 <SpawnRandomBlock+0x90>)
 800166e:	701a      	strb	r2, [r3, #0]
    nextBlock = blockBag[bagIndex++];
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <SpawnRandomBlock+0x88>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	b2d1      	uxtb	r1, r2
 8001678:	4a17      	ldr	r2, [pc, #92]	@ (80016d8 <SpawnRandomBlock+0x88>)
 800167a:	7011      	strb	r1, [r2, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <SpawnRandomBlock+0x94>)
 8001680:	5c9a      	ldrb	r2, [r3, r2]
 8001682:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <SpawnRandomBlock+0x8c>)
 8001684:	701a      	strb	r2, [r3, #0]

    if (nextBlock == lastBlock && BAG_SIZE > 1) {
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <SpawnRandomBlock+0x8c>)
 8001688:	781a      	ldrb	r2, [r3, #0]
 800168a:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <SpawnRandomBlock+0x98>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d114      	bne.n	80016bc <SpawnRandomBlock+0x6c>
        uint8_t swapIndex = (bagIndex < BAG_SIZE) ? bagIndex : 0;
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <SpawnRandomBlock+0x88>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b06      	cmp	r3, #6
 8001698:	d802      	bhi.n	80016a0 <SpawnRandomBlock+0x50>
 800169a:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <SpawnRandomBlock+0x88>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	e000      	b.n	80016a2 <SpawnRandomBlock+0x52>
 80016a0:	2300      	movs	r3, #0
 80016a2:	71fb      	strb	r3, [r7, #7]
        uint8_t temp = nextBlock;
 80016a4:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <SpawnRandomBlock+0x8c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	71bb      	strb	r3, [r7, #6]
        nextBlock = blockBag[swapIndex];
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4a0d      	ldr	r2, [pc, #52]	@ (80016e4 <SpawnRandomBlock+0x94>)
 80016ae:	5cd2      	ldrb	r2, [r2, r3]
 80016b0:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <SpawnRandomBlock+0x8c>)
 80016b2:	701a      	strb	r2, [r3, #0]
        blockBag[swapIndex] = temp;
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	490b      	ldr	r1, [pc, #44]	@ (80016e4 <SpawnRandomBlock+0x94>)
 80016b8:	79ba      	ldrb	r2, [r7, #6]
 80016ba:	54ca      	strb	r2, [r1, r3]
    }

    lastBlock = nextBlock;
 80016bc:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <SpawnRandomBlock+0x8c>)
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <SpawnRandomBlock+0x98>)
 80016c2:	701a      	strb	r2, [r3, #0]
    SpawnFallingBlock(currentFallingBlock);
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <SpawnRandomBlock+0x90>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff47 	bl	800155c <SpawnFallingBlock>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000032b 	.word	0x2000032b
 80016dc:	20000322 	.word	0x20000322
 80016e0:	20000321 	.word	0x20000321
 80016e4:	20000324 	.word	0x20000324
 80016e8:	20000000 	.word	0x20000000

080016ec <CheckGameOver>:

#include <stdio.h>
#include "GameOver.h"
#include "Game.h"

void CheckGameOver(void) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
    // Iterate through the top row of the matrix to check for any filled blocks
    for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	e011      	b.n	800171c <CheckGameOver+0x30>
        if (blockMatrix[0][x] != 0x0000) {
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <CheckGameOver+0x3c>)
 80016fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <CheckGameOver+0x2a>
            currentState = GAME_OVER;
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <CheckGameOver+0x40>)
 8001706:	2202      	movs	r2, #2
 8001708:	701a      	strb	r2, [r3, #0]
            HAL_TIM_Base_Stop_IT(&htim2);
 800170a:	4809      	ldr	r0, [pc, #36]	@ (8001730 <CheckGameOver+0x44>)
 800170c:	f005 fe50 	bl	80073b0 <HAL_TIM_Base_Stop_IT>
            RenderGameOverScreen();
 8001710:	f000 f810 	bl	8001734 <RenderGameOverScreen>
            return;
 8001714:	e005      	b.n	8001722 <CheckGameOver+0x36>
    for (uint8_t x = 0; x < GRID_WIDTH; x++) {
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	3301      	adds	r3, #1
 800171a:	71fb      	strb	r3, [r7, #7]
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2b09      	cmp	r3, #9
 8001720:	d9ea      	bls.n	80016f8 <CheckGameOver+0xc>
        }
    }
}
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200000ac 	.word	0x200000ac
 800172c:	200000a4 	.word	0x200000a4
 8001730:	20025dc8 	.word	0x20025dc8

08001734 <RenderGameOverScreen>:

void RenderGameOverScreen(void) {
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b08b      	sub	sp, #44	@ 0x2c
 8001738:	af00      	add	r7, sp, #0
    char buffer[32];

    LCD_Clear(0, LCD_COLOR_BLACK);
 800173a:	2100      	movs	r1, #0
 800173c:	2000      	movs	r0, #0
 800173e:	f000 fa83 	bl	8001c48 <LCD_Clear>
    LCD_SetTextColor(LCD_COLOR_WHITE);
 8001742:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001746:	f000 faa1 	bl	8001c8c <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 800174a:	483c      	ldr	r0, [pc, #240]	@ (800183c <RenderGameOverScreen+0x108>)
 800174c:	f000 faae 	bl	8001cac <LCD_SetFont>

    uint16_t textX = (LCD_PIXEL_WIDTH / 2) - (4 * 16);
 8001750:	2338      	movs	r3, #56	@ 0x38
 8001752:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t textY = LCD_PIXEL_HEIGHT / 6;
 8001754:	2335      	movs	r3, #53	@ 0x35
 8001756:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LCD_DisplayString(textX, textY, "GAME OVER");
 8001758:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800175a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800175c:	4a38      	ldr	r2, [pc, #224]	@ (8001840 <RenderGameOverScreen+0x10c>)
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fb44 	bl	8001dec <LCD_DisplayString>

    // Display elapsed time
    textX = STAT_X;
 8001764:	2314      	movs	r3, #20
 8001766:	84fb      	strh	r3, [r7, #38]	@ 0x26
    textY += BUFFER_Y;
 8001768:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800176a:	3328      	adds	r3, #40	@ 0x28
 800176c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    sprintf(buffer, "Time: %02u:%02u", elapsedTime / 60, elapsedTime % 60);
 800176e:	4b35      	ldr	r3, [pc, #212]	@ (8001844 <RenderGameOverScreen+0x110>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4a35      	ldr	r2, [pc, #212]	@ (8001848 <RenderGameOverScreen+0x114>)
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	095b      	lsrs	r3, r3, #5
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461c      	mov	r4, r3
 800177e:	4b31      	ldr	r3, [pc, #196]	@ (8001844 <RenderGameOverScreen+0x110>)
 8001780:	781a      	ldrb	r2, [r3, #0]
 8001782:	4b31      	ldr	r3, [pc, #196]	@ (8001848 <RenderGameOverScreen+0x114>)
 8001784:	fba3 1302 	umull	r1, r3, r3, r2
 8001788:	0959      	lsrs	r1, r3, #5
 800178a:	460b      	mov	r3, r1
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	1a5b      	subs	r3, r3, r1
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	1d38      	adds	r0, r7, #4
 8001798:	4622      	mov	r2, r4
 800179a:	492c      	ldr	r1, [pc, #176]	@ (800184c <RenderGameOverScreen+0x118>)
 800179c:	f006 fb1a 	bl	8007dd4 <siprintf>
    LCD_DisplayString(textX, textY, buffer);
 80017a0:	1d3a      	adds	r2, r7, #4
 80017a2:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80017a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 fb20 	bl	8001dec <LCD_DisplayString>

    // Display stats: singles, doubles, triples, tetrises
    textY += BUFFER_Y;
 80017ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80017ae:	3328      	adds	r3, #40	@ 0x28
 80017b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    sprintf(buffer, "Singles: %u", singles);
 80017b2:	4b27      	ldr	r3, [pc, #156]	@ (8001850 <RenderGameOverScreen+0x11c>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	4926      	ldr	r1, [pc, #152]	@ (8001854 <RenderGameOverScreen+0x120>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f006 fb09 	bl	8007dd4 <siprintf>
    LCD_DisplayString(textX, textY, buffer);
 80017c2:	1d3a      	adds	r2, r7, #4
 80017c4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80017c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fb0f 	bl	8001dec <LCD_DisplayString>

    textY += BUFFER_Y;
 80017ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80017d0:	3328      	adds	r3, #40	@ 0x28
 80017d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
    sprintf(buffer, "Doubles: %u", doubles);
 80017d4:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <RenderGameOverScreen+0x124>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	491f      	ldr	r1, [pc, #124]	@ (800185c <RenderGameOverScreen+0x128>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f006 faf8 	bl	8007dd4 <siprintf>
    LCD_DisplayString(textX, textY, buffer);
 80017e4:	1d3a      	adds	r2, r7, #4
 80017e6:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80017e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 fafe 	bl	8001dec <LCD_DisplayString>

    textY += BUFFER_Y;
 80017f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80017f2:	3328      	adds	r3, #40	@ 0x28
 80017f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    sprintf(buffer, "Triples: %u", triples);
 80017f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <RenderGameOverScreen+0x12c>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	4919      	ldr	r1, [pc, #100]	@ (8001864 <RenderGameOverScreen+0x130>)
 8001800:	4618      	mov	r0, r3
 8001802:	f006 fae7 	bl	8007dd4 <siprintf>
    LCD_DisplayString(textX, textY, buffer);
 8001806:	1d3a      	adds	r2, r7, #4
 8001808:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800180a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800180c:	4618      	mov	r0, r3
 800180e:	f000 faed 	bl	8001dec <LCD_DisplayString>

    textY += BUFFER_Y;
 8001812:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001814:	3328      	adds	r3, #40	@ 0x28
 8001816:	84bb      	strh	r3, [r7, #36]	@ 0x24
    sprintf(buffer, "Tetrises: %u", tetri);
 8001818:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <RenderGameOverScreen+0x134>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4912      	ldr	r1, [pc, #72]	@ (800186c <RenderGameOverScreen+0x138>)
 8001822:	4618      	mov	r0, r3
 8001824:	f006 fad6 	bl	8007dd4 <siprintf>
    LCD_DisplayString(textX, textY, buffer);
 8001828:	1d3a      	adds	r2, r7, #4
 800182a:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800182c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800182e:	4618      	mov	r0, r3
 8001830:	f000 fadc 	bl	8001dec <LCD_DisplayString>
}
 8001834:	bf00      	nop
 8001836:	372c      	adds	r7, #44	@ 0x2c
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}
 800183c:	20000004 	.word	0x20000004
 8001840:	08008f5c 	.word	0x08008f5c
 8001844:	2000031c 	.word	0x2000031c
 8001848:	88888889 	.word	0x88888889
 800184c:	08008f68 	.word	0x08008f68
 8001850:	2000031d 	.word	0x2000031d
 8001854:	08008f78 	.word	0x08008f78
 8001858:	2000031e 	.word	0x2000031e
 800185c:	08008f84 	.word	0x08008f84
 8001860:	2000031f 	.word	0x2000031f
 8001864:	08008f90 	.word	0x08008f90
 8001868:	20000320 	.word	0x20000320
 800186c:	08008f9c 	.word	0x08008f9c

08001870 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	@ 0x30
 8001874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	4b5a      	ldr	r3, [pc, #360]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	4a59      	ldr	r2, [pc, #356]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 8001880:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001884:	6453      	str	r3, [r2, #68]	@ 0x44
 8001886:	4b57      	ldr	r3, [pc, #348]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	4b53      	ldr	r3, [pc, #332]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	4a52      	ldr	r2, [pc, #328]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a2:	4b50      	ldr	r3, [pc, #320]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b4c      	ldr	r3, [pc, #304]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a4b      	ldr	r2, [pc, #300]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b49      	ldr	r3, [pc, #292]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b45      	ldr	r3, [pc, #276]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a44      	ldr	r2, [pc, #272]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b42      	ldr	r3, [pc, #264]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	4b3e      	ldr	r3, [pc, #248]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a3d      	ldr	r2, [pc, #244]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b3b      	ldr	r3, [pc, #236]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b37      	ldr	r3, [pc, #220]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a36      	ldr	r2, [pc, #216]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 800190c:	f043 0320 	orr.w	r3, r3, #32
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b34      	ldr	r3, [pc, #208]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0320 	and.w	r3, r3, #32
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	4b30      	ldr	r3, [pc, #192]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	4a2f      	ldr	r2, [pc, #188]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 8001928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800192c:	6313      	str	r3, [r2, #48]	@ 0x30
 800192e:	4b2d      	ldr	r3, [pc, #180]	@ (80019e4 <LCD_GPIO_Init+0x174>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800193a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800193e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001948:	2302      	movs	r3, #2
 800194a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800194c:	230e      	movs	r3, #14
 800194e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	4824      	ldr	r0, [pc, #144]	@ (80019e8 <LCD_GPIO_Init+0x178>)
 8001958:	f002 fc96 	bl	8004288 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800195c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001960:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	4619      	mov	r1, r3
 8001968:	4820      	ldr	r0, [pc, #128]	@ (80019ec <LCD_GPIO_Init+0x17c>)
 800196a:	f002 fc8d 	bl	8004288 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800196e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	4619      	mov	r1, r3
 800197a:	481d      	ldr	r0, [pc, #116]	@ (80019f0 <LCD_GPIO_Init+0x180>)
 800197c:	f002 fc84 	bl	8004288 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001980:	2348      	movs	r3, #72	@ 0x48
 8001982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	481a      	ldr	r0, [pc, #104]	@ (80019f4 <LCD_GPIO_Init+0x184>)
 800198c:	f002 fc7c 	bl	8004288 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001990:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	4816      	ldr	r0, [pc, #88]	@ (80019f8 <LCD_GPIO_Init+0x188>)
 800199e:	f002 fc73 	bl	8004288 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80019a2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80019a6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	4813      	ldr	r0, [pc, #76]	@ (80019fc <LCD_GPIO_Init+0x18c>)
 80019b0:	f002 fc6a 	bl	8004288 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80019b4:	2303      	movs	r3, #3
 80019b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80019b8:	2309      	movs	r3, #9
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4619      	mov	r1, r3
 80019c2:	480a      	ldr	r0, [pc, #40]	@ (80019ec <LCD_GPIO_Init+0x17c>)
 80019c4:	f002 fc60 	bl	8004288 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80019c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4809      	ldr	r0, [pc, #36]	@ (80019fc <LCD_GPIO_Init+0x18c>)
 80019d6:	f002 fc57 	bl	8004288 <HAL_GPIO_Init>
}
 80019da:	bf00      	nop
 80019dc:	3730      	adds	r7, #48	@ 0x30
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020400 	.word	0x40020400
 80019f0:	40020800 	.word	0x40020800
 80019f4:	40020c00 	.word	0x40020c00
 80019f8:	40021400 	.word	0x40021400
 80019fc:	40021800 	.word	0x40021800

08001a00 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b090      	sub	sp, #64	@ 0x40
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001a0e:	23f0      	movs	r3, #240	@ 0xf0
 8001a10:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001a16:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001a1a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001a20:	23ff      	movs	r3, #255	@ 0xff
 8001a22:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a2e:	2305      	movs	r3, #5
 8001a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <LTCD_Layer_Init+0x78>)
 8001a3a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001a3c:	23f0      	movs	r3, #240	@ 0xf0
 8001a3e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001a40:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001a44:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001a58:	79fa      	ldrb	r2, [r7, #7]
 8001a5a:	f107 030c 	add.w	r3, r7, #12
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4806      	ldr	r0, [pc, #24]	@ (8001a7c <LTCD_Layer_Init+0x7c>)
 8001a62:	f004 f86b 	bl	8005b3c <HAL_LTDC_ConfigLayer>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001a6c:	f000 f9dd 	bl	8001e2a <LCD_Error_Handler>
	}
}
 8001a70:	bf00      	nop
 8001a72:	3740      	adds	r7, #64	@ 0x40
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000408 	.word	0x20000408
 8001a7c:	2000032c 	.word	0x2000032c

08001a80 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001a84:	4b2a      	ldr	r3, [pc, #168]	@ (8001b30 <LTCD__Init+0xb0>)
 8001a86:	4a2b      	ldr	r2, [pc, #172]	@ (8001b34 <LTCD__Init+0xb4>)
 8001a88:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001a8a:	4b29      	ldr	r3, [pc, #164]	@ (8001b30 <LTCD__Init+0xb0>)
 8001a8c:	2209      	movs	r2, #9
 8001a8e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001a90:	4b27      	ldr	r3, [pc, #156]	@ (8001b30 <LTCD__Init+0xb0>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001a96:	4b26      	ldr	r3, [pc, #152]	@ (8001b30 <LTCD__Init+0xb0>)
 8001a98:	221d      	movs	r2, #29
 8001a9a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001a9c:	4b24      	ldr	r3, [pc, #144]	@ (8001b30 <LTCD__Init+0xb0>)
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001aa2:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <LTCD__Init+0xb0>)
 8001aa4:	f240 120d 	movw	r2, #269	@ 0x10d
 8001aa8:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <LTCD__Init+0xb0>)
 8001aac:	f240 1243 	movw	r2, #323	@ 0x143
 8001ab0:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <LTCD__Init+0xb0>)
 8001ab4:	f240 1217 	movw	r2, #279	@ 0x117
 8001ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001aba:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <LTCD__Init+0xb0>)
 8001abc:	f240 1247 	movw	r2, #327	@ 0x147
 8001ac0:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b30 <LTCD__Init+0xb0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001aca:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <LTCD__Init+0xb0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001ad2:	4b17      	ldr	r3, [pc, #92]	@ (8001b30 <LTCD__Init+0xb0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ada:	4b17      	ldr	r3, [pc, #92]	@ (8001b38 <LTCD__Init+0xb8>)
 8001adc:	2208      	movs	r2, #8
 8001ade:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001ae0:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <LTCD__Init+0xb8>)
 8001ae2:	22c0      	movs	r2, #192	@ 0xc0
 8001ae4:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001ae6:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <LTCD__Init+0xb8>)
 8001ae8:	2204      	movs	r2, #4
 8001aea:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001aec:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <LTCD__Init+0xb8>)
 8001aee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001af2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001af4:	4810      	ldr	r0, [pc, #64]	@ (8001b38 <LTCD__Init+0xb8>)
 8001af6:	f004 fe7b 	bl	80067f0 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <LTCD__Init+0xb0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b00:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <LTCD__Init+0xb0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <LTCD__Init+0xb0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <LTCD__Init+0xb0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001b12:	f7ff fead 	bl	8001870 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b16:	4806      	ldr	r0, [pc, #24]	@ (8001b30 <LTCD__Init+0xb0>)
 8001b18:	f003 ff40 	bl	800599c <HAL_LTDC_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001b22:	f000 f982 	bl	8001e2a <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001b26:	f000 fb4f 	bl	80021c8 <ili9341_Init>
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000032c 	.word	0x2000032c
 8001b34:	40016800 	.word	0x40016800
 8001b38:	200003d4 	.word	0x200003d4

08001b3c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
 8001b46:	460b      	mov	r3, r1
 8001b48:	80bb      	strh	r3, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	807b      	strh	r3, [r7, #2]
    // Flip coordinates for 180° rotation
    uint16_t flippedX = LCD_PIXEL_WIDTH - 1 - x;
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001b54:	81fb      	strh	r3, [r7, #14]
    uint16_t flippedY = LCD_PIXEL_HEIGHT - 1 - y;
 8001b56:	88bb      	ldrh	r3, [r7, #4]
 8001b58:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	81bb      	strh	r3, [r7, #12]
    frameBuffer[flippedY * LCD_PIXEL_WIDTH + flippedX] = color;
 8001b60:	89ba      	ldrh	r2, [r7, #12]
 8001b62:	4613      	mov	r3, r2
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	1a9b      	subs	r3, r3, r2
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	89fb      	ldrh	r3, [r7, #14]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4904      	ldr	r1, [pc, #16]	@ (8001b84 <LCD_Draw_Pixel+0x48>)
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	20000408 	.word	0x20000408

08001b88 <LCD_Draw_Block>:

void LCD_Draw_Block(uint16_t Xpos, uint16_t Ypos, const Block *block) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	603a      	str	r2, [r7, #0]
 8001b92:	80fb      	strh	r3, [r7, #6]
 8001b94:	460b      	mov	r3, r1
 8001b96:	80bb      	strh	r3, [r7, #4]
    for (uint8_t y = 0; y < block->height; y++) {
 8001b98:	2300      	movs	r3, #0
 8001b9a:	75fb      	strb	r3, [r7, #23]
 8001b9c:	e04a      	b.n	8001c34 <LCD_Draw_Block+0xac>
        for (uint8_t x = 0; x < block->width; x++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75bb      	strb	r3, [r7, #22]
 8001ba2:	e03f      	b.n	8001c24 <LCD_Draw_Block+0x9c>
            if (block->shape[y][x] == 1) {
 8001ba4:	7dfa      	ldrb	r2, [r7, #23]
 8001ba6:	7dbb      	ldrb	r3, [r7, #22]
 8001ba8:	6839      	ldr	r1, [r7, #0]
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	440a      	add	r2, r1
 8001bae:	4413      	add	r3, r2
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d133      	bne.n	8001c1e <LCD_Draw_Block+0x96>
                uint16_t startX = Xpos + x * RENDER_BLOCK_SIZE;
 8001bb6:	7dbb      	ldrb	r3, [r7, #22]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	0092      	lsls	r2, r2, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	823b      	strh	r3, [r7, #16]
                uint16_t startY = Ypos + y * RENDER_BLOCK_SIZE;
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	0092      	lsls	r2, r2, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	88bb      	ldrh	r3, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	81fb      	strh	r3, [r7, #14]

                for (uint16_t i = 0; i < RENDER_BLOCK_SIZE; i++) {
 8001bde:	2300      	movs	r3, #0
 8001be0:	82bb      	strh	r3, [r7, #20]
 8001be2:	e019      	b.n	8001c18 <LCD_Draw_Block+0x90>
                    for (uint16_t j = 0; j < RENDER_BLOCK_SIZE; j++) {
 8001be4:	2300      	movs	r3, #0
 8001be6:	827b      	strh	r3, [r7, #18]
 8001be8:	e010      	b.n	8001c0c <LCD_Draw_Block+0x84>
                        LCD_Draw_Pixel(startX + i, startY + j, block->color);
 8001bea:	8a3a      	ldrh	r2, [r7, #16]
 8001bec:	8abb      	ldrh	r3, [r7, #20]
 8001bee:	4413      	add	r3, r2
 8001bf0:	b298      	uxth	r0, r3
 8001bf2:	89fa      	ldrh	r2, [r7, #14]
 8001bf4:	8a7b      	ldrh	r3, [r7, #18]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b299      	uxth	r1, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	461a      	mov	r2, r3
 8001c02:	f7ff ff9b 	bl	8001b3c <LCD_Draw_Pixel>
                    for (uint16_t j = 0; j < RENDER_BLOCK_SIZE; j++) {
 8001c06:	8a7b      	ldrh	r3, [r7, #18]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	827b      	strh	r3, [r7, #18]
 8001c0c:	8a7b      	ldrh	r3, [r7, #18]
 8001c0e:	2b13      	cmp	r3, #19
 8001c10:	d9eb      	bls.n	8001bea <LCD_Draw_Block+0x62>
                for (uint16_t i = 0; i < RENDER_BLOCK_SIZE; i++) {
 8001c12:	8abb      	ldrh	r3, [r7, #20]
 8001c14:	3301      	adds	r3, #1
 8001c16:	82bb      	strh	r3, [r7, #20]
 8001c18:	8abb      	ldrh	r3, [r7, #20]
 8001c1a:	2b13      	cmp	r3, #19
 8001c1c:	d9e2      	bls.n	8001be4 <LCD_Draw_Block+0x5c>
        for (uint8_t x = 0; x < block->width; x++) {
 8001c1e:	7dbb      	ldrb	r3, [r7, #22]
 8001c20:	3301      	adds	r3, #1
 8001c22:	75bb      	strb	r3, [r7, #22]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	7c1b      	ldrb	r3, [r3, #16]
 8001c28:	7dba      	ldrb	r2, [r7, #22]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d3ba      	bcc.n	8001ba4 <LCD_Draw_Block+0x1c>
    for (uint8_t y = 0; y < block->height; y++) {
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	3301      	adds	r3, #1
 8001c32:	75fb      	strb	r3, [r7, #23]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	7c5b      	ldrb	r3, [r3, #17]
 8001c38:	7dfa      	ldrb	r2, [r7, #23]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d3af      	bcc.n	8001b9e <LCD_Draw_Block+0x16>
                    }
                }
            }
        }
    }
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10e      	bne.n	8001c7c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	e007      	b.n	8001c74 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001c64:	4908      	ldr	r1, [pc, #32]	@ (8001c88 <LCD_Clear+0x40>)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	88ba      	ldrh	r2, [r7, #4]
 8001c6a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	3301      	adds	r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001c7a:	d3f3      	bcc.n	8001c64 <LCD_Clear+0x1c>
		}
	}
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	20000408 	.word	0x20000408

08001c8c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001c96:	4a04      	ldr	r2, [pc, #16]	@ (8001ca8 <LCD_SetTextColor+0x1c>)
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	8013      	strh	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	20000002 	.word	0x20000002

08001cac <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001cb4:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <LCD_SetFont+0x1c>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6013      	str	r3, [r2, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000404 	.word	0x20000404

08001ccc <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	603a      	str	r2, [r7, #0]
 8001cd6:	80fb      	strh	r3, [r7, #6]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	e04c      	b.n	8001d84 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	e03f      	b.n	8001d70 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4b27      	ldr	r3, [pc, #156]	@ (8001d9c <LCD_Draw_Char+0xd0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	889b      	ldrh	r3, [r3, #4]
 8001d02:	4a27      	ldr	r2, [pc, #156]	@ (8001da0 <LCD_Draw_Char+0xd4>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	08db      	lsrs	r3, r3, #3
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	2280      	movs	r2, #128	@ 0x80
 8001d10:	409a      	lsls	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	fa42 f303 	asr.w	r3, r2, r3
 8001d18:	400b      	ands	r3, r1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d104      	bne.n	8001d28 <LCD_Draw_Char+0x5c>
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d9c <LCD_Draw_Char+0xd0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	889b      	ldrh	r3, [r3, #4]
 8001d24:	2b0c      	cmp	r3, #12
 8001d26:	d920      	bls.n	8001d6a <LCD_Draw_Char+0x9e>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	fa42 f303 	asr.w	r3, r2, r3
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d104      	bne.n	8001d4c <LCD_Draw_Char+0x80>
 8001d42:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <LCD_Draw_Char+0xd0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	889b      	ldrh	r3, [r3, #4]
 8001d48:	2b0c      	cmp	r3, #12
 8001d4a:	d80e      	bhi.n	8001d6a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	4413      	add	r3, r2
 8001d54:	b298      	uxth	r0, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	88bb      	ldrh	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4a10      	ldr	r2, [pc, #64]	@ (8001da4 <LCD_Draw_Char+0xd8>)
 8001d62:	8812      	ldrh	r2, [r2, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7ff fee9 	bl	8001b3c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <LCD_Draw_Char+0xd0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	889b      	ldrh	r3, [r3, #4]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d3b8      	bcc.n	8001cf0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3301      	adds	r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <LCD_Draw_Char+0xd0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	88db      	ldrh	r3, [r3, #6]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d3ab      	bcc.n	8001cea <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000404 	.word	0x20000404
 8001da0:	aaaaaaab 	.word	0xaaaaaaab
 8001da4:	20000002 	.word	0x20000002

08001da8 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
 8001db2:	460b      	mov	r3, r1
 8001db4:	80bb      	strh	r3, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	3b20      	subs	r3, #32
 8001dbe:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <LCD_DisplayChar+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	4907      	ldr	r1, [pc, #28]	@ (8001de8 <LCD_DisplayChar+0x40>)
 8001dca:	6809      	ldr	r1, [r1, #0]
 8001dcc:	88c9      	ldrh	r1, [r1, #6]
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	441a      	add	r2, r3
 8001dd6:	88b9      	ldrh	r1, [r7, #4]
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff76 	bl	8001ccc <LCD_Draw_Char>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000404 	.word	0x20000404

08001dec <LCD_DisplayString>:

void LCD_DisplayString(uint16_t Xpos, uint16_t Ypos, const char *str) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	603a      	str	r2, [r7, #0]
 8001df6:	80fb      	strh	r3, [r7, #6]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	80bb      	strh	r3, [r7, #4]
    // Iterate through the string and display each character
    while (*str != '\0') {
 8001dfc:	e00c      	b.n	8001e18 <LCD_DisplayString+0x2c>
        // Display the current character
        LCD_DisplayChar(Xpos, Ypos, *str);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	88b9      	ldrh	r1, [r7, #4]
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ffce 	bl	8001da8 <LCD_DisplayChar>

        // Advance the X position by the width of the character
        // Adjust `CHAR_WIDTH` based on the font you're using
        Xpos += 16;
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	3310      	adds	r3, #16
 8001e10:	80fb      	strh	r3, [r7, #6]

        // Move to the next character
        str++;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	603b      	str	r3, [r7, #0]
    while (*str != '\0') {
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1ee      	bne.n	8001dfe <LCD_DisplayString+0x12>
    }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2e:	b672      	cpsid	i
}
 8001e30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e32:	bf00      	nop
 8001e34:	e7fd      	b.n	8001e32 <LCD_Error_Handler+0x8>

08001e36 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001e3a:	f001 fba5 	bl	8003588 <STMPE811_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d001      	beq.n	8001e48 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <InitializeLCDTouch+0xe>
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f001 fc81 	bl	800375c <STMPE811_DetermineTouchPosition>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 fc51 	bl	8003716 <STMPE811_Read>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	460a      	mov	r2, r1
 8001e88:	71fb      	strb	r3, [r7, #7]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8001e8e:	79ba      	ldrb	r2, [r7, #6]
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 fc4f 	bl	8003738 <STMPE811_Write>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <IsOverlap>:
static const uint16_t playButtonSize = 20;

// Constants for block placement
static const uint16_t buffer = 5; // Buffer size in pixels

bool IsOverlap(uint16_t Xpos, uint16_t Ypos, const Block *block, uint16_t positions[][2], uint8_t numPlacedBlocks) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b08b      	sub	sp, #44	@ 0x2c
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60ba      	str	r2, [r7, #8]
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4603      	mov	r3, r0
 8001eb0:	81fb      	strh	r3, [r7, #14]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	81bb      	strh	r3, [r7, #12]
    uint16_t blockWidth = block->width * RENDER_BLOCK_SIZE + buffer;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	7c1b      	ldrb	r3, [r3, #16]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2205      	movs	r2, #5
 8001ec6:	4413      	add	r3, r2
 8001ec8:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t blockHeight = block->height * RENDER_BLOCK_SIZE + buffer;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	7c5b      	ldrb	r3, [r3, #17]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	0092      	lsls	r2, r2, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2205      	movs	r2, #5
 8001eda:	4413      	add	r3, r2
 8001edc:	847b      	strh	r3, [r7, #34]	@ 0x22

    // Check overlap with previously placed blocks
    for (uint8_t i = 0; i < numPlacedBlocks; i++) {
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001ee4:	e050      	b.n	8001f88 <IsOverlap+0xe4>
        uint16_t otherX = positions[i][0];
 8001ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	833b      	strh	r3, [r7, #24]
        uint16_t otherY = positions[i][1];
 8001ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	885b      	ldrh	r3, [r3, #2]
 8001f00:	82fb      	strh	r3, [r7, #22]
        uint16_t otherWidth = tetrisBlocks[i].width * RENDER_BLOCK_SIZE + buffer;
 8001f02:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001f06:	4940      	ldr	r1, [pc, #256]	@ (8002008 <IsOverlap+0x164>)
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	3310      	adds	r3, #16
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	0092      	lsls	r2, r2, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2205      	movs	r2, #5
 8001f22:	4413      	add	r3, r2
 8001f24:	82bb      	strh	r3, [r7, #20]
        uint16_t otherHeight = tetrisBlocks[i].height * RENDER_BLOCK_SIZE + buffer;
 8001f26:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001f2a:	4937      	ldr	r1, [pc, #220]	@ (8002008 <IsOverlap+0x164>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	3311      	adds	r3, #17
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	0092      	lsls	r2, r2, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2205      	movs	r2, #5
 8001f46:	4413      	add	r3, r2
 8001f48:	827b      	strh	r3, [r7, #18]

        if (!(Xpos + blockWidth <= otherX || // No overlap to the left
 8001f4a:	89fa      	ldrh	r2, [r7, #14]
 8001f4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f4e:	441a      	add	r2, r3
 8001f50:	8b3b      	ldrh	r3, [r7, #24]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dd13      	ble.n	8001f7e <IsOverlap+0xda>
              Xpos >= otherX + otherWidth || // No overlap to the right
 8001f56:	89fa      	ldrh	r2, [r7, #14]
 8001f58:	8b39      	ldrh	r1, [r7, #24]
 8001f5a:	8abb      	ldrh	r3, [r7, #20]
 8001f5c:	440b      	add	r3, r1
        if (!(Xpos + blockWidth <= otherX || // No overlap to the left
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	da0d      	bge.n	8001f7e <IsOverlap+0xda>
              Ypos + blockHeight <= otherY || // No overlap above
 8001f62:	89ba      	ldrh	r2, [r7, #12]
 8001f64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001f66:	441a      	add	r2, r3
 8001f68:	8afb      	ldrh	r3, [r7, #22]
              Xpos >= otherX + otherWidth || // No overlap to the right
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dd07      	ble.n	8001f7e <IsOverlap+0xda>
              Ypos >= otherY + otherHeight)) { // No overlap below
 8001f6e:	89ba      	ldrh	r2, [r7, #12]
 8001f70:	8af9      	ldrh	r1, [r7, #22]
 8001f72:	8a7b      	ldrh	r3, [r7, #18]
 8001f74:	440b      	add	r3, r1
        if (!(Xpos + blockWidth <= otherX || // No overlap to the left
 8001f76:	429a      	cmp	r2, r3
 8001f78:	da01      	bge.n	8001f7e <IsOverlap+0xda>
            return true; // Overlap detected
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e03d      	b.n	8001ffa <IsOverlap+0x156>
    for (uint8_t i = 0; i < numPlacedBlocks; i++) {
 8001f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f82:	3301      	adds	r3, #1
 8001f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001f88:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001f8c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3a8      	bcc.n	8001ee6 <IsOverlap+0x42>
        }
    }

    // Check overlap with the play button
    uint16_t playButtonLeft = playButtonX - playButtonSize - buffer;
 8001f94:	2278      	movs	r2, #120	@ 0x78
 8001f96:	2314      	movs	r3, #20
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2205      	movs	r2, #5
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	843b      	strh	r3, [r7, #32]
    uint16_t playButtonRight = playButtonX + playButtonSize + buffer;
 8001fa2:	2278      	movs	r2, #120	@ 0x78
 8001fa4:	2314      	movs	r3, #20
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2205      	movs	r2, #5
 8001fac:	4413      	add	r3, r2
 8001fae:	83fb      	strh	r3, [r7, #30]
    uint16_t playButtonTop = playButtonY - playButtonSize - buffer;
 8001fb0:	22a0      	movs	r2, #160	@ 0xa0
 8001fb2:	2314      	movs	r3, #20
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	2205      	movs	r2, #5
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	83bb      	strh	r3, [r7, #28]
    uint16_t playButtonBottom = playButtonY + playButtonSize + buffer;
 8001fbe:	22a0      	movs	r2, #160	@ 0xa0
 8001fc0:	2314      	movs	r3, #20
 8001fc2:	4413      	add	r3, r2
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2205      	movs	r2, #5
 8001fc8:	4413      	add	r3, r2
 8001fca:	837b      	strh	r3, [r7, #26]

    if (!(Xpos + blockWidth <= playButtonLeft || // No overlap to the left of the button
 8001fcc:	89fa      	ldrh	r2, [r7, #14]
 8001fce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001fd0:	441a      	add	r2, r3
 8001fd2:	8c3b      	ldrh	r3, [r7, #32]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	dd0f      	ble.n	8001ff8 <IsOverlap+0x154>
 8001fd8:	89fa      	ldrh	r2, [r7, #14]
 8001fda:	8bfb      	ldrh	r3, [r7, #30]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d20b      	bcs.n	8001ff8 <IsOverlap+0x154>
          Xpos >= playButtonRight ||            // No overlap to the right of the button
          Ypos + blockHeight <= playButtonTop || // No overlap above the button
 8001fe0:	89ba      	ldrh	r2, [r7, #12]
 8001fe2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fe4:	441a      	add	r2, r3
 8001fe6:	8bbb      	ldrh	r3, [r7, #28]
          Xpos >= playButtonRight ||            // No overlap to the right of the button
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dd05      	ble.n	8001ff8 <IsOverlap+0x154>
    if (!(Xpos + blockWidth <= playButtonLeft || // No overlap to the left of the button
 8001fec:	89ba      	ldrh	r2, [r7, #12]
 8001fee:	8b7b      	ldrh	r3, [r7, #26]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d201      	bcs.n	8001ff8 <IsOverlap+0x154>
          Ypos >= playButtonBottom)) {           // No overlap below the button
        return true; // Overlap with play button detected
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <IsOverlap+0x156>
    }

    return false; // No overlap
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	372c      	adds	r7, #44	@ 0x2c
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	08008fac 	.word	0x08008fac

0800200c <PlaceBlock>:

void PlaceBlock(uint16_t *Xpos, uint16_t *Ypos, const Block *block, uint16_t positions[][2], uint8_t numPlacedBlocks) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	603b      	str	r3, [r7, #0]
    do {
        *Xpos = rand() % (LCD_PIXEL_WIDTH - block->width * RENDER_BLOCK_SIZE);
 800201a:	f005 fddb 	bl	8007bd4 <rand>
 800201e:	4602      	mov	r2, r0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7c1b      	ldrb	r3, [r3, #16]
 8002024:	4619      	mov	r1, r3
 8002026:	f06f 0313 	mvn.w	r3, #19
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	33f0      	adds	r3, #240	@ 0xf0
 8002030:	fb92 f1f3 	sdiv	r1, r2, r3
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	801a      	strh	r2, [r3, #0]
        *Ypos = rand() % (LCD_PIXEL_HEIGHT - block->height * RENDER_BLOCK_SIZE);
 8002040:	f005 fdc8 	bl	8007bd4 <rand>
 8002044:	4602      	mov	r2, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7c5b      	ldrb	r3, [r3, #17]
 800204a:	4619      	mov	r1, r3
 800204c:	f06f 0313 	mvn.w	r3, #19
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002058:	fb92 f1f3 	sdiv	r1, r2, r3
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	b29a      	uxth	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	801a      	strh	r2, [r3, #0]
    } while (IsOverlap(*Xpos, *Ypos, block, positions, numPlacedBlocks));
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8818      	ldrh	r0, [r3, #0]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	8819      	ldrh	r1, [r3, #0]
 8002070:	7e3b      	ldrb	r3, [r7, #24]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	f7ff ff14 	bl	8001ea4 <IsOverlap>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1cb      	bne.n	800201a <PlaceBlock+0xe>
}
 8002082:	bf00      	nop
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <DrawPlayButton>:

void DrawPlayButton(void) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
    for (int16_t y = -playButtonSize; y <= playButtonSize; y++) {
 8002092:	2314      	movs	r3, #20
 8002094:	425b      	negs	r3, r3
 8002096:	b29b      	uxth	r3, r3
 8002098:	80fb      	strh	r3, [r7, #6]
 800209a:	e034      	b.n	8002106 <DrawPlayButton+0x7a>
        for (int16_t x = -playButtonSize; x <= playButtonSize; x++) {
 800209c:	2314      	movs	r3, #20
 800209e:	425b      	negs	r3, r3
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	80bb      	strh	r3, [r7, #4]
 80020a4:	e024      	b.n	80020f0 <DrawPlayButton+0x64>
            if (x < 0 && abs(x) >= abs(y)) {
 80020a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da1a      	bge.n	80020e4 <DrawPlayButton+0x58>
 80020ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bfb8      	it	lt
 80020b6:	425b      	neglt	r3, r3
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	bfb8      	it	lt
 80020c2:	425b      	neglt	r3, r3
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d30c      	bcc.n	80020e4 <DrawPlayButton+0x58>
                LCD_Draw_Pixel(playButtonX + x, playButtonY + y, LCD_COLOR_WHITE);
 80020ca:	2278      	movs	r2, #120	@ 0x78
 80020cc:	88bb      	ldrh	r3, [r7, #4]
 80020ce:	4413      	add	r3, r2
 80020d0:	b298      	uxth	r0, r3
 80020d2:	22a0      	movs	r2, #160	@ 0xa0
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	4413      	add	r3, r2
 80020d8:	b29b      	uxth	r3, r3
 80020da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020de:	4619      	mov	r1, r3
 80020e0:	f7ff fd2c 	bl	8001b3c <LCD_Draw_Pixel>
        for (int16_t x = -playButtonSize; x <= playButtonSize; x++) {
 80020e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	80bb      	strh	r3, [r7, #4]
 80020f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020f4:	2214      	movs	r2, #20
 80020f6:	4293      	cmp	r3, r2
 80020f8:	ddd5      	ble.n	80020a6 <DrawPlayButton+0x1a>
    for (int16_t y = -playButtonSize; y <= playButtonSize; y++) {
 80020fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3301      	adds	r3, #1
 8002102:	b29b      	uxth	r3, r3
 8002104:	80fb      	strh	r3, [r7, #6]
 8002106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800210a:	2214      	movs	r2, #20
 800210c:	4293      	cmp	r3, r2
 800210e:	ddc5      	ble.n	800209c <DrawPlayButton+0x10>
            }
        }
    }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <DisplayMenu>:

void DisplayMenu(void) {
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b08d      	sub	sp, #52	@ 0x34
 8002120:	af02      	add	r7, sp, #8
    // Clear the screen with black background
    LCD_Clear(0, LCD_COLOR_BLACK);
 8002122:	2100      	movs	r1, #0
 8002124:	2000      	movs	r0, #0
 8002126:	f7ff fd8f 	bl	8001c48 <LCD_Clear>

    // Array to store positions of placed blocks
    uint16_t positions[NUM_BLOCKS][2] = {0};
 800212a:	f107 0308 	add.w	r3, r7, #8
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	611a      	str	r2, [r3, #16]
 800213a:	615a      	str	r2, [r3, #20]
 800213c:	619a      	str	r2, [r3, #24]

    // Display all Tetris blocks scattered on the screen
    for (uint8_t i = 0; i < NUM_BLOCKS; i++) {
 800213e:	2300      	movs	r3, #0
 8002140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002144:	e033      	b.n	80021ae <DisplayMenu+0x92>
        uint16_t randX, randY;
        PlaceBlock(&randX, &randY, &tetrisBlocks[i], positions, i);
 8002146:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4a1c      	ldr	r2, [pc, #112]	@ (80021c4 <DisplayMenu+0xa8>)
 8002154:	441a      	add	r2, r3
 8002156:	f107 0408 	add.w	r4, r7, #8
 800215a:	1d39      	adds	r1, r7, #4
 800215c:	1db8      	adds	r0, r7, #6
 800215e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	4623      	mov	r3, r4
 8002166:	f7ff ff51 	bl	800200c <PlaceBlock>
        positions[i][0] = randX;
 800216a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800216e:	88fa      	ldrh	r2, [r7, #6]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	3328      	adds	r3, #40	@ 0x28
 8002174:	443b      	add	r3, r7
 8002176:	f823 2c20 	strh.w	r2, [r3, #-32]
        positions[i][1] = randY;
 800217a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800217e:	88ba      	ldrh	r2, [r7, #4]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	3328      	adds	r3, #40	@ 0x28
 8002184:	443b      	add	r3, r7
 8002186:	f823 2c1e 	strh.w	r2, [r3, #-30]
        LCD_Draw_Block(randX, randY, &tetrisBlocks[i]);
 800218a:	88f8      	ldrh	r0, [r7, #6]
 800218c:	88b9      	ldrh	r1, [r7, #4]
 800218e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <DisplayMenu+0xa8>)
 800219c:	4413      	add	r3, r2
 800219e:	461a      	mov	r2, r3
 80021a0:	f7ff fcf2 	bl	8001b88 <LCD_Draw_Block>
    for (uint8_t i = 0; i < NUM_BLOCKS; i++) {
 80021a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021a8:	3301      	adds	r3, #1
 80021aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80021ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d9c7      	bls.n	8002146 <DisplayMenu+0x2a>
    }

    // Draw the "Play" button
    DrawPlayButton();
 80021b6:	f7ff ff69 	bl	800208c <DrawPlayButton>
}
 80021ba:	bf00      	nop
 80021bc:	372c      	adds	r7, #44	@ 0x2c
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd90      	pop	{r4, r7, pc}
 80021c2:	bf00      	nop
 80021c4:	08008fac 	.word	0x08008fac

080021c8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80021cc:	f000 f9fe 	bl	80025cc <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80021d0:	20ca      	movs	r0, #202	@ 0xca
 80021d2:	f000 f943 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80021d6:	20c3      	movs	r0, #195	@ 0xc3
 80021d8:	f000 f94d 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80021dc:	2008      	movs	r0, #8
 80021de:	f000 f94a 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80021e2:	2050      	movs	r0, #80	@ 0x50
 80021e4:	f000 f947 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80021e8:	20cf      	movs	r0, #207	@ 0xcf
 80021ea:	f000 f937 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80021ee:	2000      	movs	r0, #0
 80021f0:	f000 f941 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80021f4:	20c1      	movs	r0, #193	@ 0xc1
 80021f6:	f000 f93e 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80021fa:	2030      	movs	r0, #48	@ 0x30
 80021fc:	f000 f93b 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8002200:	20ed      	movs	r0, #237	@ 0xed
 8002202:	f000 f92b 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8002206:	2064      	movs	r0, #100	@ 0x64
 8002208:	f000 f935 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800220c:	2003      	movs	r0, #3
 800220e:	f000 f932 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8002212:	2012      	movs	r0, #18
 8002214:	f000 f92f 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8002218:	2081      	movs	r0, #129	@ 0x81
 800221a:	f000 f92c 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800221e:	20e8      	movs	r0, #232	@ 0xe8
 8002220:	f000 f91c 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8002224:	2085      	movs	r0, #133	@ 0x85
 8002226:	f000 f926 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800222a:	2000      	movs	r0, #0
 800222c:	f000 f923 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002230:	2078      	movs	r0, #120	@ 0x78
 8002232:	f000 f920 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8002236:	20cb      	movs	r0, #203	@ 0xcb
 8002238:	f000 f910 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800223c:	2039      	movs	r0, #57	@ 0x39
 800223e:	f000 f91a 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8002242:	202c      	movs	r0, #44	@ 0x2c
 8002244:	f000 f917 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002248:	2000      	movs	r0, #0
 800224a:	f000 f914 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800224e:	2034      	movs	r0, #52	@ 0x34
 8002250:	f000 f911 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8002254:	2002      	movs	r0, #2
 8002256:	f000 f90e 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800225a:	20f7      	movs	r0, #247	@ 0xf7
 800225c:	f000 f8fe 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8002260:	2020      	movs	r0, #32
 8002262:	f000 f908 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002266:	20ea      	movs	r0, #234	@ 0xea
 8002268:	f000 f8f8 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800226c:	2000      	movs	r0, #0
 800226e:	f000 f902 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002272:	2000      	movs	r0, #0
 8002274:	f000 f8ff 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002278:	20b1      	movs	r0, #177	@ 0xb1
 800227a:	f000 f8ef 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800227e:	2000      	movs	r0, #0
 8002280:	f000 f8f9 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002284:	201b      	movs	r0, #27
 8002286:	f000 f8f6 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800228a:	20b6      	movs	r0, #182	@ 0xb6
 800228c:	f000 f8e6 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002290:	200a      	movs	r0, #10
 8002292:	f000 f8f0 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8002296:	20a2      	movs	r0, #162	@ 0xa2
 8002298:	f000 f8ed 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800229c:	20c0      	movs	r0, #192	@ 0xc0
 800229e:	f000 f8dd 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80022a2:	2010      	movs	r0, #16
 80022a4:	f000 f8e7 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80022a8:	20c1      	movs	r0, #193	@ 0xc1
 80022aa:	f000 f8d7 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80022ae:	2010      	movs	r0, #16
 80022b0:	f000 f8e1 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80022b4:	20c5      	movs	r0, #197	@ 0xc5
 80022b6:	f000 f8d1 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80022ba:	2045      	movs	r0, #69	@ 0x45
 80022bc:	f000 f8db 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80022c0:	2015      	movs	r0, #21
 80022c2:	f000 f8d8 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80022c6:	20c7      	movs	r0, #199	@ 0xc7
 80022c8:	f000 f8c8 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80022cc:	2090      	movs	r0, #144	@ 0x90
 80022ce:	f000 f8d2 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80022d2:	2036      	movs	r0, #54	@ 0x36
 80022d4:	f000 f8c2 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80022d8:	20c8      	movs	r0, #200	@ 0xc8
 80022da:	f000 f8cc 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80022de:	20f2      	movs	r0, #242	@ 0xf2
 80022e0:	f000 f8bc 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80022e4:	2000      	movs	r0, #0
 80022e6:	f000 f8c6 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80022ea:	20b0      	movs	r0, #176	@ 0xb0
 80022ec:	f000 f8b6 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80022f0:	20c2      	movs	r0, #194	@ 0xc2
 80022f2:	f000 f8c0 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80022f6:	20b6      	movs	r0, #182	@ 0xb6
 80022f8:	f000 f8b0 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80022fc:	200a      	movs	r0, #10
 80022fe:	f000 f8ba 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8002302:	20a7      	movs	r0, #167	@ 0xa7
 8002304:	f000 f8b7 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002308:	2027      	movs	r0, #39	@ 0x27
 800230a:	f000 f8b4 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800230e:	2004      	movs	r0, #4
 8002310:	f000 f8b1 	bl	8002476 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002314:	202a      	movs	r0, #42	@ 0x2a
 8002316:	f000 f8a1 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800231a:	2000      	movs	r0, #0
 800231c:	f000 f8ab 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002320:	2000      	movs	r0, #0
 8002322:	f000 f8a8 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002326:	2000      	movs	r0, #0
 8002328:	f000 f8a5 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800232c:	20ef      	movs	r0, #239	@ 0xef
 800232e:	f000 f8a2 	bl	8002476 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002332:	202b      	movs	r0, #43	@ 0x2b
 8002334:	f000 f892 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002338:	2000      	movs	r0, #0
 800233a:	f000 f89c 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800233e:	2000      	movs	r0, #0
 8002340:	f000 f899 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002344:	2001      	movs	r0, #1
 8002346:	f000 f896 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800234a:	203f      	movs	r0, #63	@ 0x3f
 800234c:	f000 f893 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002350:	20f6      	movs	r0, #246	@ 0xf6
 8002352:	f000 f883 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002356:	2001      	movs	r0, #1
 8002358:	f000 f88d 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800235c:	2000      	movs	r0, #0
 800235e:	f000 f88a 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8002362:	2006      	movs	r0, #6
 8002364:	f000 f887 	bl	8002476 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002368:	202c      	movs	r0, #44	@ 0x2c
 800236a:	f000 f877 	bl	800245c <ili9341_Write_Reg>
  LCD_Delay(200);
 800236e:	20c8      	movs	r0, #200	@ 0xc8
 8002370:	f000 f9e8 	bl	8002744 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002374:	2026      	movs	r0, #38	@ 0x26
 8002376:	f000 f871 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800237a:	2001      	movs	r0, #1
 800237c:	f000 f87b 	bl	8002476 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8002380:	20e0      	movs	r0, #224	@ 0xe0
 8002382:	f000 f86b 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8002386:	200f      	movs	r0, #15
 8002388:	f000 f875 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800238c:	2029      	movs	r0, #41	@ 0x29
 800238e:	f000 f872 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8002392:	2024      	movs	r0, #36	@ 0x24
 8002394:	f000 f86f 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002398:	200c      	movs	r0, #12
 800239a:	f000 f86c 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800239e:	200e      	movs	r0, #14
 80023a0:	f000 f869 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80023a4:	2009      	movs	r0, #9
 80023a6:	f000 f866 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80023aa:	204e      	movs	r0, #78	@ 0x4e
 80023ac:	f000 f863 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80023b0:	2078      	movs	r0, #120	@ 0x78
 80023b2:	f000 f860 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80023b6:	203c      	movs	r0, #60	@ 0x3c
 80023b8:	f000 f85d 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80023bc:	2009      	movs	r0, #9
 80023be:	f000 f85a 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80023c2:	2013      	movs	r0, #19
 80023c4:	f000 f857 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80023c8:	2005      	movs	r0, #5
 80023ca:	f000 f854 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80023ce:	2017      	movs	r0, #23
 80023d0:	f000 f851 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80023d4:	2011      	movs	r0, #17
 80023d6:	f000 f84e 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80023da:	2000      	movs	r0, #0
 80023dc:	f000 f84b 	bl	8002476 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80023e0:	20e1      	movs	r0, #225	@ 0xe1
 80023e2:	f000 f83b 	bl	800245c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80023e6:	2000      	movs	r0, #0
 80023e8:	f000 f845 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80023ec:	2016      	movs	r0, #22
 80023ee:	f000 f842 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80023f2:	201b      	movs	r0, #27
 80023f4:	f000 f83f 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80023f8:	2004      	movs	r0, #4
 80023fa:	f000 f83c 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80023fe:	2011      	movs	r0, #17
 8002400:	f000 f839 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002404:	2007      	movs	r0, #7
 8002406:	f000 f836 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800240a:	2031      	movs	r0, #49	@ 0x31
 800240c:	f000 f833 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002410:	2033      	movs	r0, #51	@ 0x33
 8002412:	f000 f830 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002416:	2042      	movs	r0, #66	@ 0x42
 8002418:	f000 f82d 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800241c:	2005      	movs	r0, #5
 800241e:	f000 f82a 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002422:	200c      	movs	r0, #12
 8002424:	f000 f827 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002428:	200a      	movs	r0, #10
 800242a:	f000 f824 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800242e:	2028      	movs	r0, #40	@ 0x28
 8002430:	f000 f821 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002434:	202f      	movs	r0, #47	@ 0x2f
 8002436:	f000 f81e 	bl	8002476 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800243a:	200f      	movs	r0, #15
 800243c:	f000 f81b 	bl	8002476 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002440:	2011      	movs	r0, #17
 8002442:	f000 f80b 	bl	800245c <ili9341_Write_Reg>
  LCD_Delay(200);
 8002446:	20c8      	movs	r0, #200	@ 0xc8
 8002448:	f000 f97c 	bl	8002744 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800244c:	2029      	movs	r0, #41	@ 0x29
 800244e:	f000 f805 	bl	800245c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002452:	202c      	movs	r0, #44	@ 0x2c
 8002454:	f000 f802 	bl	800245c <ili9341_Write_Reg>
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}

0800245c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f949 	bl	8002700 <LCD_IO_WriteReg>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	4603      	mov	r3, r0
 800247e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f91a 	bl	80026bc <LCD_IO_WriteData>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002494:	4819      	ldr	r0, [pc, #100]	@ (80024fc <SPI_Init+0x6c>)
 8002496:	f004 fde0 	bl	800705a <HAL_SPI_GetState>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d12b      	bne.n	80024f8 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80024a0:	4b16      	ldr	r3, [pc, #88]	@ (80024fc <SPI_Init+0x6c>)
 80024a2:	4a17      	ldr	r2, [pc, #92]	@ (8002500 <SPI_Init+0x70>)
 80024a4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80024a6:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <SPI_Init+0x6c>)
 80024a8:	2218      	movs	r2, #24
 80024aa:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80024ac:	4b13      	ldr	r3, [pc, #76]	@ (80024fc <SPI_Init+0x6c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80024b2:	4b12      	ldr	r3, [pc, #72]	@ (80024fc <SPI_Init+0x6c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80024b8:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <SPI_Init+0x6c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80024be:	4b0f      	ldr	r3, [pc, #60]	@ (80024fc <SPI_Init+0x6c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80024c4:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <SPI_Init+0x6c>)
 80024c6:	2207      	movs	r2, #7
 80024c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80024ca:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <SPI_Init+0x6c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80024d0:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <SPI_Init+0x6c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80024d6:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <SPI_Init+0x6c>)
 80024d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024dc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80024de:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <SPI_Init+0x6c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80024e4:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <SPI_Init+0x6c>)
 80024e6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024ea:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80024ec:	4803      	ldr	r0, [pc, #12]	@ (80024fc <SPI_Init+0x6c>)
 80024ee:	f000 f833 	bl	8002558 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80024f2:	4802      	ldr	r0, [pc, #8]	@ (80024fc <SPI_Init+0x6c>)
 80024f4:	f004 fbbc 	bl	8006c70 <HAL_SPI_Init>
  }
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20025c08 	.word	0x20025c08
 8002500:	40015000 	.word	0x40015000

08002504 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <SPI_Write+0x34>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	1db9      	adds	r1, r7, #6
 8002518:	2201      	movs	r2, #1
 800251a:	4808      	ldr	r0, [pc, #32]	@ (800253c <SPI_Write+0x38>)
 800251c:	f004 fc59 	bl	8006dd2 <HAL_SPI_Transmit>
 8002520:	4603      	mov	r3, r0
 8002522:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800252a:	f000 f809 	bl	8002540 <SPI_Error>
  }
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000000c 	.word	0x2000000c
 800253c:	20025c08 	.word	0x20025c08

08002540 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002544:	4803      	ldr	r0, [pc, #12]	@ (8002554 <SPI_Error+0x14>)
 8002546:	f004 fc1c 	bl	8006d82 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800254a:	f7ff ffa1 	bl	8002490 <SPI_Init>
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20025c08 	.word	0x20025c08

08002558 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	@ 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002560:	2300      	movs	r3, #0
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	4b17      	ldr	r3, [pc, #92]	@ (80025c4 <SPI_MspInit+0x6c>)
 8002566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002568:	4a16      	ldr	r2, [pc, #88]	@ (80025c4 <SPI_MspInit+0x6c>)
 800256a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800256e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002570:	4b14      	ldr	r3, [pc, #80]	@ (80025c4 <SPI_MspInit+0x6c>)
 8002572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002574:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <SPI_MspInit+0x6c>)
 8002582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002584:	4a0f      	ldr	r2, [pc, #60]	@ (80025c4 <SPI_MspInit+0x6c>)
 8002586:	f043 0320 	orr.w	r3, r3, #32
 800258a:	6313      	str	r3, [r2, #48]	@ 0x30
 800258c:	4b0d      	ldr	r3, [pc, #52]	@ (80025c4 <SPI_MspInit+0x6c>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8002598:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800259c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80025a2:	2302      	movs	r3, #2
 80025a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80025a6:	2301      	movs	r3, #1
 80025a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80025aa:	2305      	movs	r3, #5
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80025ae:	f107 0314 	add.w	r3, r7, #20
 80025b2:	4619      	mov	r1, r3
 80025b4:	4804      	ldr	r0, [pc, #16]	@ (80025c8 <SPI_MspInit+0x70>)
 80025b6:	f001 fe67 	bl	8004288 <HAL_GPIO_Init>
}
 80025ba:	bf00      	nop
 80025bc:	3728      	adds	r7, #40	@ 0x28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40021400 	.word	0x40021400

080025cc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80025d2:	4b36      	ldr	r3, [pc, #216]	@ (80026ac <LCD_IO_Init+0xe0>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d164      	bne.n	80026a4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80025da:	4b34      	ldr	r3, [pc, #208]	@ (80026ac <LCD_IO_Init+0xe0>)
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	4b32      	ldr	r3, [pc, #200]	@ (80026b0 <LCD_IO_Init+0xe4>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e8:	4a31      	ldr	r2, [pc, #196]	@ (80026b0 <LCD_IO_Init+0xe4>)
 80025ea:	f043 0308 	orr.w	r3, r3, #8
 80025ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f0:	4b2f      	ldr	r3, [pc, #188]	@ (80026b0 <LCD_IO_Init+0xe4>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80025fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002600:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002602:	2301      	movs	r3, #1
 8002604:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800260a:	2302      	movs	r3, #2
 800260c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800260e:	f107 030c 	add.w	r3, r7, #12
 8002612:	4619      	mov	r1, r3
 8002614:	4827      	ldr	r0, [pc, #156]	@ (80026b4 <LCD_IO_Init+0xe8>)
 8002616:	f001 fe37 	bl	8004288 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	4b24      	ldr	r3, [pc, #144]	@ (80026b0 <LCD_IO_Init+0xe4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	4a23      	ldr	r2, [pc, #140]	@ (80026b0 <LCD_IO_Init+0xe4>)
 8002624:	f043 0308 	orr.w	r3, r3, #8
 8002628:	6313      	str	r3, [r2, #48]	@ 0x30
 800262a:	4b21      	ldr	r3, [pc, #132]	@ (80026b0 <LCD_IO_Init+0xe4>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800263a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800263c:	2301      	movs	r3, #1
 800263e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002644:	2302      	movs	r3, #2
 8002646:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002648:	f107 030c 	add.w	r3, r7, #12
 800264c:	4619      	mov	r1, r3
 800264e:	4819      	ldr	r0, [pc, #100]	@ (80026b4 <LCD_IO_Init+0xe8>)
 8002650:	f001 fe1a 	bl	8004288 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002654:	2300      	movs	r3, #0
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <LCD_IO_Init+0xe4>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	4a14      	ldr	r2, [pc, #80]	@ (80026b0 <LCD_IO_Init+0xe4>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	6313      	str	r3, [r2, #48]	@ 0x30
 8002664:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <LCD_IO_Init+0xe4>)
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002670:	2304      	movs	r3, #4
 8002672:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002674:	2301      	movs	r3, #1
 8002676:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800267c:	2302      	movs	r3, #2
 800267e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	4619      	mov	r1, r3
 8002686:	480c      	ldr	r0, [pc, #48]	@ (80026b8 <LCD_IO_Init+0xec>)
 8002688:	f001 fdfe 	bl	8004288 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 800268c:	2200      	movs	r2, #0
 800268e:	2104      	movs	r1, #4
 8002690:	4809      	ldr	r0, [pc, #36]	@ (80026b8 <LCD_IO_Init+0xec>)
 8002692:	f002 f8b1 	bl	80047f8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002696:	2201      	movs	r2, #1
 8002698:	2104      	movs	r1, #4
 800269a:	4807      	ldr	r0, [pc, #28]	@ (80026b8 <LCD_IO_Init+0xec>)
 800269c:	f002 f8ac 	bl	80047f8 <HAL_GPIO_WritePin>

    SPI_Init();
 80026a0:	f7ff fef6 	bl	8002490 <SPI_Init>
  }
}
 80026a4:	bf00      	nop
 80026a6:	3720      	adds	r7, #32
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20025c60 	.word	0x20025c60
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	40020800 	.word	0x40020800

080026bc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80026c6:	2201      	movs	r2, #1
 80026c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026cc:	480a      	ldr	r0, [pc, #40]	@ (80026f8 <LCD_IO_WriteData+0x3c>)
 80026ce:	f002 f893 	bl	80047f8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80026d2:	2200      	movs	r2, #0
 80026d4:	2104      	movs	r1, #4
 80026d6:	4809      	ldr	r0, [pc, #36]	@ (80026fc <LCD_IO_WriteData+0x40>)
 80026d8:	f002 f88e 	bl	80047f8 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ff10 	bl	8002504 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80026e4:	2201      	movs	r2, #1
 80026e6:	2104      	movs	r1, #4
 80026e8:	4804      	ldr	r0, [pc, #16]	@ (80026fc <LCD_IO_WriteData+0x40>)
 80026ea:	f002 f885 	bl	80047f8 <HAL_GPIO_WritePin>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40020c00 	.word	0x40020c00
 80026fc:	40020800 	.word	0x40020800

08002700 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800270a:	2200      	movs	r2, #0
 800270c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002710:	480a      	ldr	r0, [pc, #40]	@ (800273c <LCD_IO_WriteReg+0x3c>)
 8002712:	f002 f871 	bl	80047f8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002716:	2200      	movs	r2, #0
 8002718:	2104      	movs	r1, #4
 800271a:	4809      	ldr	r0, [pc, #36]	@ (8002740 <LCD_IO_WriteReg+0x40>)
 800271c:	f002 f86c 	bl	80047f8 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	b29b      	uxth	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff feed 	bl	8002504 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800272a:	2201      	movs	r2, #1
 800272c:	2104      	movs	r1, #4
 800272e:	4804      	ldr	r0, [pc, #16]	@ (8002740 <LCD_IO_WriteReg+0x40>)
 8002730:	f002 f862 	bl	80047f8 <HAL_GPIO_WritePin>
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40020c00 	.word	0x40020c00
 8002740:	40020800 	.word	0x40020800

08002744 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f001 fbef 	bl	8003f30 <HAL_Delay>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800275e:	f001 fb75 	bl	8003e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002762:	f000 f815 	bl	8002790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002766:	f000 fa55 	bl	8002c14 <MX_GPIO_Init>
  MX_I2C3_Init();
 800276a:	f000 f87b 	bl	8002864 <MX_I2C3_Init>
  MX_LTDC_Init();
 800276e:	f000 f8b9 	bl	80028e4 <MX_LTDC_Init>
  MX_RNG_Init();
 8002772:	f000 f969 	bl	8002a48 <MX_RNG_Init>
  MX_SPI5_Init();
 8002776:	f000 f97b 	bl	8002a70 <MX_SPI5_Init>
  MX_TIM2_Init();
 800277a:	f000 f9af 	bl	8002adc <MX_TIM2_Init>
  MX_TIM5_Init();
 800277e:	f000 f9fb 	bl	8002b78 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8002782:	f7fd fefd 	bl	8000580 <ApplicationInit>
  MainMenu();
 8002786:	f7fd ff23 	bl	80005d0 <MainMenu>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800278a:	bf00      	nop
 800278c:	e7fd      	b.n	800278a <main+0x30>
	...

08002790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b094      	sub	sp, #80	@ 0x50
 8002794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002796:	f107 0320 	add.w	r3, r7, #32
 800279a:	2230      	movs	r2, #48	@ 0x30
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f005 fb7b 	bl	8007e9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027a4:	f107 030c 	add.w	r3, r7, #12
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	4b28      	ldr	r3, [pc, #160]	@ (800285c <SystemClock_Config+0xcc>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	4a27      	ldr	r2, [pc, #156]	@ (800285c <SystemClock_Config+0xcc>)
 80027be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c4:	4b25      	ldr	r3, [pc, #148]	@ (800285c <SystemClock_Config+0xcc>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027d0:	2300      	movs	r3, #0
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	4b22      	ldr	r3, [pc, #136]	@ (8002860 <SystemClock_Config+0xd0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a21      	ldr	r2, [pc, #132]	@ (8002860 <SystemClock_Config+0xd0>)
 80027da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002860 <SystemClock_Config+0xd0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027ec:	2301      	movs	r3, #1
 80027ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027f6:	2302      	movs	r3, #2
 80027f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002800:	2308      	movs	r3, #8
 8002802:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002804:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002808:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800280a:	2302      	movs	r3, #2
 800280c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800280e:	2307      	movs	r3, #7
 8002810:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002812:	f107 0320 	add.w	r3, r7, #32
 8002816:	4618      	mov	r0, r3
 8002818:	f003 fb66 	bl	8005ee8 <HAL_RCC_OscConfig>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002822:	f000 fbbb 	bl	8002f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002826:	230f      	movs	r3, #15
 8002828:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800282a:	2302      	movs	r3, #2
 800282c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002832:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002836:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800283c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	2105      	movs	r1, #5
 8002844:	4618      	mov	r0, r3
 8002846:	f003 fdc7 	bl	80063d8 <HAL_RCC_ClockConfig>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002850:	f000 fba4 	bl	8002f9c <Error_Handler>
  }
}
 8002854:	bf00      	nop
 8002856:	3750      	adds	r7, #80	@ 0x50
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	40007000 	.word	0x40007000

08002864 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002868:	4b1b      	ldr	r3, [pc, #108]	@ (80028d8 <MX_I2C3_Init+0x74>)
 800286a:	4a1c      	ldr	r2, [pc, #112]	@ (80028dc <MX_I2C3_Init+0x78>)
 800286c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800286e:	4b1a      	ldr	r3, [pc, #104]	@ (80028d8 <MX_I2C3_Init+0x74>)
 8002870:	4a1b      	ldr	r2, [pc, #108]	@ (80028e0 <MX_I2C3_Init+0x7c>)
 8002872:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002874:	4b18      	ldr	r3, [pc, #96]	@ (80028d8 <MX_I2C3_Init+0x74>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800287a:	4b17      	ldr	r3, [pc, #92]	@ (80028d8 <MX_I2C3_Init+0x74>)
 800287c:	2200      	movs	r2, #0
 800287e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002880:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <MX_I2C3_Init+0x74>)
 8002882:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002886:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002888:	4b13      	ldr	r3, [pc, #76]	@ (80028d8 <MX_I2C3_Init+0x74>)
 800288a:	2200      	movs	r2, #0
 800288c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800288e:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <MX_I2C3_Init+0x74>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002894:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <MX_I2C3_Init+0x74>)
 8002896:	2200      	movs	r2, #0
 8002898:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800289a:	4b0f      	ldr	r3, [pc, #60]	@ (80028d8 <MX_I2C3_Init+0x74>)
 800289c:	2200      	movs	r2, #0
 800289e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80028a0:	480d      	ldr	r0, [pc, #52]	@ (80028d8 <MX_I2C3_Init+0x74>)
 80028a2:	f001 ffdb 	bl	800485c <HAL_I2C_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80028ac:	f000 fb76 	bl	8002f9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028b0:	2100      	movs	r1, #0
 80028b2:	4809      	ldr	r0, [pc, #36]	@ (80028d8 <MX_I2C3_Init+0x74>)
 80028b4:	f002 fff6 	bl	80058a4 <HAL_I2CEx_ConfigAnalogFilter>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80028be:	f000 fb6d 	bl	8002f9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80028c2:	2100      	movs	r1, #0
 80028c4:	4804      	ldr	r0, [pc, #16]	@ (80028d8 <MX_I2C3_Init+0x74>)
 80028c6:	f003 f829 	bl	800591c <HAL_I2CEx_ConfigDigitalFilter>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80028d0:	f000 fb64 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20025c64 	.word	0x20025c64
 80028dc:	40005c00 	.word	0x40005c00
 80028e0:	000186a0 	.word	0x000186a0

080028e4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b09a      	sub	sp, #104	@ 0x68
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80028ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028ee:	2234      	movs	r2, #52	@ 0x34
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f005 fad1 	bl	8007e9a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80028f8:	463b      	mov	r3, r7
 80028fa:	2234      	movs	r2, #52	@ 0x34
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f005 facb 	bl	8007e9a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002904:	4b4e      	ldr	r3, [pc, #312]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 8002906:	4a4f      	ldr	r2, [pc, #316]	@ (8002a44 <MX_LTDC_Init+0x160>)
 8002908:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800290a:	4b4d      	ldr	r3, [pc, #308]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 800290c:	2200      	movs	r2, #0
 800290e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002910:	4b4b      	ldr	r3, [pc, #300]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002916:	4b4a      	ldr	r3, [pc, #296]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 8002918:	2200      	movs	r2, #0
 800291a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800291c:	4b48      	ldr	r3, [pc, #288]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 800291e:	2200      	movs	r2, #0
 8002920:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8002922:	4b47      	ldr	r3, [pc, #284]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 8002924:	2207      	movs	r2, #7
 8002926:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002928:	4b45      	ldr	r3, [pc, #276]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 800292a:	2203      	movs	r2, #3
 800292c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800292e:	4b44      	ldr	r3, [pc, #272]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 8002930:	220e      	movs	r2, #14
 8002932:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8002934:	4b42      	ldr	r3, [pc, #264]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 8002936:	2205      	movs	r2, #5
 8002938:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800293a:	4b41      	ldr	r3, [pc, #260]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 800293c:	f240 228e 	movw	r2, #654	@ 0x28e
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8002942:	4b3f      	ldr	r3, [pc, #252]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 8002944:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002948:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 800294a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 800294c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002950:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8002952:	4b3b      	ldr	r3, [pc, #236]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 8002954:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002958:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800295a:	4b39      	ldr	r3, [pc, #228]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002962:	4b37      	ldr	r3, [pc, #220]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800296a:	4b35      	ldr	r3, [pc, #212]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002972:	4833      	ldr	r0, [pc, #204]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 8002974:	f003 f812 	bl	800599c <HAL_LTDC_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800297e:	f000 fb0d 	bl	8002f9c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002992:	2300      	movs	r3, #0
 8002994:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800299e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029a2:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80029a4:	2305      	movs	r3, #5
 80029a6:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80029c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029ca:	2200      	movs	r2, #0
 80029cc:	4619      	mov	r1, r3
 80029ce:	481c      	ldr	r0, [pc, #112]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 80029d0:	f003 f8b4 	bl	8005b3c <HAL_LTDC_ConfigLayer>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80029da:	f000 fadf 	bl	8002f9c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80029fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029fe:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002a00:	2305      	movs	r3, #5
 8002a02:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002a22:	463b      	mov	r3, r7
 8002a24:	2201      	movs	r2, #1
 8002a26:	4619      	mov	r1, r3
 8002a28:	4805      	ldr	r0, [pc, #20]	@ (8002a40 <MX_LTDC_Init+0x15c>)
 8002a2a:	f003 f887 	bl	8005b3c <HAL_LTDC_ConfigLayer>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002a34:	f000 fab2 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002a38:	bf00      	nop
 8002a3a:	3768      	adds	r7, #104	@ 0x68
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20025cb8 	.word	0x20025cb8
 8002a44:	40016800 	.word	0x40016800

08002a48 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <MX_RNG_Init+0x20>)
 8002a4e:	4a07      	ldr	r2, [pc, #28]	@ (8002a6c <MX_RNG_Init+0x24>)
 8002a50:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002a52:	4805      	ldr	r0, [pc, #20]	@ (8002a68 <MX_RNG_Init+0x20>)
 8002a54:	f004 f88c 	bl	8006b70 <HAL_RNG_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002a5e:	f000 fa9d 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20025d60 	.word	0x20025d60
 8002a6c:	50060800 	.word	0x50060800

08002a70 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002a74:	4b17      	ldr	r3, [pc, #92]	@ (8002ad4 <MX_SPI5_Init+0x64>)
 8002a76:	4a18      	ldr	r2, [pc, #96]	@ (8002ad8 <MX_SPI5_Init+0x68>)
 8002a78:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002a7a:	4b16      	ldr	r3, [pc, #88]	@ (8002ad4 <MX_SPI5_Init+0x64>)
 8002a7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a80:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002a82:	4b14      	ldr	r3, [pc, #80]	@ (8002ad4 <MX_SPI5_Init+0x64>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a88:	4b12      	ldr	r3, [pc, #72]	@ (8002ad4 <MX_SPI5_Init+0x64>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <MX_SPI5_Init+0x64>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad4 <MX_SPI5_Init+0x64>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <MX_SPI5_Init+0x64>)
 8002a9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aa0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <MX_SPI5_Init+0x64>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad4 <MX_SPI5_Init+0x64>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aae:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <MX_SPI5_Init+0x64>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab4:	4b07      	ldr	r3, [pc, #28]	@ (8002ad4 <MX_SPI5_Init+0x64>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <MX_SPI5_Init+0x64>)
 8002abc:	220a      	movs	r2, #10
 8002abe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002ac0:	4804      	ldr	r0, [pc, #16]	@ (8002ad4 <MX_SPI5_Init+0x64>)
 8002ac2:	f004 f8d5 	bl	8006c70 <HAL_SPI_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002acc:	f000 fa66 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20025d70 	.word	0x20025d70
 8002ad8:	40015000 	.word	0x40015000

08002adc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ae2:	f107 0308 	add.w	r3, r7, #8
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af0:	463b      	mov	r3, r7
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002af8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <MX_TIM2_Init+0x94>)
 8002afa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002afe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002b00:	4b1b      	ldr	r3, [pc, #108]	@ (8002b70 <MX_TIM2_Init+0x94>)
 8002b02:	2253      	movs	r2, #83	@ 0x53
 8002b04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b06:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <MX_TIM2_Init+0x94>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8002b0c:	4b18      	ldr	r3, [pc, #96]	@ (8002b70 <MX_TIM2_Init+0x94>)
 8002b0e:	4a19      	ldr	r2, [pc, #100]	@ (8002b74 <MX_TIM2_Init+0x98>)
 8002b10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b12:	4b17      	ldr	r3, [pc, #92]	@ (8002b70 <MX_TIM2_Init+0x94>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b18:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <MX_TIM2_Init+0x94>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b1e:	4814      	ldr	r0, [pc, #80]	@ (8002b70 <MX_TIM2_Init+0x94>)
 8002b20:	f004 fb86 	bl	8007230 <HAL_TIM_Base_Init>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002b2a:	f000 fa37 	bl	8002f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b34:	f107 0308 	add.w	r3, r7, #8
 8002b38:	4619      	mov	r1, r3
 8002b3a:	480d      	ldr	r0, [pc, #52]	@ (8002b70 <MX_TIM2_Init+0x94>)
 8002b3c:	f004 fd57 	bl	80075ee <HAL_TIM_ConfigClockSource>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002b46:	f000 fa29 	bl	8002f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b52:	463b      	mov	r3, r7
 8002b54:	4619      	mov	r1, r3
 8002b56:	4806      	ldr	r0, [pc, #24]	@ (8002b70 <MX_TIM2_Init+0x94>)
 8002b58:	f004 ff7e 	bl	8007a58 <HAL_TIMEx_MasterConfigSynchronization>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002b62:	f000 fa1b 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20025dc8 	.word	0x20025dc8
 8002b74:	000f423f 	.word	0x000f423f

08002b78 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b7e:	f107 0308 	add.w	r3, r7, #8
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b8c:	463b      	mov	r3, r7
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b94:	4b1c      	ldr	r3, [pc, #112]	@ (8002c08 <MX_TIM5_Init+0x90>)
 8002b96:	4a1d      	ldr	r2, [pc, #116]	@ (8002c0c <MX_TIM5_Init+0x94>)
 8002b98:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c08 <MX_TIM5_Init+0x90>)
 8002b9c:	2253      	movs	r2, #83	@ 0x53
 8002b9e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba0:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <MX_TIM5_Init+0x90>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 249999;
 8002ba6:	4b18      	ldr	r3, [pc, #96]	@ (8002c08 <MX_TIM5_Init+0x90>)
 8002ba8:	4a19      	ldr	r2, [pc, #100]	@ (8002c10 <MX_TIM5_Init+0x98>)
 8002baa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bac:	4b16      	ldr	r3, [pc, #88]	@ (8002c08 <MX_TIM5_Init+0x90>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb2:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <MX_TIM5_Init+0x90>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002bb8:	4813      	ldr	r0, [pc, #76]	@ (8002c08 <MX_TIM5_Init+0x90>)
 8002bba:	f004 fb39 	bl	8007230 <HAL_TIM_Base_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8002bc4:	f000 f9ea 	bl	8002f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002bce:	f107 0308 	add.w	r3, r7, #8
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	480c      	ldr	r0, [pc, #48]	@ (8002c08 <MX_TIM5_Init+0x90>)
 8002bd6:	f004 fd0a 	bl	80075ee <HAL_TIM_ConfigClockSource>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8002be0:	f000 f9dc 	bl	8002f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be4:	2300      	movs	r3, #0
 8002be6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bec:	463b      	mov	r3, r7
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4805      	ldr	r0, [pc, #20]	@ (8002c08 <MX_TIM5_Init+0x90>)
 8002bf2:	f004 ff31 	bl	8007a58 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8002bfc:	f000 f9ce 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002c00:	bf00      	nop
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20025e10 	.word	0x20025e10
 8002c0c:	40000c00 	.word	0x40000c00
 8002c10:	0003d08f 	.word	0x0003d08f

08002c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08e      	sub	sp, #56	@ 0x38
 8002c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	60da      	str	r2, [r3, #12]
 8002c28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	623b      	str	r3, [r7, #32]
 8002c2e:	4bb3      	ldr	r3, [pc, #716]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	4ab2      	ldr	r2, [pc, #712]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002c34:	f043 0304 	orr.w	r3, r3, #4
 8002c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3a:	4bb0      	ldr	r3, [pc, #704]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	623b      	str	r3, [r7, #32]
 8002c44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	4bac      	ldr	r3, [pc, #688]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	4aab      	ldr	r2, [pc, #684]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002c50:	f043 0320 	orr.w	r3, r3, #32
 8002c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c56:	4ba9      	ldr	r3, [pc, #676]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	61fb      	str	r3, [r7, #28]
 8002c60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	4ba5      	ldr	r3, [pc, #660]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	4aa4      	ldr	r2, [pc, #656]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c72:	4ba2      	ldr	r3, [pc, #648]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7a:	61bb      	str	r3, [r7, #24]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	4b9e      	ldr	r3, [pc, #632]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	4a9d      	ldr	r2, [pc, #628]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8e:	4b9b      	ldr	r3, [pc, #620]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	4b97      	ldr	r3, [pc, #604]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	4a96      	ldr	r2, [pc, #600]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002caa:	4b94      	ldr	r3, [pc, #592]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b90      	ldr	r3, [pc, #576]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	4a8f      	ldr	r2, [pc, #572]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002cc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc6:	4b8d      	ldr	r3, [pc, #564]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	4b89      	ldr	r3, [pc, #548]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	4a88      	ldr	r2, [pc, #544]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002cdc:	f043 0310 	orr.w	r3, r3, #16
 8002ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce2:	4b86      	ldr	r3, [pc, #536]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	4b82      	ldr	r3, [pc, #520]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	4a81      	ldr	r2, [pc, #516]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002cf8:	f043 0308 	orr.w	r3, r3, #8
 8002cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfe:	4b7f      	ldr	r3, [pc, #508]	@ (8002efc <MX_GPIO_Init+0x2e8>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2116      	movs	r1, #22
 8002d0e:	487c      	ldr	r0, [pc, #496]	@ (8002f00 <MX_GPIO_Init+0x2ec>)
 8002d10:	f001 fd72 	bl	80047f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002d14:	2200      	movs	r2, #0
 8002d16:	2180      	movs	r1, #128	@ 0x80
 8002d18:	487a      	ldr	r0, [pc, #488]	@ (8002f04 <MX_GPIO_Init+0x2f0>)
 8002d1a:	f001 fd6d 	bl	80047f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002d24:	4878      	ldr	r0, [pc, #480]	@ (8002f08 <MX_GPIO_Init+0x2f4>)
 8002d26:	f001 fd67 	bl	80047f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002d30:	4876      	ldr	r0, [pc, #472]	@ (8002f0c <MX_GPIO_Init+0x2f8>)
 8002d32:	f001 fd61 	bl	80047f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002d36:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d44:	2303      	movs	r3, #3
 8002d46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d48:	230c      	movs	r3, #12
 8002d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d50:	4619      	mov	r1, r3
 8002d52:	486f      	ldr	r0, [pc, #444]	@ (8002f10 <MX_GPIO_Init+0x2fc>)
 8002d54:	f001 fa98 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d64:	2303      	movs	r3, #3
 8002d66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d68:	230c      	movs	r3, #12
 8002d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d70:	4619      	mov	r1, r3
 8002d72:	4863      	ldr	r0, [pc, #396]	@ (8002f00 <MX_GPIO_Init+0x2ec>)
 8002d74:	f001 fa88 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002d78:	2316      	movs	r3, #22
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d84:	2300      	movs	r3, #0
 8002d86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	485c      	ldr	r0, [pc, #368]	@ (8002f00 <MX_GPIO_Init+0x2ec>)
 8002d90:	f001 fa7a 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d94:	2301      	movs	r3, #1
 8002d96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002da6:	4619      	mov	r1, r3
 8002da8:	4856      	ldr	r0, [pc, #344]	@ (8002f04 <MX_GPIO_Init+0x2f0>)
 8002daa:	f001 fa6d 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002dae:	f248 0306 	movw	r3, #32774	@ 0x8006
 8002db2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002db4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	484f      	ldr	r0, [pc, #316]	@ (8002f04 <MX_GPIO_Init+0x2f0>)
 8002dc6:	f001 fa5f 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002dca:	2380      	movs	r3, #128	@ 0x80
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dde:	4619      	mov	r1, r3
 8002de0:	4848      	ldr	r0, [pc, #288]	@ (8002f04 <MX_GPIO_Init+0x2f0>)
 8002de2:	f001 fa51 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002de6:	2320      	movs	r3, #32
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002dea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002dee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4841      	ldr	r0, [pc, #260]	@ (8002f00 <MX_GPIO_Init+0x2ec>)
 8002dfc:	f001 fa44 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002e00:	2304      	movs	r3, #4
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e04:	2300      	movs	r3, #0
 8002e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002e0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e10:	4619      	mov	r1, r3
 8002e12:	4840      	ldr	r0, [pc, #256]	@ (8002f14 <MX_GPIO_Init+0x300>)
 8002e14:	f001 fa38 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002e18:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e26:	2303      	movs	r3, #3
 8002e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e32:	4619      	mov	r1, r3
 8002e34:	4835      	ldr	r0, [pc, #212]	@ (8002f0c <MX_GPIO_Init+0x2f8>)
 8002e36:	f001 fa27 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002e3a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002e3e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e4c:	230c      	movs	r3, #12
 8002e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e54:	4619      	mov	r1, r3
 8002e56:	4830      	ldr	r0, [pc, #192]	@ (8002f18 <MX_GPIO_Init+0x304>)
 8002e58:	f001 fa16 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002e5c:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002e6e:	230c      	movs	r3, #12
 8002e70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e76:	4619      	mov	r1, r3
 8002e78:	4826      	ldr	r0, [pc, #152]	@ (8002f14 <MX_GPIO_Init+0x300>)
 8002e7a:	f001 fa05 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002e7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e84:	2300      	movs	r3, #0
 8002e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e90:	4619      	mov	r1, r3
 8002e92:	4820      	ldr	r0, [pc, #128]	@ (8002f14 <MX_GPIO_Init+0x300>)
 8002e94:	f001 f9f8 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002e98:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002eaa:	230c      	movs	r3, #12
 8002eac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4814      	ldr	r0, [pc, #80]	@ (8002f08 <MX_GPIO_Init+0x2f4>)
 8002eb6:	f001 f9e7 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002eba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ecc:	4619      	mov	r1, r3
 8002ece:	480e      	ldr	r0, [pc, #56]	@ (8002f08 <MX_GPIO_Init+0x2f4>)
 8002ed0:	f001 f9da 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002ed4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eda:	2301      	movs	r3, #1
 8002edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eea:	4619      	mov	r1, r3
 8002eec:	4806      	ldr	r0, [pc, #24]	@ (8002f08 <MX_GPIO_Init+0x2f4>)
 8002eee:	f001 f9cb 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002ef2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef8:	e010      	b.n	8002f1c <MX_GPIO_Init+0x308>
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40020800 	.word	0x40020800
 8002f04:	40020000 	.word	0x40020000
 8002f08:	40020c00 	.word	0x40020c00
 8002f0c:	40021800 	.word	0x40021800
 8002f10:	40021400 	.word	0x40021400
 8002f14:	40020400 	.word	0x40020400
 8002f18:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f24:	2303      	movs	r3, #3
 8002f26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f28:	2307      	movs	r3, #7
 8002f2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f30:	4619      	mov	r1, r3
 8002f32:	4817      	ldr	r0, [pc, #92]	@ (8002f90 <MX_GPIO_Init+0x37c>)
 8002f34:	f001 f9a8 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002f38:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f46:	2300      	movs	r3, #0
 8002f48:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4810      	ldr	r0, [pc, #64]	@ (8002f94 <MX_GPIO_Init+0x380>)
 8002f52:	f001 f999 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002f56:	2360      	movs	r3, #96	@ 0x60
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f62:	2303      	movs	r3, #3
 8002f64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f66:	230c      	movs	r3, #12
 8002f68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4809      	ldr	r0, [pc, #36]	@ (8002f98 <MX_GPIO_Init+0x384>)
 8002f72:	f001 f989 	bl	8004288 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002f76:	2200      	movs	r2, #0
 8002f78:	2100      	movs	r1, #0
 8002f7a:	2006      	movs	r0, #6
 8002f7c:	f001 f919 	bl	80041b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002f80:	2006      	movs	r0, #6
 8002f82:	f001 f932 	bl	80041ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f86:	bf00      	nop
 8002f88:	3738      	adds	r7, #56	@ 0x38
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40020000 	.word	0x40020000
 8002f94:	40021800 	.word	0x40021800
 8002f98:	40020400 	.word	0x40020400

08002f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa0:	b672      	cpsid	i
}
 8002fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <Error_Handler+0x8>

08002fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <HAL_MspInit+0x4c>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8002ff4 <HAL_MspInit+0x4c>)
 8002fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff4 <HAL_MspInit+0x4c>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	4b09      	ldr	r3, [pc, #36]	@ (8002ff4 <HAL_MspInit+0x4c>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	4a08      	ldr	r2, [pc, #32]	@ (8002ff4 <HAL_MspInit+0x4c>)
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fda:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <HAL_MspInit+0x4c>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002fe6:	2007      	movs	r0, #7
 8002fe8:	f001 f8d8 	bl	800419c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40023800 	.word	0x40023800

08002ff8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	@ 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a29      	ldr	r2, [pc, #164]	@ (80030bc <HAL_I2C_MspInit+0xc4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d14b      	bne.n	80030b2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	4b28      	ldr	r3, [pc, #160]	@ (80030c0 <HAL_I2C_MspInit+0xc8>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	4a27      	ldr	r2, [pc, #156]	@ (80030c0 <HAL_I2C_MspInit+0xc8>)
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	6313      	str	r3, [r2, #48]	@ 0x30
 800302a:	4b25      	ldr	r3, [pc, #148]	@ (80030c0 <HAL_I2C_MspInit+0xc8>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	4b21      	ldr	r3, [pc, #132]	@ (80030c0 <HAL_I2C_MspInit+0xc8>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	4a20      	ldr	r2, [pc, #128]	@ (80030c0 <HAL_I2C_MspInit+0xc8>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6313      	str	r3, [r2, #48]	@ 0x30
 8003046:	4b1e      	ldr	r3, [pc, #120]	@ (80030c0 <HAL_I2C_MspInit+0xc8>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003052:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003058:	2312      	movs	r3, #18
 800305a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003060:	2300      	movs	r3, #0
 8003062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003064:	2304      	movs	r3, #4
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4619      	mov	r1, r3
 800306e:	4815      	ldr	r0, [pc, #84]	@ (80030c4 <HAL_I2C_MspInit+0xcc>)
 8003070:	f001 f90a 	bl	8004288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003074:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800307a:	2312      	movs	r3, #18
 800307c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003082:	2300      	movs	r3, #0
 8003084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003086:	2304      	movs	r3, #4
 8003088:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800308a:	f107 0314 	add.w	r3, r7, #20
 800308e:	4619      	mov	r1, r3
 8003090:	480d      	ldr	r0, [pc, #52]	@ (80030c8 <HAL_I2C_MspInit+0xd0>)
 8003092:	f001 f8f9 	bl	8004288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <HAL_I2C_MspInit+0xc8>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	4a08      	ldr	r2, [pc, #32]	@ (80030c0 <HAL_I2C_MspInit+0xc8>)
 80030a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a6:	4b06      	ldr	r3, [pc, #24]	@ (80030c0 <HAL_I2C_MspInit+0xc8>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80030b2:	bf00      	nop
 80030b4:	3728      	adds	r7, #40	@ 0x28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40005c00 	.word	0x40005c00
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020800 	.word	0x40020800
 80030c8:	40020000 	.word	0x40020000

080030cc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b09a      	sub	sp, #104	@ 0x68
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030e8:	2230      	movs	r2, #48	@ 0x30
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f004 fed4 	bl	8007e9a <memset>
  if(hltdc->Instance==LTDC)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a82      	ldr	r2, [pc, #520]	@ (8003300 <HAL_LTDC_MspInit+0x234>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	f040 80fc 	bne.w	80032f6 <HAL_LTDC_MspInit+0x22a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80030fe:	2308      	movs	r3, #8
 8003100:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 336;
 8003102:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003106:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8003108:	2307      	movs	r3, #7
 800310a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800310c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003110:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003116:	4618      	mov	r0, r3
 8003118:	f003 fb6a 	bl	80067f0 <HAL_RCCEx_PeriphCLKConfig>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_LTDC_MspInit+0x5a>
    {
      Error_Handler();
 8003122:	f7ff ff3b 	bl	8002f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
 800312a:	4b76      	ldr	r3, [pc, #472]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312e:	4a75      	ldr	r2, [pc, #468]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 8003130:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003134:	6453      	str	r3, [r2, #68]	@ 0x44
 8003136:	4b73      	ldr	r3, [pc, #460]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800313e:	623b      	str	r3, [r7, #32]
 8003140:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	4b6f      	ldr	r3, [pc, #444]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	4a6e      	ldr	r2, [pc, #440]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 800314c:	f043 0320 	orr.w	r3, r3, #32
 8003150:	6313      	str	r3, [r2, #48]	@ 0x30
 8003152:	4b6c      	ldr	r3, [pc, #432]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	4b68      	ldr	r3, [pc, #416]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	4a67      	ldr	r2, [pc, #412]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6313      	str	r3, [r2, #48]	@ 0x30
 800316e:	4b65      	ldr	r3, [pc, #404]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	4b61      	ldr	r3, [pc, #388]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	4a60      	ldr	r2, [pc, #384]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	6313      	str	r3, [r2, #48]	@ 0x30
 800318a:	4b5e      	ldr	r3, [pc, #376]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	4b5a      	ldr	r3, [pc, #360]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319e:	4a59      	ldr	r2, [pc, #356]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 80031a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031a6:	4b57      	ldr	r3, [pc, #348]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	4b53      	ldr	r3, [pc, #332]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	4a52      	ldr	r2, [pc, #328]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 80031bc:	f043 0304 	orr.w	r3, r3, #4
 80031c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031c2:	4b50      	ldr	r3, [pc, #320]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d6:	4a4b      	ldr	r2, [pc, #300]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 80031d8:	f043 0308 	orr.w	r3, r3, #8
 80031dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031de:	4b49      	ldr	r3, [pc, #292]	@ (8003304 <HAL_LTDC_MspInit+0x238>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80031ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031ee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f0:	2302      	movs	r3, #2
 80031f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f8:	2300      	movs	r3, #0
 80031fa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031fc:	230e      	movs	r3, #14
 80031fe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003200:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003204:	4619      	mov	r1, r3
 8003206:	4840      	ldr	r0, [pc, #256]	@ (8003308 <HAL_LTDC_MspInit+0x23c>)
 8003208:	f001 f83e 	bl	8004288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800320c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003210:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003212:	2302      	movs	r3, #2
 8003214:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321a:	2300      	movs	r3, #0
 800321c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800321e:	230e      	movs	r3, #14
 8003220:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003222:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003226:	4619      	mov	r1, r3
 8003228:	4838      	ldr	r0, [pc, #224]	@ (800330c <HAL_LTDC_MspInit+0x240>)
 800322a:	f001 f82d 	bl	8004288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800322e:	2303      	movs	r3, #3
 8003230:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003232:	2302      	movs	r3, #2
 8003234:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	2300      	movs	r3, #0
 8003238:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323a:	2300      	movs	r3, #0
 800323c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800323e:	2309      	movs	r3, #9
 8003240:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003242:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003246:	4619      	mov	r1, r3
 8003248:	4831      	ldr	r0, [pc, #196]	@ (8003310 <HAL_LTDC_MspInit+0x244>)
 800324a:	f001 f81d 	bl	8004288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800324e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003252:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003254:	2302      	movs	r3, #2
 8003256:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325c:	2300      	movs	r3, #0
 800325e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003260:	230e      	movs	r3, #14
 8003262:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003264:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003268:	4619      	mov	r1, r3
 800326a:	4829      	ldr	r0, [pc, #164]	@ (8003310 <HAL_LTDC_MspInit+0x244>)
 800326c:	f001 f80c 	bl	8004288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003270:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8003274:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	2302      	movs	r3, #2
 8003278:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327e:	2300      	movs	r3, #0
 8003280:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003282:	230e      	movs	r3, #14
 8003284:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003286:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800328a:	4619      	mov	r1, r3
 800328c:	4821      	ldr	r0, [pc, #132]	@ (8003314 <HAL_LTDC_MspInit+0x248>)
 800328e:	f000 fffb 	bl	8004288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003292:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003296:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003298:	2302      	movs	r3, #2
 800329a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a0:	2300      	movs	r3, #0
 80032a2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032a4:	230e      	movs	r3, #14
 80032a6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80032ac:	4619      	mov	r1, r3
 80032ae:	481a      	ldr	r0, [pc, #104]	@ (8003318 <HAL_LTDC_MspInit+0x24c>)
 80032b0:	f000 ffea 	bl	8004288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80032b4:	2348      	movs	r3, #72	@ 0x48
 80032b6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c0:	2300      	movs	r3, #0
 80032c2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032c4:	230e      	movs	r3, #14
 80032c6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80032cc:	4619      	mov	r1, r3
 80032ce:	4813      	ldr	r0, [pc, #76]	@ (800331c <HAL_LTDC_MspInit+0x250>)
 80032d0:	f000 ffda 	bl	8004288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80032d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80032d8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	2300      	movs	r3, #0
 80032e4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80032e6:	2309      	movs	r3, #9
 80032e8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80032ee:	4619      	mov	r1, r3
 80032f0:	4808      	ldr	r0, [pc, #32]	@ (8003314 <HAL_LTDC_MspInit+0x248>)
 80032f2:	f000 ffc9 	bl	8004288 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80032f6:	bf00      	nop
 80032f8:	3768      	adds	r7, #104	@ 0x68
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40016800 	.word	0x40016800
 8003304:	40023800 	.word	0x40023800
 8003308:	40021400 	.word	0x40021400
 800330c:	40020000 	.word	0x40020000
 8003310:	40020400 	.word	0x40020400
 8003314:	40021800 	.word	0x40021800
 8003318:	40020800 	.word	0x40020800
 800331c:	40020c00 	.word	0x40020c00

08003320 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0b      	ldr	r2, [pc, #44]	@ (800335c <HAL_RNG_MspInit+0x3c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d10d      	bne.n	800334e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <HAL_RNG_MspInit+0x40>)
 8003338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333a:	4a09      	ldr	r2, [pc, #36]	@ (8003360 <HAL_RNG_MspInit+0x40>)
 800333c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003340:	6353      	str	r3, [r2, #52]	@ 0x34
 8003342:	4b07      	ldr	r3, [pc, #28]	@ (8003360 <HAL_RNG_MspInit+0x40>)
 8003344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	50060800 	.word	0x50060800
 8003360:	40023800 	.word	0x40023800

08003364 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	@ 0x28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a19      	ldr	r2, [pc, #100]	@ (80033e8 <HAL_SPI_MspInit+0x84>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d12c      	bne.n	80033e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	4b18      	ldr	r3, [pc, #96]	@ (80033ec <HAL_SPI_MspInit+0x88>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	4a17      	ldr	r2, [pc, #92]	@ (80033ec <HAL_SPI_MspInit+0x88>)
 8003390:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003394:	6453      	str	r3, [r2, #68]	@ 0x44
 8003396:	4b15      	ldr	r3, [pc, #84]	@ (80033ec <HAL_SPI_MspInit+0x88>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <HAL_SPI_MspInit+0x88>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	4a10      	ldr	r2, [pc, #64]	@ (80033ec <HAL_SPI_MspInit+0x88>)
 80033ac:	f043 0320 	orr.w	r3, r3, #32
 80033b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b2:	4b0e      	ldr	r3, [pc, #56]	@ (80033ec <HAL_SPI_MspInit+0x88>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80033be:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80033c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	2302      	movs	r3, #2
 80033c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	2300      	movs	r3, #0
 80033ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80033d0:	2305      	movs	r3, #5
 80033d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033d4:	f107 0314 	add.w	r3, r7, #20
 80033d8:	4619      	mov	r1, r3
 80033da:	4805      	ldr	r0, [pc, #20]	@ (80033f0 <HAL_SPI_MspInit+0x8c>)
 80033dc:	f000 ff54 	bl	8004288 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80033e0:	bf00      	nop
 80033e2:	3728      	adds	r7, #40	@ 0x28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40015000 	.word	0x40015000
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40021400 	.word	0x40021400

080033f4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a08      	ldr	r2, [pc, #32]	@ (8003424 <HAL_SPI_MspDeInit+0x30>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10a      	bne.n	800341c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003406:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <HAL_SPI_MspDeInit+0x34>)
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	4a07      	ldr	r2, [pc, #28]	@ (8003428 <HAL_SPI_MspDeInit+0x34>)
 800340c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003410:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003412:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003416:	4805      	ldr	r0, [pc, #20]	@ (800342c <HAL_SPI_MspDeInit+0x38>)
 8003418:	f001 f8e2 	bl	80045e0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40015000 	.word	0x40015000
 8003428:	40023800 	.word	0x40023800
 800342c:	40021400 	.word	0x40021400

08003430 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003440:	d116      	bne.n	8003470 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	4b1a      	ldr	r3, [pc, #104]	@ (80034b0 <HAL_TIM_Base_MspInit+0x80>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	4a19      	ldr	r2, [pc, #100]	@ (80034b0 <HAL_TIM_Base_MspInit+0x80>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6413      	str	r3, [r2, #64]	@ 0x40
 8003452:	4b17      	ldr	r3, [pc, #92]	@ (80034b0 <HAL_TIM_Base_MspInit+0x80>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800345e:	2200      	movs	r2, #0
 8003460:	2100      	movs	r1, #0
 8003462:	201c      	movs	r0, #28
 8003464:	f000 fea5 	bl	80041b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003468:	201c      	movs	r0, #28
 800346a:	f000 febe 	bl	80041ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800346e:	e01a      	b.n	80034a6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a0f      	ldr	r2, [pc, #60]	@ (80034b4 <HAL_TIM_Base_MspInit+0x84>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d115      	bne.n	80034a6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	4b0c      	ldr	r3, [pc, #48]	@ (80034b0 <HAL_TIM_Base_MspInit+0x80>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	4a0b      	ldr	r2, [pc, #44]	@ (80034b0 <HAL_TIM_Base_MspInit+0x80>)
 8003484:	f043 0308 	orr.w	r3, r3, #8
 8003488:	6413      	str	r3, [r2, #64]	@ 0x40
 800348a:	4b09      	ldr	r3, [pc, #36]	@ (80034b0 <HAL_TIM_Base_MspInit+0x80>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003496:	2200      	movs	r2, #0
 8003498:	2100      	movs	r1, #0
 800349a:	2032      	movs	r0, #50	@ 0x32
 800349c:	f000 fe89 	bl	80041b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80034a0:	2032      	movs	r0, #50	@ 0x32
 80034a2:	f000 fea2 	bl	80041ea <HAL_NVIC_EnableIRQ>
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40000c00 	.word	0x40000c00

080034b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034bc:	bf00      	nop
 80034be:	e7fd      	b.n	80034bc <NMI_Handler+0x4>

080034c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034c4:	bf00      	nop
 80034c6:	e7fd      	b.n	80034c4 <HardFault_Handler+0x4>

080034c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034cc:	bf00      	nop
 80034ce:	e7fd      	b.n	80034cc <MemManage_Handler+0x4>

080034d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <BusFault_Handler+0x4>

080034d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <UsageFault_Handler+0x4>

080034e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800350e:	f000 fcef 	bl	8003ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}

08003516 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800351a:	2001      	movs	r0, #1
 800351c:	f001 f986 	bl	800482c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}

08003524 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003528:	4802      	ldr	r0, [pc, #8]	@ (8003534 <TIM2_IRQHandler+0x10>)
 800352a:	f003 ff70 	bl	800740e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20025dc8 	.word	0x20025dc8

08003538 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800353c:	4802      	ldr	r0, [pc, #8]	@ (8003548 <TIM5_IRQHandler+0x10>)
 800353e:	f003 ff66 	bl	800740e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20025e10 	.word	0x20025e10

0800354c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	2b00      	cmp	r3, #0
 800355c:	db0b      	blt.n	8003576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	f003 021f 	and.w	r2, r3, #31
 8003564:	4907      	ldr	r1, [pc, #28]	@ (8003584 <__NVIC_EnableIRQ+0x38>)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2001      	movs	r0, #1
 800356e:	fa00 f202 	lsl.w	r2, r0, r2
 8003572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e000e100 	.word	0xe000e100

08003588 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 800358e:	f000 f9dd 	bl	800394c <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8003592:	f000 f99d 	bl	80038d0 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003596:	2202      	movs	r2, #2
 8003598:	2103      	movs	r1, #3
 800359a:	2082      	movs	r0, #130	@ 0x82
 800359c:	f000 fa2a 	bl	80039f4 <I2C3_Write>
    HAL_Delay(5);
 80035a0:	2005      	movs	r0, #5
 80035a2:	f000 fcc5 	bl	8003f30 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80035a6:	2200      	movs	r2, #0
 80035a8:	2103      	movs	r1, #3
 80035aa:	2082      	movs	r0, #130	@ 0x82
 80035ac:	f000 fa22 	bl	80039f4 <I2C3_Write>
    HAL_Delay(2);
 80035b0:	2002      	movs	r0, #2
 80035b2:	f000 fcbd 	bl	8003f30 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80035b6:	1cba      	adds	r2, r7, #2
 80035b8:	2302      	movs	r3, #2
 80035ba:	2100      	movs	r1, #0
 80035bc:	2082      	movs	r0, #130	@ 0x82
 80035be:	f000 fa69 	bl	8003a94 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80035c2:	887b      	ldrh	r3, [r7, #2]
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80035c8:	887b      	ldrh	r3, [r7, #2]
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	f640 0211 	movw	r2, #2065	@ 0x811
 80035da:	4293      	cmp	r3, r2
 80035dc:	d001      	beq.n	80035e2 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80035de:	2303      	movs	r3, #3
 80035e0:	e095      	b.n	800370e <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80035e2:	2202      	movs	r2, #2
 80035e4:	2103      	movs	r1, #3
 80035e6:	2082      	movs	r0, #130	@ 0x82
 80035e8:	f000 fa04 	bl	80039f4 <I2C3_Write>
    HAL_Delay(5);
 80035ec:	2005      	movs	r0, #5
 80035ee:	f000 fc9f 	bl	8003f30 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80035f2:	2200      	movs	r2, #0
 80035f4:	2103      	movs	r1, #3
 80035f6:	2082      	movs	r0, #130	@ 0x82
 80035f8:	f000 f9fc 	bl	80039f4 <I2C3_Write>
    HAL_Delay(2);
 80035fc:	2002      	movs	r0, #2
 80035fe:	f000 fc97 	bl	8003f30 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003602:	2004      	movs	r0, #4
 8003604:	f000 f887 	bl	8003716 <STMPE811_Read>
 8003608:	4603      	mov	r3, r0
 800360a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 800360c:	797b      	ldrb	r3, [r7, #5]
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003614:	797b      	ldrb	r3, [r7, #5]
 8003616:	461a      	mov	r2, r3
 8003618:	2104      	movs	r1, #4
 800361a:	2082      	movs	r0, #130	@ 0x82
 800361c:	f000 f9ea 	bl	80039f4 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003620:	2004      	movs	r0, #4
 8003622:	f000 f878 	bl	8003716 <STMPE811_Read>
 8003626:	4603      	mov	r3, r0
 8003628:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800362a:	797b      	ldrb	r3, [r7, #5]
 800362c:	f023 0302 	bic.w	r3, r3, #2
 8003630:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003632:	797b      	ldrb	r3, [r7, #5]
 8003634:	461a      	mov	r2, r3
 8003636:	2104      	movs	r1, #4
 8003638:	2082      	movs	r0, #130	@ 0x82
 800363a:	f000 f9db 	bl	80039f4 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 800363e:	2249      	movs	r2, #73	@ 0x49
 8003640:	2120      	movs	r1, #32
 8003642:	2082      	movs	r0, #130	@ 0x82
 8003644:	f000 f9d6 	bl	80039f4 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8003648:	2002      	movs	r0, #2
 800364a:	f000 fc71 	bl	8003f30 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 800364e:	2201      	movs	r2, #1
 8003650:	2121      	movs	r1, #33	@ 0x21
 8003652:	2082      	movs	r0, #130	@ 0x82
 8003654:	f000 f9ce 	bl	80039f4 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003658:	2017      	movs	r0, #23
 800365a:	f000 f85c 	bl	8003716 <STMPE811_Read>
 800365e:	4603      	mov	r3, r0
 8003660:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8003662:	797b      	ldrb	r3, [r7, #5]
 8003664:	f043 031e 	orr.w	r3, r3, #30
 8003668:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 800366a:	797b      	ldrb	r3, [r7, #5]
 800366c:	461a      	mov	r2, r3
 800366e:	2117      	movs	r1, #23
 8003670:	2082      	movs	r0, #130	@ 0x82
 8003672:	f000 f9bf 	bl	80039f4 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003676:	229a      	movs	r2, #154	@ 0x9a
 8003678:	2141      	movs	r1, #65	@ 0x41
 800367a:	2082      	movs	r0, #130	@ 0x82
 800367c:	f000 f9ba 	bl	80039f4 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8003680:	2201      	movs	r2, #1
 8003682:	214a      	movs	r1, #74	@ 0x4a
 8003684:	2082      	movs	r0, #130	@ 0x82
 8003686:	f000 f9b5 	bl	80039f4 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800368a:	2201      	movs	r2, #1
 800368c:	214b      	movs	r1, #75	@ 0x4b
 800368e:	2082      	movs	r0, #130	@ 0x82
 8003690:	f000 f9b0 	bl	80039f4 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003694:	2200      	movs	r2, #0
 8003696:	214b      	movs	r1, #75	@ 0x4b
 8003698:	2082      	movs	r0, #130	@ 0x82
 800369a:	f000 f9ab 	bl	80039f4 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 800369e:	2201      	movs	r2, #1
 80036a0:	2156      	movs	r1, #86	@ 0x56
 80036a2:	2082      	movs	r0, #130	@ 0x82
 80036a4:	f000 f9a6 	bl	80039f4 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80036a8:	2201      	movs	r2, #1
 80036aa:	2158      	movs	r1, #88	@ 0x58
 80036ac:	2082      	movs	r0, #130	@ 0x82
 80036ae:	f000 f9a1 	bl	80039f4 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80036b2:	2203      	movs	r2, #3
 80036b4:	2140      	movs	r1, #64	@ 0x40
 80036b6:	2082      	movs	r0, #130	@ 0x82
 80036b8:	f000 f99c 	bl	80039f4 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80036bc:	22ff      	movs	r2, #255	@ 0xff
 80036be:	210b      	movs	r1, #11
 80036c0:	2082      	movs	r0, #130	@ 0x82
 80036c2:	f000 f997 	bl	80039f4 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 80036c6:	f000 f8c1 	bl	800384c <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 80036ca:	2009      	movs	r0, #9
 80036cc:	f000 f823 	bl	8003716 <STMPE811_Read>
 80036d0:	4603      	mov	r3, r0
 80036d2:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 80036d4:	797b      	ldrb	r3, [r7, #5]
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 80036dc:	797b      	ldrb	r3, [r7, #5]
 80036de:	461a      	mov	r2, r3
 80036e0:	2109      	movs	r1, #9
 80036e2:	2082      	movs	r0, #130	@ 0x82
 80036e4:	f000 f986 	bl	80039f4 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 80036e8:	200a      	movs	r0, #10
 80036ea:	f000 f814 	bl	8003716 <STMPE811_Read>
 80036ee:	4603      	mov	r3, r0
 80036f0:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 80036f2:	797b      	ldrb	r3, [r7, #5]
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 80036fa:	797b      	ldrb	r3, [r7, #5]
 80036fc:	461a      	mov	r2, r3
 80036fe:	210a      	movs	r1, #10
 8003700:	2082      	movs	r0, #130	@ 0x82
 8003702:	f000 f977 	bl	80039f4 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8003706:	20c8      	movs	r0, #200	@ 0xc8
 8003708:	f000 fc12 	bl	8003f30 <HAL_Delay>

    return STMPE811_State_Ok;
 800370c:	2302      	movs	r3, #2

}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8003720:	f107 020f 	add.w	r2, r7, #15
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	4619      	mov	r1, r3
 8003728:	2082      	movs	r0, #130	@ 0x82
 800372a:	f000 f98d 	bl	8003a48 <I2C3_Read>

    return readData;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	460a      	mov	r2, r1
 8003742:	71fb      	strb	r3, [r7, #7]
 8003744:	4613      	mov	r3, r2
 8003746:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8003748:	79ba      	ldrb	r2, [r7, #6]
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	4619      	mov	r1, r3
 800374e:	2082      	movs	r0, #130	@ 0x82
 8003750:	f000 f950 	bl	80039f4 <I2C3_Write>
}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	799b      	ldrb	r3, [r3, #6]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d117      	bne.n	800379c <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f000 f9b1 	bl	8003ad8 <TM_STMPE811_ReadX>
 8003776:	4603      	mov	r3, r0
 8003778:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800377c:	b29a      	uxth	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	885b      	ldrh	r3, [r3, #2]
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fa04 	bl	8003b94 <TM_STMPE811_ReadY>
 800378c:	4603      	mov	r3, r0
 800378e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003792:	3301      	adds	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	805a      	strh	r2, [r3, #2]
 800379a:	e048      	b.n	800382e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	799b      	ldrb	r3, [r3, #6]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d112      	bne.n	80037ca <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f995 	bl	8003ad8 <TM_STMPE811_ReadX>
 80037ae:	4603      	mov	r3, r0
 80037b0:	461a      	mov	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	885b      	ldrh	r3, [r3, #2]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f9ea 	bl	8003b94 <TM_STMPE811_ReadY>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	805a      	strh	r2, [r3, #2]
 80037c8:	e031      	b.n	800382e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	799b      	ldrb	r3, [r3, #6]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d115      	bne.n	80037fe <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	885b      	ldrh	r3, [r3, #2]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f97e 	bl	8003ad8 <TM_STMPE811_ReadX>
 80037dc:	4603      	mov	r3, r0
 80037de:	461a      	mov	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f9d3 	bl	8003b94 <TM_STMPE811_ReadY>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80037f4:	3301      	adds	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	801a      	strh	r2, [r3, #0]
 80037fc:	e017      	b.n	800382e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	799b      	ldrb	r3, [r3, #6]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d113      	bne.n	800382e <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f964 	bl	8003ad8 <TM_STMPE811_ReadX>
 8003810:	4603      	mov	r3, r0
 8003812:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003816:	b29a      	uxth	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f000 f9b7 	bl	8003b94 <TM_STMPE811_ReadY>
 8003826:	4603      	mov	r3, r0
 8003828:	461a      	mov	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800382e:	2201      	movs	r2, #1
 8003830:	214b      	movs	r1, #75	@ 0x4b
 8003832:	2082      	movs	r0, #130	@ 0x82
 8003834:	f000 f8de 	bl	80039f4 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003838:	2200      	movs	r2, #0
 800383a:	214b      	movs	r1, #75	@ 0x4b
 800383c:	2082      	movs	r0, #130	@ 0x82
 800383e:	f000 f8d9 	bl	80039f4 <I2C3_Write>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	4b14      	ldr	r3, [pc, #80]	@ (80038a8 <enableInterruptSupportForTouch+0x5c>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385a:	4a13      	ldr	r2, [pc, #76]	@ (80038a8 <enableInterruptSupportForTouch+0x5c>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6313      	str	r3, [r2, #48]	@ 0x30
 8003862:	4b11      	ldr	r3, [pc, #68]	@ (80038a8 <enableInterruptSupportForTouch+0x5c>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386e:	1d3b      	adds	r3, r7, #4
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800387c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003880:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003882:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003886:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800388c:	2302      	movs	r3, #2
 800388e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003890:	1d3b      	adds	r3, r7, #4
 8003892:	4619      	mov	r1, r3
 8003894:	4805      	ldr	r0, [pc, #20]	@ (80038ac <enableInterruptSupportForTouch+0x60>)
 8003896:	f000 fcf7 	bl	8004288 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 800389a:	2028      	movs	r0, #40	@ 0x28
 800389c:	f7ff fe56 	bl	800354c <__NVIC_EnableIRQ>

}
 80038a0:	bf00      	nop
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40023800 	.word	0x40023800
 80038ac:	40020000 	.word	0x40020000

080038b0 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80038b4:	4b05      	ldr	r3, [pc, #20]	@ (80038cc <verifyHAL_I2C_IS_OKAY+0x1c>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80038bc:	bf00      	nop
 80038be:	e7fd      	b.n	80038bc <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20025eac 	.word	0x20025eac

080038d0 <I2C3_Init>:

static void I2C3_Init()
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4b18      	ldr	r3, [pc, #96]	@ (800393c <I2C3_Init+0x6c>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	4a17      	ldr	r2, [pc, #92]	@ (800393c <I2C3_Init+0x6c>)
 80038e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038e6:	4b15      	ldr	r3, [pc, #84]	@ (800393c <I2C3_Init+0x6c>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80038f2:	4b13      	ldr	r3, [pc, #76]	@ (8003940 <I2C3_Init+0x70>)
 80038f4:	4a13      	ldr	r2, [pc, #76]	@ (8003944 <I2C3_Init+0x74>)
 80038f6:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80038f8:	4b11      	ldr	r3, [pc, #68]	@ (8003940 <I2C3_Init+0x70>)
 80038fa:	4a13      	ldr	r2, [pc, #76]	@ (8003948 <I2C3_Init+0x78>)
 80038fc:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80038fe:	4b10      	ldr	r3, [pc, #64]	@ (8003940 <I2C3_Init+0x70>)
 8003900:	2200      	movs	r2, #0
 8003902:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003904:	4b0e      	ldr	r3, [pc, #56]	@ (8003940 <I2C3_Init+0x70>)
 8003906:	2200      	movs	r2, #0
 8003908:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800390a:	4b0d      	ldr	r3, [pc, #52]	@ (8003940 <I2C3_Init+0x70>)
 800390c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003910:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8003912:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <I2C3_Init+0x70>)
 8003914:	2200      	movs	r2, #0
 8003916:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003918:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <I2C3_Init+0x70>)
 800391a:	2200      	movs	r2, #0
 800391c:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800391e:	4808      	ldr	r0, [pc, #32]	@ (8003940 <I2C3_Init+0x70>)
 8003920:	f000 ff9c 	bl	800485c <HAL_I2C_Init>
 8003924:	4603      	mov	r3, r0
 8003926:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800392e:	bf00      	nop
 8003930:	e7fd      	b.n	800392e <I2C3_Init+0x5e>
    }
    return;
 8003932:	bf00      	nop
}
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	20025e58 	.word	0x20025e58
 8003944:	40005c00 	.word	0x40005c00
 8003948:	000186a0 	.word	0x000186a0

0800394c <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003952:	f107 030c 	add.w	r3, r7, #12
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	609a      	str	r2, [r3, #8]
 800395e:	60da      	str	r2, [r3, #12]
 8003960:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	4b20      	ldr	r3, [pc, #128]	@ (80039e8 <I2C3_MspInit+0x9c>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	4a1f      	ldr	r2, [pc, #124]	@ (80039e8 <I2C3_MspInit+0x9c>)
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	6313      	str	r3, [r2, #48]	@ 0x30
 8003972:	4b1d      	ldr	r3, [pc, #116]	@ (80039e8 <I2C3_MspInit+0x9c>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	60bb      	str	r3, [r7, #8]
 800397c:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	4b19      	ldr	r3, [pc, #100]	@ (80039e8 <I2C3_MspInit+0x9c>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	4a18      	ldr	r2, [pc, #96]	@ (80039e8 <I2C3_MspInit+0x9c>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	6313      	str	r3, [r2, #48]	@ 0x30
 800398e:	4b16      	ldr	r3, [pc, #88]	@ (80039e8 <I2C3_MspInit+0x9c>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800399a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800399e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039a0:	2312      	movs	r3, #18
 80039a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80039ac:	2304      	movs	r3, #4
 80039ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80039b0:	f107 030c 	add.w	r3, r7, #12
 80039b4:	4619      	mov	r1, r3
 80039b6:	480d      	ldr	r0, [pc, #52]	@ (80039ec <I2C3_MspInit+0xa0>)
 80039b8:	f000 fc66 	bl	8004288 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80039bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039c2:	2312      	movs	r3, #18
 80039c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80039ce:	2304      	movs	r3, #4
 80039d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80039d2:	f107 030c 	add.w	r3, r7, #12
 80039d6:	4619      	mov	r1, r3
 80039d8:	4805      	ldr	r0, [pc, #20]	@ (80039f0 <I2C3_MspInit+0xa4>)
 80039da:	f000 fc55 	bl	8004288 <HAL_GPIO_Init>
    
}
 80039de:	bf00      	nop
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40020800 	.word	0x40020800
 80039f0:	40020000 	.word	0x40020000

080039f4 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af04      	add	r7, sp, #16
 80039fa:	4603      	mov	r3, r0
 80039fc:	80fb      	strh	r3, [r7, #6]
 80039fe:	460b      	mov	r3, r1
 8003a00:	717b      	strb	r3, [r7, #5]
 8003a02:	4613      	mov	r3, r2
 8003a04:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003a06:	793b      	ldrb	r3, [r7, #4]
 8003a08:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003a0a:	797b      	ldrb	r3, [r7, #5]
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	88f9      	ldrh	r1, [r7, #6]
 8003a10:	4b0a      	ldr	r3, [pc, #40]	@ (8003a3c <I2C3_Write+0x48>)
 8003a12:	9302      	str	r3, [sp, #8]
 8003a14:	2301      	movs	r3, #1
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	f107 030f 	add.w	r3, r7, #15
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2301      	movs	r3, #1
 8003a20:	4807      	ldr	r0, [pc, #28]	@ (8003a40 <I2C3_Write+0x4c>)
 8003a22:	f001 f85f 	bl	8004ae4 <HAL_I2C_Mem_Write>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <I2C3_Write+0x50>)
 8003a2c:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003a2e:	f7ff ff3f 	bl	80038b0 <verifyHAL_I2C_IS_OKAY>
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	0003d090 	.word	0x0003d090
 8003a40:	20025e58 	.word	0x20025e58
 8003a44:	20025eac 	.word	0x20025eac

08003a48 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af04      	add	r7, sp, #16
 8003a4e:	4603      	mov	r3, r0
 8003a50:	603a      	str	r2, [r7, #0]
 8003a52:	71fb      	strb	r3, [r7, #7]
 8003a54:	460b      	mov	r3, r1
 8003a56:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	b299      	uxth	r1, r3
 8003a5c:	79bb      	ldrb	r3, [r7, #6]
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	4b09      	ldr	r3, [pc, #36]	@ (8003a88 <I2C3_Read+0x40>)
 8003a62:	9302      	str	r3, [sp, #8]
 8003a64:	2301      	movs	r3, #1
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	4807      	ldr	r0, [pc, #28]	@ (8003a8c <I2C3_Read+0x44>)
 8003a70:	f001 f932 	bl	8004cd8 <HAL_I2C_Mem_Read>
 8003a74:	4603      	mov	r3, r0
 8003a76:	461a      	mov	r2, r3
 8003a78:	4b05      	ldr	r3, [pc, #20]	@ (8003a90 <I2C3_Read+0x48>)
 8003a7a:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003a7c:	f7ff ff18 	bl	80038b0 <verifyHAL_I2C_IS_OKAY>
}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	0003d090 	.word	0x0003d090
 8003a8c:	20025e58 	.word	0x20025e58
 8003a90:	20025eac 	.word	0x20025eac

08003a94 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af04      	add	r7, sp, #16
 8003a9a:	603a      	str	r2, [r7, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	71bb      	strb	r3, [r7, #6]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	b299      	uxth	r1, r3
 8003aae:	79bb      	ldrb	r3, [r7, #6]
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	4b07      	ldr	r3, [pc, #28]	@ (8003ad0 <I2C3_MulitByteRead+0x3c>)
 8003ab4:	9302      	str	r3, [sp, #8]
 8003ab6:	88bb      	ldrh	r3, [r7, #4]
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4804      	ldr	r0, [pc, #16]	@ (8003ad4 <I2C3_MulitByteRead+0x40>)
 8003ac2:	f001 f909 	bl	8004cd8 <HAL_I2C_Mem_Read>
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	0003d090 	.word	0x0003d090
 8003ad4:	20025e58 	.word	0x20025e58

08003ad8 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8003ae2:	204d      	movs	r0, #77	@ 0x4d
 8003ae4:	f7ff fe17 	bl	8003716 <STMPE811_Read>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003aec:	204e      	movs	r0, #78	@ 0x4e
 8003aee:	f7ff fe12 	bl	8003716 <STMPE811_Read>
 8003af2:	4603      	mov	r3, r0
 8003af4:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003af6:	7a7b      	ldrb	r3, [r7, #9]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	b21a      	sxth	r2, r3
 8003afc:	7a3b      	ldrb	r3, [r7, #8]
 8003afe:	b21b      	sxth	r3, r3
 8003b00:	4313      	orrs	r3, r2
 8003b02:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003b04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b08:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	dc06      	bgt.n	8003b1e <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8003b10:	89fb      	ldrh	r3, [r7, #14]
 8003b12:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003b16:	330c      	adds	r3, #12
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	81fb      	strh	r3, [r7, #14]
 8003b1c:	e005      	b.n	8003b2a <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8003b1e:	89fb      	ldrh	r3, [r7, #14]
 8003b20:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003b24:	3308      	adds	r3, #8
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003b2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b2e:	4a18      	ldr	r2, [pc, #96]	@ (8003b90 <TM_STMPE811_ReadX+0xb8>)
 8003b30:	fb82 1203 	smull	r1, r2, r2, r3
 8003b34:	441a      	add	r2, r3
 8003b36:	10d2      	asrs	r2, r2, #3
 8003b38:	17db      	asrs	r3, r3, #31
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003b3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b42:	2bef      	cmp	r3, #239	@ 0xef
 8003b44:	dd02      	ble.n	8003b4c <TM_STMPE811_ReadX+0x74>
        val = 239;
 8003b46:	23ef      	movs	r3, #239	@ 0xef
 8003b48:	81fb      	strh	r3, [r7, #14]
 8003b4a:	e005      	b.n	8003b58 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003b4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	da01      	bge.n	8003b58 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003b58:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	dd05      	ble.n	8003b6e <TM_STMPE811_ReadX+0x96>
 8003b62:	89fa      	ldrh	r2, [r7, #14]
 8003b64:	88fb      	ldrh	r3, [r7, #6]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	b21b      	sxth	r3, r3
 8003b6c:	e004      	b.n	8003b78 <TM_STMPE811_ReadX+0xa0>
 8003b6e:	89fb      	ldrh	r3, [r7, #14]
 8003b70:	88fa      	ldrh	r2, [r7, #6]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	b21b      	sxth	r3, r3
 8003b78:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003b7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	dd01      	ble.n	8003b86 <TM_STMPE811_ReadX+0xae>
        return val;
 8003b82:	89fb      	ldrh	r3, [r7, #14]
 8003b84:	e000      	b.n	8003b88 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003b86:	88fb      	ldrh	r3, [r7, #6]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	88888889 	.word	0x88888889

08003b94 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003b9e:	204f      	movs	r0, #79	@ 0x4f
 8003ba0:	f7ff fdb9 	bl	8003716 <STMPE811_Read>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003ba8:	2050      	movs	r0, #80	@ 0x50
 8003baa:	f7ff fdb4 	bl	8003716 <STMPE811_Read>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003bb2:	7a7b      	ldrb	r3, [r7, #9]
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	b21a      	sxth	r2, r3
 8003bb8:	7a3b      	ldrb	r3, [r7, #8]
 8003bba:	b21b      	sxth	r3, r3
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003bc0:	89fb      	ldrh	r3, [r7, #14]
 8003bc2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003bca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bce:	4a19      	ldr	r2, [pc, #100]	@ (8003c34 <TM_STMPE811_ReadY+0xa0>)
 8003bd0:	fb82 1203 	smull	r1, r2, r2, r3
 8003bd4:	1052      	asrs	r2, r2, #1
 8003bd6:	17db      	asrs	r3, r3, #31
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003bdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	dc02      	bgt.n	8003bea <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	81fb      	strh	r3, [r7, #14]
 8003be8:	e007      	b.n	8003bfa <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003bea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bee:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003bf2:	db02      	blt.n	8003bfa <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003bf4:	f240 133f 	movw	r3, #319	@ 0x13f
 8003bf8:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003bfa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	dd05      	ble.n	8003c10 <TM_STMPE811_ReadY+0x7c>
 8003c04:	89fa      	ldrh	r2, [r7, #14]
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	b21b      	sxth	r3, r3
 8003c0e:	e004      	b.n	8003c1a <TM_STMPE811_ReadY+0x86>
 8003c10:	89fb      	ldrh	r3, [r7, #14]
 8003c12:	88fa      	ldrh	r2, [r7, #6]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	b21b      	sxth	r3, r3
 8003c1a:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003c1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	dd01      	ble.n	8003c28 <TM_STMPE811_ReadY+0x94>
        return val;
 8003c24:	89fb      	ldrh	r3, [r7, #14]
 8003c26:	e000      	b.n	8003c2a <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8003c28:	88fb      	ldrh	r3, [r7, #6]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	2e8ba2e9 	.word	0x2e8ba2e9

08003c38 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
}
 8003c3c:	bf00      	nop
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <_getpid>:

int _getpid(void)
{
 8003c46:	b480      	push	{r7}
 8003c48:	af00      	add	r7, sp, #0
  return 1;
 8003c4a:	2301      	movs	r3, #1
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <_kill>:

int _kill(int pid, int sig)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c60:	f004 f96a 	bl	8007f38 <__errno>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2216      	movs	r2, #22
 8003c68:	601a      	str	r2, [r3, #0]
  return -1;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_exit>:

void _exit (int status)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c7e:	f04f 31ff 	mov.w	r1, #4294967295
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff ffe7 	bl	8003c56 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <_exit+0x12>

08003c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e00a      	b.n	8003cb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c9e:	f3af 8000 	nop.w
 8003ca2:	4601      	mov	r1, r0
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	60ba      	str	r2, [r7, #8]
 8003caa:	b2ca      	uxtb	r2, r1
 8003cac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	dbf0      	blt.n	8003c9e <_read+0x12>
  }

  return len;
 8003cbc:	687b      	ldr	r3, [r7, #4]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	e009      	b.n	8003cec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	60ba      	str	r2, [r7, #8]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	dbf1      	blt.n	8003cd8 <_write+0x12>
  }
  return len;
 8003cf4:	687b      	ldr	r3, [r7, #4]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <_close>:

int _close(int file)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d26:	605a      	str	r2, [r3, #4]
  return 0;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <_isatty>:

int _isatty(int file)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d3e:	2301      	movs	r3, #1
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d70:	4a14      	ldr	r2, [pc, #80]	@ (8003dc4 <_sbrk+0x5c>)
 8003d72:	4b15      	ldr	r3, [pc, #84]	@ (8003dc8 <_sbrk+0x60>)
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d7c:	4b13      	ldr	r3, [pc, #76]	@ (8003dcc <_sbrk+0x64>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d102      	bne.n	8003d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d84:	4b11      	ldr	r3, [pc, #68]	@ (8003dcc <_sbrk+0x64>)
 8003d86:	4a12      	ldr	r2, [pc, #72]	@ (8003dd0 <_sbrk+0x68>)
 8003d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d8a:	4b10      	ldr	r3, [pc, #64]	@ (8003dcc <_sbrk+0x64>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4413      	add	r3, r2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d207      	bcs.n	8003da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d98:	f004 f8ce 	bl	8007f38 <__errno>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	220c      	movs	r2, #12
 8003da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003da2:	f04f 33ff 	mov.w	r3, #4294967295
 8003da6:	e009      	b.n	8003dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003da8:	4b08      	ldr	r3, [pc, #32]	@ (8003dcc <_sbrk+0x64>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dae:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <_sbrk+0x64>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	4a05      	ldr	r2, [pc, #20]	@ (8003dcc <_sbrk+0x64>)
 8003db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dba:	68fb      	ldr	r3, [r7, #12]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20030000 	.word	0x20030000
 8003dc8:	00000400 	.word	0x00000400
 8003dcc:	20025eb0 	.word	0x20025eb0
 8003dd0:	20026008 	.word	0x20026008

08003dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003dd8:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <SystemInit+0x20>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dde:	4a05      	ldr	r2, [pc, #20]	@ (8003df4 <SystemInit+0x20>)
 8003de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003de8:	bf00      	nop
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	e000ed00 	.word	0xe000ed00

08003df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003df8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003dfc:	f7ff ffea 	bl	8003dd4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e00:	480c      	ldr	r0, [pc, #48]	@ (8003e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e02:	490d      	ldr	r1, [pc, #52]	@ (8003e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e04:	4a0d      	ldr	r2, [pc, #52]	@ (8003e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e08:	e002      	b.n	8003e10 <LoopCopyDataInit>

08003e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e0e:	3304      	adds	r3, #4

08003e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e14:	d3f9      	bcc.n	8003e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e16:	4a0a      	ldr	r2, [pc, #40]	@ (8003e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e18:	4c0a      	ldr	r4, [pc, #40]	@ (8003e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e1c:	e001      	b.n	8003e22 <LoopFillZerobss>

08003e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e20:	3204      	adds	r2, #4

08003e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e24:	d3fb      	bcc.n	8003e1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003e26:	f004 f88d 	bl	8007f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e2a:	f7fe fc96 	bl	800275a <main>
  bx  lr    
 8003e2e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003e30:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e38:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003e3c:	0800a32c 	.word	0x0800a32c
  ldr r2, =_sbss
 8003e40:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003e44:	20026004 	.word	0x20026004

08003e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e48:	e7fe      	b.n	8003e48 <ADC_IRQHandler>
	...

08003e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e50:	4b0e      	ldr	r3, [pc, #56]	@ (8003e8c <HAL_Init+0x40>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a0d      	ldr	r2, [pc, #52]	@ (8003e8c <HAL_Init+0x40>)
 8003e56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <HAL_Init+0x40>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0a      	ldr	r2, [pc, #40]	@ (8003e8c <HAL_Init+0x40>)
 8003e62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e68:	4b08      	ldr	r3, [pc, #32]	@ (8003e8c <HAL_Init+0x40>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a07      	ldr	r2, [pc, #28]	@ (8003e8c <HAL_Init+0x40>)
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e74:	2003      	movs	r0, #3
 8003e76:	f000 f991 	bl	800419c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	f000 f808 	bl	8003e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e80:	f7ff f892 	bl	8002fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023c00 	.word	0x40023c00

08003e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e98:	4b12      	ldr	r3, [pc, #72]	@ (8003ee4 <HAL_InitTick+0x54>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b12      	ldr	r3, [pc, #72]	@ (8003ee8 <HAL_InitTick+0x58>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f9b7 	bl	8004222 <HAL_SYSTICK_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e00e      	b.n	8003edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b0f      	cmp	r3, #15
 8003ec2:	d80a      	bhi.n	8003eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ecc:	f000 f971 	bl	80041b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ed0:	4a06      	ldr	r2, [pc, #24]	@ (8003eec <HAL_InitTick+0x5c>)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000010 	.word	0x20000010
 8003ee8:	20000018 	.word	0x20000018
 8003eec:	20000014 	.word	0x20000014

08003ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ef4:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <HAL_IncTick+0x20>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <HAL_IncTick+0x24>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4413      	add	r3, r2
 8003f00:	4a04      	ldr	r2, [pc, #16]	@ (8003f14 <HAL_IncTick+0x24>)
 8003f02:	6013      	str	r3, [r2, #0]
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000018 	.word	0x20000018
 8003f14:	20025eb4 	.word	0x20025eb4

08003f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f1c:	4b03      	ldr	r3, [pc, #12]	@ (8003f2c <HAL_GetTick+0x14>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20025eb4 	.word	0x20025eb4

08003f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f38:	f7ff ffee 	bl	8003f18 <HAL_GetTick>
 8003f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f48:	d005      	beq.n	8003f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f74 <HAL_Delay+0x44>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f56:	bf00      	nop
 8003f58:	f7ff ffde 	bl	8003f18 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d8f7      	bhi.n	8003f58 <HAL_Delay+0x28>
  {
  }
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000018 	.word	0x20000018

08003f78 <__NVIC_SetPriorityGrouping>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f88:	4b0c      	ldr	r3, [pc, #48]	@ (8003fbc <__NVIC_SetPriorityGrouping+0x44>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f94:	4013      	ands	r3, r2
 8003f96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003faa:	4a04      	ldr	r2, [pc, #16]	@ (8003fbc <__NVIC_SetPriorityGrouping+0x44>)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	60d3      	str	r3, [r2, #12]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	e000ed00 	.word	0xe000ed00

08003fc0 <__NVIC_GetPriorityGrouping>:
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fc4:	4b04      	ldr	r3, [pc, #16]	@ (8003fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	0a1b      	lsrs	r3, r3, #8
 8003fca:	f003 0307 	and.w	r3, r3, #7
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	e000ed00 	.word	0xe000ed00

08003fdc <__NVIC_EnableIRQ>:
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	db0b      	blt.n	8004006 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	f003 021f 	and.w	r2, r3, #31
 8003ff4:	4907      	ldr	r1, [pc, #28]	@ (8004014 <__NVIC_EnableIRQ+0x38>)
 8003ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8004002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	e000e100 	.word	0xe000e100

08004018 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004026:	2b00      	cmp	r3, #0
 8004028:	db12      	blt.n	8004050 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	f003 021f 	and.w	r2, r3, #31
 8004030:	490a      	ldr	r1, [pc, #40]	@ (800405c <__NVIC_DisableIRQ+0x44>)
 8004032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	2001      	movs	r0, #1
 800403a:	fa00 f202 	lsl.w	r2, r0, r2
 800403e:	3320      	adds	r3, #32
 8004040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004044:	f3bf 8f4f 	dsb	sy
}
 8004048:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800404a:	f3bf 8f6f 	isb	sy
}
 800404e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	e000e100 	.word	0xe000e100

08004060 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406e:	2b00      	cmp	r3, #0
 8004070:	db0c      	blt.n	800408c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	f003 021f 	and.w	r2, r3, #31
 8004078:	4907      	ldr	r1, [pc, #28]	@ (8004098 <__NVIC_ClearPendingIRQ+0x38>)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2001      	movs	r0, #1
 8004082:	fa00 f202 	lsl.w	r2, r0, r2
 8004086:	3360      	adds	r3, #96	@ 0x60
 8004088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	e000e100 	.word	0xe000e100

0800409c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	6039      	str	r1, [r7, #0]
 80040a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	db0a      	blt.n	80040c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	490c      	ldr	r1, [pc, #48]	@ (80040e8 <__NVIC_SetPriority+0x4c>)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	0112      	lsls	r2, r2, #4
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	440b      	add	r3, r1
 80040c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040c4:	e00a      	b.n	80040dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	4908      	ldr	r1, [pc, #32]	@ (80040ec <__NVIC_SetPriority+0x50>)
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	3b04      	subs	r3, #4
 80040d4:	0112      	lsls	r2, r2, #4
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	440b      	add	r3, r1
 80040da:	761a      	strb	r2, [r3, #24]
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000e100 	.word	0xe000e100
 80040ec:	e000ed00 	.word	0xe000ed00

080040f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b089      	sub	sp, #36	@ 0x24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f1c3 0307 	rsb	r3, r3, #7
 800410a:	2b04      	cmp	r3, #4
 800410c:	bf28      	it	cs
 800410e:	2304      	movcs	r3, #4
 8004110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	3304      	adds	r3, #4
 8004116:	2b06      	cmp	r3, #6
 8004118:	d902      	bls.n	8004120 <NVIC_EncodePriority+0x30>
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3b03      	subs	r3, #3
 800411e:	e000      	b.n	8004122 <NVIC_EncodePriority+0x32>
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004124:	f04f 32ff 	mov.w	r2, #4294967295
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43da      	mvns	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	401a      	ands	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004138:	f04f 31ff 	mov.w	r1, #4294967295
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	fa01 f303 	lsl.w	r3, r1, r3
 8004142:	43d9      	mvns	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004148:	4313      	orrs	r3, r2
         );
}
 800414a:	4618      	mov	r0, r3
 800414c:	3724      	adds	r7, #36	@ 0x24
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3b01      	subs	r3, #1
 8004164:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004168:	d301      	bcc.n	800416e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800416a:	2301      	movs	r3, #1
 800416c:	e00f      	b.n	800418e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800416e:	4a0a      	ldr	r2, [pc, #40]	@ (8004198 <SysTick_Config+0x40>)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3b01      	subs	r3, #1
 8004174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004176:	210f      	movs	r1, #15
 8004178:	f04f 30ff 	mov.w	r0, #4294967295
 800417c:	f7ff ff8e 	bl	800409c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004180:	4b05      	ldr	r3, [pc, #20]	@ (8004198 <SysTick_Config+0x40>)
 8004182:	2200      	movs	r2, #0
 8004184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004186:	4b04      	ldr	r3, [pc, #16]	@ (8004198 <SysTick_Config+0x40>)
 8004188:	2207      	movs	r2, #7
 800418a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	e000e010 	.word	0xe000e010

0800419c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fee7 	bl	8003f78 <__NVIC_SetPriorityGrouping>
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b086      	sub	sp, #24
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	4603      	mov	r3, r0
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	607a      	str	r2, [r7, #4]
 80041be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041c4:	f7ff fefc 	bl	8003fc0 <__NVIC_GetPriorityGrouping>
 80041c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	6978      	ldr	r0, [r7, #20]
 80041d0:	f7ff ff8e 	bl	80040f0 <NVIC_EncodePriority>
 80041d4:	4602      	mov	r2, r0
 80041d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041da:	4611      	mov	r1, r2
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff ff5d 	bl	800409c <__NVIC_SetPriority>
}
 80041e2:	bf00      	nop
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	4603      	mov	r3, r0
 80041f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff feef 	bl	8003fdc <__NVIC_EnableIRQ>
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	4603      	mov	r3, r0
 800420e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff feff 	bl	8004018 <__NVIC_DisableIRQ>
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff ff94 	bl	8004158 <SysTick_Config>
 8004230:	4603      	mov	r3, r0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	4603      	mov	r3, r0
 8004242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff ff09 	bl	8004060 <__NVIC_ClearPendingIRQ>
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	2201      	movs	r2, #1
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8004272:	4a04      	ldr	r2, [pc, #16]	@ (8004284 <HAL_EXTI_ClearPending+0x2c>)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6153      	str	r3, [r2, #20]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	40013c00 	.word	0x40013c00

08004288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004288:	b480      	push	{r7}
 800428a:	b089      	sub	sp, #36	@ 0x24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004296:	2300      	movs	r3, #0
 8004298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	e177      	b.n	8004594 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042a4:	2201      	movs	r2, #1
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4013      	ands	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	429a      	cmp	r2, r3
 80042be:	f040 8166 	bne.w	800458e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d005      	beq.n	80042da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d130      	bne.n	800433c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	2203      	movs	r2, #3
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43db      	mvns	r3, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4013      	ands	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004310:	2201      	movs	r2, #1
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f003 0201 	and.w	r2, r3, #1
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 0303 	and.w	r3, r3, #3
 8004344:	2b03      	cmp	r3, #3
 8004346:	d017      	beq.n	8004378 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	2203      	movs	r2, #3
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d123      	bne.n	80043cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	08da      	lsrs	r2, r3, #3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3208      	adds	r2, #8
 800438c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	220f      	movs	r2, #15
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	08da      	lsrs	r2, r3, #3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3208      	adds	r2, #8
 80043c6:	69b9      	ldr	r1, [r7, #24]
 80043c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	2203      	movs	r2, #3
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 0203 	and.w	r2, r3, #3
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80c0 	beq.w	800458e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	4b66      	ldr	r3, [pc, #408]	@ (80045ac <HAL_GPIO_Init+0x324>)
 8004414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004416:	4a65      	ldr	r2, [pc, #404]	@ (80045ac <HAL_GPIO_Init+0x324>)
 8004418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800441c:	6453      	str	r3, [r2, #68]	@ 0x44
 800441e:	4b63      	ldr	r3, [pc, #396]	@ (80045ac <HAL_GPIO_Init+0x324>)
 8004420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800442a:	4a61      	ldr	r2, [pc, #388]	@ (80045b0 <HAL_GPIO_Init+0x328>)
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	089b      	lsrs	r3, r3, #2
 8004430:	3302      	adds	r3, #2
 8004432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	220f      	movs	r2, #15
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43db      	mvns	r3, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4013      	ands	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a58      	ldr	r2, [pc, #352]	@ (80045b4 <HAL_GPIO_Init+0x32c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d037      	beq.n	80044c6 <HAL_GPIO_Init+0x23e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a57      	ldr	r2, [pc, #348]	@ (80045b8 <HAL_GPIO_Init+0x330>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d031      	beq.n	80044c2 <HAL_GPIO_Init+0x23a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a56      	ldr	r2, [pc, #344]	@ (80045bc <HAL_GPIO_Init+0x334>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d02b      	beq.n	80044be <HAL_GPIO_Init+0x236>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a55      	ldr	r2, [pc, #340]	@ (80045c0 <HAL_GPIO_Init+0x338>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d025      	beq.n	80044ba <HAL_GPIO_Init+0x232>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a54      	ldr	r2, [pc, #336]	@ (80045c4 <HAL_GPIO_Init+0x33c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d01f      	beq.n	80044b6 <HAL_GPIO_Init+0x22e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a53      	ldr	r2, [pc, #332]	@ (80045c8 <HAL_GPIO_Init+0x340>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d019      	beq.n	80044b2 <HAL_GPIO_Init+0x22a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a52      	ldr	r2, [pc, #328]	@ (80045cc <HAL_GPIO_Init+0x344>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d013      	beq.n	80044ae <HAL_GPIO_Init+0x226>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a51      	ldr	r2, [pc, #324]	@ (80045d0 <HAL_GPIO_Init+0x348>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00d      	beq.n	80044aa <HAL_GPIO_Init+0x222>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a50      	ldr	r2, [pc, #320]	@ (80045d4 <HAL_GPIO_Init+0x34c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d007      	beq.n	80044a6 <HAL_GPIO_Init+0x21e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a4f      	ldr	r2, [pc, #316]	@ (80045d8 <HAL_GPIO_Init+0x350>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d101      	bne.n	80044a2 <HAL_GPIO_Init+0x21a>
 800449e:	2309      	movs	r3, #9
 80044a0:	e012      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044a2:	230a      	movs	r3, #10
 80044a4:	e010      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044a6:	2308      	movs	r3, #8
 80044a8:	e00e      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044aa:	2307      	movs	r3, #7
 80044ac:	e00c      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044ae:	2306      	movs	r3, #6
 80044b0:	e00a      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044b2:	2305      	movs	r3, #5
 80044b4:	e008      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044b6:	2304      	movs	r3, #4
 80044b8:	e006      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044ba:	2303      	movs	r3, #3
 80044bc:	e004      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044be:	2302      	movs	r3, #2
 80044c0:	e002      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044c6:	2300      	movs	r3, #0
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	f002 0203 	and.w	r2, r2, #3
 80044ce:	0092      	lsls	r2, r2, #2
 80044d0:	4093      	lsls	r3, r2
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044d8:	4935      	ldr	r1, [pc, #212]	@ (80045b0 <HAL_GPIO_Init+0x328>)
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	089b      	lsrs	r3, r3, #2
 80044de:	3302      	adds	r3, #2
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044e6:	4b3d      	ldr	r3, [pc, #244]	@ (80045dc <HAL_GPIO_Init+0x354>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	43db      	mvns	r3, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4013      	ands	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800450a:	4a34      	ldr	r2, [pc, #208]	@ (80045dc <HAL_GPIO_Init+0x354>)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004510:	4b32      	ldr	r3, [pc, #200]	@ (80045dc <HAL_GPIO_Init+0x354>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	43db      	mvns	r3, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4013      	ands	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004534:	4a29      	ldr	r2, [pc, #164]	@ (80045dc <HAL_GPIO_Init+0x354>)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800453a:	4b28      	ldr	r3, [pc, #160]	@ (80045dc <HAL_GPIO_Init+0x354>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	43db      	mvns	r3, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4013      	ands	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800455e:	4a1f      	ldr	r2, [pc, #124]	@ (80045dc <HAL_GPIO_Init+0x354>)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004564:	4b1d      	ldr	r3, [pc, #116]	@ (80045dc <HAL_GPIO_Init+0x354>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004588:	4a14      	ldr	r2, [pc, #80]	@ (80045dc <HAL_GPIO_Init+0x354>)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3301      	adds	r3, #1
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2b0f      	cmp	r3, #15
 8004598:	f67f ae84 	bls.w	80042a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800459c:	bf00      	nop
 800459e:	bf00      	nop
 80045a0:	3724      	adds	r7, #36	@ 0x24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40013800 	.word	0x40013800
 80045b4:	40020000 	.word	0x40020000
 80045b8:	40020400 	.word	0x40020400
 80045bc:	40020800 	.word	0x40020800
 80045c0:	40020c00 	.word	0x40020c00
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40021400 	.word	0x40021400
 80045cc:	40021800 	.word	0x40021800
 80045d0:	40021c00 	.word	0x40021c00
 80045d4:	40022000 	.word	0x40022000
 80045d8:	40022400 	.word	0x40022400
 80045dc:	40013c00 	.word	0x40013c00

080045e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	e0d9      	b.n	80047b0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045fc:	2201      	movs	r2, #1
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4013      	ands	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	429a      	cmp	r2, r3
 8004614:	f040 80c9 	bne.w	80047aa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004618:	4a6b      	ldr	r2, [pc, #428]	@ (80047c8 <HAL_GPIO_DeInit+0x1e8>)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	089b      	lsrs	r3, r3, #2
 800461e:	3302      	adds	r3, #2
 8004620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004624:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f003 0303 	and.w	r3, r3, #3
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	220f      	movs	r2, #15
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	4013      	ands	r3, r2
 8004638:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a63      	ldr	r2, [pc, #396]	@ (80047cc <HAL_GPIO_DeInit+0x1ec>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d037      	beq.n	80046b2 <HAL_GPIO_DeInit+0xd2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a62      	ldr	r2, [pc, #392]	@ (80047d0 <HAL_GPIO_DeInit+0x1f0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d031      	beq.n	80046ae <HAL_GPIO_DeInit+0xce>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a61      	ldr	r2, [pc, #388]	@ (80047d4 <HAL_GPIO_DeInit+0x1f4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d02b      	beq.n	80046aa <HAL_GPIO_DeInit+0xca>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a60      	ldr	r2, [pc, #384]	@ (80047d8 <HAL_GPIO_DeInit+0x1f8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d025      	beq.n	80046a6 <HAL_GPIO_DeInit+0xc6>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a5f      	ldr	r2, [pc, #380]	@ (80047dc <HAL_GPIO_DeInit+0x1fc>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01f      	beq.n	80046a2 <HAL_GPIO_DeInit+0xc2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a5e      	ldr	r2, [pc, #376]	@ (80047e0 <HAL_GPIO_DeInit+0x200>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d019      	beq.n	800469e <HAL_GPIO_DeInit+0xbe>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a5d      	ldr	r2, [pc, #372]	@ (80047e4 <HAL_GPIO_DeInit+0x204>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <HAL_GPIO_DeInit+0xba>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a5c      	ldr	r2, [pc, #368]	@ (80047e8 <HAL_GPIO_DeInit+0x208>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00d      	beq.n	8004696 <HAL_GPIO_DeInit+0xb6>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a5b      	ldr	r2, [pc, #364]	@ (80047ec <HAL_GPIO_DeInit+0x20c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d007      	beq.n	8004692 <HAL_GPIO_DeInit+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a5a      	ldr	r2, [pc, #360]	@ (80047f0 <HAL_GPIO_DeInit+0x210>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d101      	bne.n	800468e <HAL_GPIO_DeInit+0xae>
 800468a:	2309      	movs	r3, #9
 800468c:	e012      	b.n	80046b4 <HAL_GPIO_DeInit+0xd4>
 800468e:	230a      	movs	r3, #10
 8004690:	e010      	b.n	80046b4 <HAL_GPIO_DeInit+0xd4>
 8004692:	2308      	movs	r3, #8
 8004694:	e00e      	b.n	80046b4 <HAL_GPIO_DeInit+0xd4>
 8004696:	2307      	movs	r3, #7
 8004698:	e00c      	b.n	80046b4 <HAL_GPIO_DeInit+0xd4>
 800469a:	2306      	movs	r3, #6
 800469c:	e00a      	b.n	80046b4 <HAL_GPIO_DeInit+0xd4>
 800469e:	2305      	movs	r3, #5
 80046a0:	e008      	b.n	80046b4 <HAL_GPIO_DeInit+0xd4>
 80046a2:	2304      	movs	r3, #4
 80046a4:	e006      	b.n	80046b4 <HAL_GPIO_DeInit+0xd4>
 80046a6:	2303      	movs	r3, #3
 80046a8:	e004      	b.n	80046b4 <HAL_GPIO_DeInit+0xd4>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e002      	b.n	80046b4 <HAL_GPIO_DeInit+0xd4>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_GPIO_DeInit+0xd4>
 80046b2:	2300      	movs	r3, #0
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	f002 0203 	and.w	r2, r2, #3
 80046ba:	0092      	lsls	r2, r2, #2
 80046bc:	4093      	lsls	r3, r2
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d132      	bne.n	800472a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80046c4:	4b4b      	ldr	r3, [pc, #300]	@ (80047f4 <HAL_GPIO_DeInit+0x214>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	43db      	mvns	r3, r3
 80046cc:	4949      	ldr	r1, [pc, #292]	@ (80047f4 <HAL_GPIO_DeInit+0x214>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80046d2:	4b48      	ldr	r3, [pc, #288]	@ (80047f4 <HAL_GPIO_DeInit+0x214>)
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	43db      	mvns	r3, r3
 80046da:	4946      	ldr	r1, [pc, #280]	@ (80047f4 <HAL_GPIO_DeInit+0x214>)
 80046dc:	4013      	ands	r3, r2
 80046de:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80046e0:	4b44      	ldr	r3, [pc, #272]	@ (80047f4 <HAL_GPIO_DeInit+0x214>)
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	4942      	ldr	r1, [pc, #264]	@ (80047f4 <HAL_GPIO_DeInit+0x214>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80046ee:	4b41      	ldr	r3, [pc, #260]	@ (80047f4 <HAL_GPIO_DeInit+0x214>)
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	493f      	ldr	r1, [pc, #252]	@ (80047f4 <HAL_GPIO_DeInit+0x214>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	220f      	movs	r2, #15
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800470c:	4a2e      	ldr	r2, [pc, #184]	@ (80047c8 <HAL_GPIO_DeInit+0x1e8>)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	089b      	lsrs	r3, r3, #2
 8004712:	3302      	adds	r3, #2
 8004714:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	43da      	mvns	r2, r3
 800471c:	482a      	ldr	r0, [pc, #168]	@ (80047c8 <HAL_GPIO_DeInit+0x1e8>)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	089b      	lsrs	r3, r3, #2
 8004722:	400a      	ands	r2, r1
 8004724:	3302      	adds	r3, #2
 8004726:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	2103      	movs	r1, #3
 8004734:	fa01 f303 	lsl.w	r3, r1, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	401a      	ands	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	08da      	lsrs	r2, r3, #3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3208      	adds	r2, #8
 8004748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	220f      	movs	r2, #15
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	08d2      	lsrs	r2, r2, #3
 8004760:	4019      	ands	r1, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3208      	adds	r2, #8
 8004766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	2103      	movs	r1, #3
 8004774:	fa01 f303 	lsl.w	r3, r1, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	401a      	ands	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	2101      	movs	r1, #1
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	fa01 f303 	lsl.w	r3, r1, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	401a      	ands	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	2103      	movs	r1, #3
 800479e:	fa01 f303 	lsl.w	r3, r1, r3
 80047a2:	43db      	mvns	r3, r3
 80047a4:	401a      	ands	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	3301      	adds	r3, #1
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b0f      	cmp	r3, #15
 80047b4:	f67f af22 	bls.w	80045fc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40013800 	.word	0x40013800
 80047cc:	40020000 	.word	0x40020000
 80047d0:	40020400 	.word	0x40020400
 80047d4:	40020800 	.word	0x40020800
 80047d8:	40020c00 	.word	0x40020c00
 80047dc:	40021000 	.word	0x40021000
 80047e0:	40021400 	.word	0x40021400
 80047e4:	40021800 	.word	0x40021800
 80047e8:	40021c00 	.word	0x40021c00
 80047ec:	40022000 	.word	0x40022000
 80047f0:	40022400 	.word	0x40022400
 80047f4:	40013c00 	.word	0x40013c00

080047f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	807b      	strh	r3, [r7, #2]
 8004804:	4613      	mov	r3, r2
 8004806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004808:	787b      	ldrb	r3, [r7, #1]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800480e:	887a      	ldrh	r2, [r7, #2]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004814:	e003      	b.n	800481e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004816:	887b      	ldrh	r3, [r7, #2]
 8004818:	041a      	lsls	r2, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	619a      	str	r2, [r3, #24]
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
	...

0800482c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004836:	4b08      	ldr	r3, [pc, #32]	@ (8004858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	4013      	ands	r3, r2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d006      	beq.n	8004850 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004842:	4a05      	ldr	r2, [pc, #20]	@ (8004858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	4618      	mov	r0, r3
 800484c:	f7fb ff98 	bl	8000780 <HAL_GPIO_EXTI_Callback>
  }
}
 8004850:	bf00      	nop
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40013c00 	.word	0x40013c00

0800485c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e12b      	b.n	8004ac6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fe fbb8 	bl	8002ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2224      	movs	r2, #36	@ 0x24
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048c0:	f001 ff82 	bl	80067c8 <HAL_RCC_GetPCLK1Freq>
 80048c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4a81      	ldr	r2, [pc, #516]	@ (8004ad0 <HAL_I2C_Init+0x274>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d807      	bhi.n	80048e0 <HAL_I2C_Init+0x84>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a80      	ldr	r2, [pc, #512]	@ (8004ad4 <HAL_I2C_Init+0x278>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	bf94      	ite	ls
 80048d8:	2301      	movls	r3, #1
 80048da:	2300      	movhi	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e006      	b.n	80048ee <HAL_I2C_Init+0x92>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4a7d      	ldr	r2, [pc, #500]	@ (8004ad8 <HAL_I2C_Init+0x27c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	bf94      	ite	ls
 80048e8:	2301      	movls	r3, #1
 80048ea:	2300      	movhi	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e0e7      	b.n	8004ac6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4a78      	ldr	r2, [pc, #480]	@ (8004adc <HAL_I2C_Init+0x280>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	0c9b      	lsrs	r3, r3, #18
 8004900:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4a6a      	ldr	r2, [pc, #424]	@ (8004ad0 <HAL_I2C_Init+0x274>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d802      	bhi.n	8004930 <HAL_I2C_Init+0xd4>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	3301      	adds	r3, #1
 800492e:	e009      	b.n	8004944 <HAL_I2C_Init+0xe8>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	4a69      	ldr	r2, [pc, #420]	@ (8004ae0 <HAL_I2C_Init+0x284>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	099b      	lsrs	r3, r3, #6
 8004942:	3301      	adds	r3, #1
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	430b      	orrs	r3, r1
 800494a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004956:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	495c      	ldr	r1, [pc, #368]	@ (8004ad0 <HAL_I2C_Init+0x274>)
 8004960:	428b      	cmp	r3, r1
 8004962:	d819      	bhi.n	8004998 <HAL_I2C_Init+0x13c>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1e59      	subs	r1, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004972:	1c59      	adds	r1, r3, #1
 8004974:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004978:	400b      	ands	r3, r1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_I2C_Init+0x138>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1e59      	subs	r1, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	fbb1 f3f3 	udiv	r3, r1, r3
 800498c:	3301      	adds	r3, #1
 800498e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004992:	e051      	b.n	8004a38 <HAL_I2C_Init+0x1dc>
 8004994:	2304      	movs	r3, #4
 8004996:	e04f      	b.n	8004a38 <HAL_I2C_Init+0x1dc>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d111      	bne.n	80049c4 <HAL_I2C_Init+0x168>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	1e58      	subs	r0, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6859      	ldr	r1, [r3, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	440b      	add	r3, r1
 80049ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80049b2:	3301      	adds	r3, #1
 80049b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	bf0c      	ite	eq
 80049bc:	2301      	moveq	r3, #1
 80049be:	2300      	movne	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	e012      	b.n	80049ea <HAL_I2C_Init+0x18e>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1e58      	subs	r0, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6859      	ldr	r1, [r3, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	0099      	lsls	r1, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049da:	3301      	adds	r3, #1
 80049dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_I2C_Init+0x196>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e022      	b.n	8004a38 <HAL_I2C_Init+0x1dc>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10e      	bne.n	8004a18 <HAL_I2C_Init+0x1bc>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1e58      	subs	r0, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6859      	ldr	r1, [r3, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	440b      	add	r3, r1
 8004a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a16:	e00f      	b.n	8004a38 <HAL_I2C_Init+0x1dc>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1e58      	subs	r0, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	0099      	lsls	r1, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a2e:	3301      	adds	r3, #1
 8004a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	6809      	ldr	r1, [r1, #0]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69da      	ldr	r2, [r3, #28]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6911      	ldr	r1, [r2, #16]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68d2      	ldr	r2, [r2, #12]
 8004a72:	4311      	orrs	r1, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695a      	ldr	r2, [r3, #20]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	000186a0 	.word	0x000186a0
 8004ad4:	001e847f 	.word	0x001e847f
 8004ad8:	003d08ff 	.word	0x003d08ff
 8004adc:	431bde83 	.word	0x431bde83
 8004ae0:	10624dd3 	.word	0x10624dd3

08004ae4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	4608      	mov	r0, r1
 8004aee:	4611      	mov	r1, r2
 8004af0:	461a      	mov	r2, r3
 8004af2:	4603      	mov	r3, r0
 8004af4:	817b      	strh	r3, [r7, #10]
 8004af6:	460b      	mov	r3, r1
 8004af8:	813b      	strh	r3, [r7, #8]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004afe:	f7ff fa0b 	bl	8003f18 <HAL_GetTick>
 8004b02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	f040 80d9 	bne.w	8004cc4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	2319      	movs	r3, #25
 8004b18:	2201      	movs	r2, #1
 8004b1a:	496d      	ldr	r1, [pc, #436]	@ (8004cd0 <HAL_I2C_Mem_Write+0x1ec>)
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fc8b 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e0cc      	b.n	8004cc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_I2C_Mem_Write+0x56>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e0c5      	b.n	8004cc6 <HAL_I2C_Mem_Write+0x1e2>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d007      	beq.n	8004b60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2221      	movs	r2, #33	@ 0x21
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2240      	movs	r2, #64	@ 0x40
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a3a      	ldr	r2, [r7, #32]
 8004b8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004b90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4a4d      	ldr	r2, [pc, #308]	@ (8004cd4 <HAL_I2C_Mem_Write+0x1f0>)
 8004ba0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ba2:	88f8      	ldrh	r0, [r7, #6]
 8004ba4:	893a      	ldrh	r2, [r7, #8]
 8004ba6:	8979      	ldrh	r1, [r7, #10]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 fac2 	bl	800513c <I2C_RequestMemoryWrite>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d052      	beq.n	8004c64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e081      	b.n	8004cc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fd50 	bl	800566c <I2C_WaitOnTXEFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00d      	beq.n	8004bee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d107      	bne.n	8004bea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004be8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e06b      	b.n	8004cc6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf2:	781a      	ldrb	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d11b      	bne.n	8004c64 <HAL_I2C_Mem_Write+0x180>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d017      	beq.n	8004c64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c38:	781a      	ldrb	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1aa      	bne.n	8004bc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fd43 	bl	80056fc <I2C_WaitOnBTFFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00d      	beq.n	8004c98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d107      	bne.n	8004c94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e016      	b.n	8004cc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e000      	b.n	8004cc6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004cc4:	2302      	movs	r3, #2
  }
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	00100002 	.word	0x00100002
 8004cd4:	ffff0000 	.word	0xffff0000

08004cd8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08c      	sub	sp, #48	@ 0x30
 8004cdc:	af02      	add	r7, sp, #8
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	817b      	strh	r3, [r7, #10]
 8004cea:	460b      	mov	r3, r1
 8004cec:	813b      	strh	r3, [r7, #8]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cf2:	f7ff f911 	bl	8003f18 <HAL_GetTick>
 8004cf6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	f040 8214 	bne.w	800512e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	2319      	movs	r3, #25
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	497b      	ldr	r1, [pc, #492]	@ (8004efc <HAL_I2C_Mem_Read+0x224>)
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fb91 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e207      	b.n	8005130 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_I2C_Mem_Read+0x56>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e200      	b.n	8005130 <HAL_I2C_Mem_Read+0x458>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d007      	beq.n	8004d54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2222      	movs	r2, #34	@ 0x22
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2240      	movs	r2, #64	@ 0x40
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4a5b      	ldr	r2, [pc, #364]	@ (8004f00 <HAL_I2C_Mem_Read+0x228>)
 8004d94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d96:	88f8      	ldrh	r0, [r7, #6]
 8004d98:	893a      	ldrh	r2, [r7, #8]
 8004d9a:	8979      	ldrh	r1, [r7, #10]
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	4603      	mov	r3, r0
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 fa5e 	bl	8005268 <I2C_RequestMemoryRead>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e1bc      	b.n	8005130 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d113      	bne.n	8004de6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	623b      	str	r3, [r7, #32]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	623b      	str	r3, [r7, #32]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	623b      	str	r3, [r7, #32]
 8004dd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e190      	b.n	8005108 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d11b      	bne.n	8004e26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	61fb      	str	r3, [r7, #28]
 8004e12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	e170      	b.n	8005108 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d11b      	bne.n	8004e66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	e150      	b.n	8005108 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e7c:	e144      	b.n	8005108 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	f200 80f1 	bhi.w	800506a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d123      	bne.n	8004ed8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 fc79 	bl	800578c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e145      	b.n	8005130 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ed6:	e117      	b.n	8005108 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d14e      	bne.n	8004f7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	4906      	ldr	r1, [pc, #24]	@ (8004f04 <HAL_I2C_Mem_Read+0x22c>)
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 faa4 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e11a      	b.n	8005130 <HAL_I2C_Mem_Read+0x458>
 8004efa:	bf00      	nop
 8004efc:	00100002 	.word	0x00100002
 8004f00:	ffff0000 	.word	0xffff0000
 8004f04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f7c:	e0c4      	b.n	8005108 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f84:	2200      	movs	r2, #0
 8004f86:	496c      	ldr	r1, [pc, #432]	@ (8005138 <HAL_I2C_Mem_Read+0x460>)
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 fa55 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0cb      	b.n	8005130 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	4955      	ldr	r1, [pc, #340]	@ (8005138 <HAL_I2C_Mem_Read+0x460>)
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 fa27 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e09d      	b.n	8005130 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691a      	ldr	r2, [r3, #16]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005052:	3b01      	subs	r3, #1
 8005054:	b29a      	uxth	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005068:	e04e      	b.n	8005108 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800506a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 fb8c 	bl	800578c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e058      	b.n	8005130 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d124      	bne.n	8005108 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d107      	bne.n	80050d6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800510c:	2b00      	cmp	r3, #0
 800510e:	f47f aeb6 	bne.w	8004e7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	e000      	b.n	8005130 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800512e:	2302      	movs	r3, #2
  }
}
 8005130:	4618      	mov	r0, r3
 8005132:	3728      	adds	r7, #40	@ 0x28
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	00010004 	.word	0x00010004

0800513c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	4608      	mov	r0, r1
 8005146:	4611      	mov	r1, r2
 8005148:	461a      	mov	r2, r3
 800514a:	4603      	mov	r3, r0
 800514c:	817b      	strh	r3, [r7, #10]
 800514e:	460b      	mov	r3, r1
 8005150:	813b      	strh	r3, [r7, #8]
 8005152:	4613      	mov	r3, r2
 8005154:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005164:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	2200      	movs	r2, #0
 800516e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f960 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00d      	beq.n	800519a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800518c:	d103      	bne.n	8005196 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005194:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e05f      	b.n	800525a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800519a:	897b      	ldrh	r3, [r7, #10]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	6a3a      	ldr	r2, [r7, #32]
 80051ae:	492d      	ldr	r1, [pc, #180]	@ (8005264 <I2C_RequestMemoryWrite+0x128>)
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f9bb 	bl	800552c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e04c      	b.n	800525a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d8:	6a39      	ldr	r1, [r7, #32]
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 fa46 	bl	800566c <I2C_WaitOnTXEFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00d      	beq.n	8005202 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d107      	bne.n	80051fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e02b      	b.n	800525a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d105      	bne.n	8005214 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005208:	893b      	ldrh	r3, [r7, #8]
 800520a:	b2da      	uxtb	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	611a      	str	r2, [r3, #16]
 8005212:	e021      	b.n	8005258 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005214:	893b      	ldrh	r3, [r7, #8]
 8005216:	0a1b      	lsrs	r3, r3, #8
 8005218:	b29b      	uxth	r3, r3
 800521a:	b2da      	uxtb	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005224:	6a39      	ldr	r1, [r7, #32]
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 fa20 	bl	800566c <I2C_WaitOnTXEFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00d      	beq.n	800524e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005236:	2b04      	cmp	r3, #4
 8005238:	d107      	bne.n	800524a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005248:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e005      	b.n	800525a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800524e:	893b      	ldrh	r3, [r7, #8]
 8005250:	b2da      	uxtb	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	00010002 	.word	0x00010002

08005268 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	4608      	mov	r0, r1
 8005272:	4611      	mov	r1, r2
 8005274:	461a      	mov	r2, r3
 8005276:	4603      	mov	r3, r0
 8005278:	817b      	strh	r3, [r7, #10]
 800527a:	460b      	mov	r3, r1
 800527c:	813b      	strh	r3, [r7, #8]
 800527e:	4613      	mov	r3, r2
 8005280:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005290:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f8c2 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00d      	beq.n	80052d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052c8:	d103      	bne.n	80052d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e0aa      	b.n	800542c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052d6:	897b      	ldrh	r3, [r7, #10]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80052e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	6a3a      	ldr	r2, [r7, #32]
 80052ea:	4952      	ldr	r1, [pc, #328]	@ (8005434 <I2C_RequestMemoryRead+0x1cc>)
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f91d 	bl	800552c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e097      	b.n	800542c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005314:	6a39      	ldr	r1, [r7, #32]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f9a8 	bl	800566c <I2C_WaitOnTXEFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00d      	beq.n	800533e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	2b04      	cmp	r3, #4
 8005328:	d107      	bne.n	800533a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005338:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e076      	b.n	800542c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d105      	bne.n	8005350 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005344:	893b      	ldrh	r3, [r7, #8]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	611a      	str	r2, [r3, #16]
 800534e:	e021      	b.n	8005394 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005350:	893b      	ldrh	r3, [r7, #8]
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	b29b      	uxth	r3, r3
 8005356:	b2da      	uxtb	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005360:	6a39      	ldr	r1, [r7, #32]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f982 	bl	800566c <I2C_WaitOnTXEFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00d      	beq.n	800538a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	2b04      	cmp	r3, #4
 8005374:	d107      	bne.n	8005386 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005384:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e050      	b.n	800542c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800538a:	893b      	ldrh	r3, [r7, #8]
 800538c:	b2da      	uxtb	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005396:	6a39      	ldr	r1, [r7, #32]
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f967 	bl	800566c <I2C_WaitOnTXEFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00d      	beq.n	80053c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d107      	bne.n	80053bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e035      	b.n	800542c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f82b 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00d      	beq.n	8005404 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053f6:	d103      	bne.n	8005400 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e013      	b.n	800542c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005404:	897b      	ldrh	r3, [r7, #10]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	f043 0301 	orr.w	r3, r3, #1
 800540c:	b2da      	uxtb	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	6a3a      	ldr	r2, [r7, #32]
 8005418:	4906      	ldr	r1, [pc, #24]	@ (8005434 <I2C_RequestMemoryRead+0x1cc>)
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 f886 	bl	800552c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	00010002 	.word	0x00010002

08005438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	4613      	mov	r3, r2
 8005446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005448:	e048      	b.n	80054dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005450:	d044      	beq.n	80054dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005452:	f7fe fd61 	bl	8003f18 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d302      	bcc.n	8005468 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d139      	bne.n	80054dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	0c1b      	lsrs	r3, r3, #16
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b01      	cmp	r3, #1
 8005470:	d10d      	bne.n	800548e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	43da      	mvns	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	4013      	ands	r3, r2
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	bf0c      	ite	eq
 8005484:	2301      	moveq	r3, #1
 8005486:	2300      	movne	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	e00c      	b.n	80054a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	43da      	mvns	r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	4013      	ands	r3, r2
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	461a      	mov	r2, r3
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d116      	bne.n	80054dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c8:	f043 0220 	orr.w	r2, r3, #32
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e023      	b.n	8005524 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	0c1b      	lsrs	r3, r3, #16
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d10d      	bne.n	8005502 <I2C_WaitOnFlagUntilTimeout+0xca>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	43da      	mvns	r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	4013      	ands	r3, r2
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bf0c      	ite	eq
 80054f8:	2301      	moveq	r3, #1
 80054fa:	2300      	movne	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	461a      	mov	r2, r3
 8005500:	e00c      	b.n	800551c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	43da      	mvns	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4013      	ands	r3, r2
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	bf0c      	ite	eq
 8005514:	2301      	moveq	r3, #1
 8005516:	2300      	movne	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	429a      	cmp	r2, r3
 8005520:	d093      	beq.n	800544a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800553a:	e071      	b.n	8005620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800554a:	d123      	bne.n	8005594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800555a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005564:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005580:	f043 0204 	orr.w	r2, r3, #4
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e067      	b.n	8005664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559a:	d041      	beq.n	8005620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559c:	f7fe fcbc 	bl	8003f18 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d302      	bcc.n	80055b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d136      	bne.n	8005620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d10c      	bne.n	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	43da      	mvns	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4013      	ands	r3, r2
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	e00b      	b.n	80055ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	43da      	mvns	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4013      	ands	r3, r2
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	bf14      	ite	ne
 80055e8:	2301      	movne	r3, #1
 80055ea:	2300      	moveq	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d016      	beq.n	8005620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560c:	f043 0220 	orr.w	r2, r3, #32
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e021      	b.n	8005664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	0c1b      	lsrs	r3, r3, #16
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b01      	cmp	r3, #1
 8005628:	d10c      	bne.n	8005644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	43da      	mvns	r2, r3
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4013      	ands	r3, r2
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	bf14      	ite	ne
 800563c:	2301      	movne	r3, #1
 800563e:	2300      	moveq	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	e00b      	b.n	800565c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	43da      	mvns	r2, r3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4013      	ands	r3, r2
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	bf14      	ite	ne
 8005656:	2301      	movne	r3, #1
 8005658:	2300      	moveq	r3, #0
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	f47f af6d 	bne.w	800553c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005678:	e034      	b.n	80056e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 f8e3 	bl	8005846 <I2C_IsAcknowledgeFailed>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e034      	b.n	80056f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005690:	d028      	beq.n	80056e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005692:	f7fe fc41 	bl	8003f18 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d302      	bcc.n	80056a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d11d      	bne.n	80056e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b2:	2b80      	cmp	r3, #128	@ 0x80
 80056b4:	d016      	beq.n	80056e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d0:	f043 0220 	orr.w	r2, r3, #32
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e007      	b.n	80056f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ee:	2b80      	cmp	r3, #128	@ 0x80
 80056f0:	d1c3      	bne.n	800567a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005708:	e034      	b.n	8005774 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f89b 	bl	8005846 <I2C_IsAcknowledgeFailed>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e034      	b.n	8005784 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005720:	d028      	beq.n	8005774 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005722:	f7fe fbf9 	bl	8003f18 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	429a      	cmp	r2, r3
 8005730:	d302      	bcc.n	8005738 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11d      	bne.n	8005774 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	2b04      	cmp	r3, #4
 8005744:	d016      	beq.n	8005774 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005760:	f043 0220 	orr.w	r2, r3, #32
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e007      	b.n	8005784 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b04      	cmp	r3, #4
 8005780:	d1c3      	bne.n	800570a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005798:	e049      	b.n	800582e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	f003 0310 	and.w	r3, r3, #16
 80057a4:	2b10      	cmp	r3, #16
 80057a6:	d119      	bne.n	80057dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f06f 0210 	mvn.w	r2, #16
 80057b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e030      	b.n	800583e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057dc:	f7fe fb9c 	bl	8003f18 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d302      	bcc.n	80057f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d11d      	bne.n	800582e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fc:	2b40      	cmp	r3, #64	@ 0x40
 80057fe:	d016      	beq.n	800582e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581a:	f043 0220 	orr.w	r2, r3, #32
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e007      	b.n	800583e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005838:	2b40      	cmp	r3, #64	@ 0x40
 800583a:	d1ae      	bne.n	800579a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800585c:	d11b      	bne.n	8005896 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005866:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005882:	f043 0204 	orr.w	r2, r3, #4
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e000      	b.n	8005898 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	d129      	bne.n	800590e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2224      	movs	r2, #36	@ 0x24
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0201 	bic.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0210 	bic.w	r2, r2, #16
 80058e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0201 	orr.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	e000      	b.n	8005910 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800590e:	2302      	movs	r3, #2
  }
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005926:	2300      	movs	r3, #0
 8005928:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b20      	cmp	r3, #32
 8005934:	d12a      	bne.n	800598c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2224      	movs	r2, #36	@ 0x24
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0201 	bic.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005956:	89fb      	ldrh	r3, [r7, #14]
 8005958:	f023 030f 	bic.w	r3, r3, #15
 800595c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	b29a      	uxth	r2, r3
 8005962:	89fb      	ldrh	r3, [r7, #14]
 8005964:	4313      	orrs	r3, r2
 8005966:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	89fa      	ldrh	r2, [r7, #14]
 800596e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	e000      	b.n	800598e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800598c:	2302      	movs	r3, #2
  }
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e0bf      	b.n	8005b2e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fd fb82 	bl	80030cc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80059de:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6999      	ldr	r1, [r3, #24]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80059f4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6899      	ldr	r1, [r3, #8]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b38 <HAL_LTDC_Init+0x19c>)
 8005a10:	400b      	ands	r3, r1
 8005a12:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6899      	ldr	r1, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68d9      	ldr	r1, [r3, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	4b3e      	ldr	r3, [pc, #248]	@ (8005b38 <HAL_LTDC_Init+0x19c>)
 8005a3e:	400b      	ands	r3, r1
 8005a40:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	041b      	lsls	r3, r3, #16
 8005a48:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68d9      	ldr	r1, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1a      	ldr	r2, [r3, #32]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6919      	ldr	r1, [r3, #16]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b33      	ldr	r3, [pc, #204]	@ (8005b38 <HAL_LTDC_Init+0x19c>)
 8005a6c:	400b      	ands	r3, r1
 8005a6e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a74:	041b      	lsls	r3, r3, #16
 8005a76:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6919      	ldr	r1, [r3, #16]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6959      	ldr	r1, [r3, #20]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4b27      	ldr	r3, [pc, #156]	@ (8005b38 <HAL_LTDC_Init+0x19c>)
 8005a9a:	400b      	ands	r3, r1
 8005a9c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa2:	041b      	lsls	r3, r3, #16
 8005aa4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6959      	ldr	r1, [r3, #20]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005ade:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0206 	orr.w	r2, r2, #6
 8005b0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	f000f800 	.word	0xf000f800

08005b3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005b3c:	b5b0      	push	{r4, r5, r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_LTDC_ConfigLayer+0x1a>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e02c      	b.n	8005bb0 <HAL_LTDC_ConfigLayer+0x74>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2202      	movs	r2, #2
 8005b62:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2134      	movs	r1, #52	@ 0x34
 8005b6c:	fb01 f303 	mul.w	r3, r1, r3
 8005b70:	4413      	add	r3, r2
 8005b72:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	4614      	mov	r4, r2
 8005b7a:	461d      	mov	r5, r3
 8005b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f811 	bl	8005bb8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bdb0      	pop	{r4, r5, r7, pc}

08005bb8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b089      	sub	sp, #36	@ 0x24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	0c1b      	lsrs	r3, r3, #16
 8005bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd4:	4413      	add	r3, r2
 8005bd6:	041b      	lsls	r3, r3, #16
 8005bd8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	01db      	lsls	r3, r3, #7
 8005be4:	4413      	add	r3, r2
 8005be6:	3384      	adds	r3, #132	@ 0x84
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	6812      	ldr	r2, [r2, #0]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	01d2      	lsls	r2, r2, #7
 8005bf4:	440a      	add	r2, r1
 8005bf6:	3284      	adds	r2, #132	@ 0x84
 8005bf8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005bfc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	0c1b      	lsrs	r3, r3, #16
 8005c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c0e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c10:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4619      	mov	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	01db      	lsls	r3, r3, #7
 8005c1c:	440b      	add	r3, r1
 8005c1e:	3384      	adds	r3, #132	@ 0x84
 8005c20:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c26:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c36:	4413      	add	r3, r2
 8005c38:	041b      	lsls	r3, r3, #16
 8005c3a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	01db      	lsls	r3, r3, #7
 8005c46:	4413      	add	r3, r2
 8005c48:	3384      	adds	r3, #132	@ 0x84
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	4611      	mov	r1, r2
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	01d2      	lsls	r2, r2, #7
 8005c56:	440a      	add	r2, r1
 8005c58:	3284      	adds	r2, #132	@ 0x84
 8005c5a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005c5e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c6e:	4413      	add	r3, r2
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4619      	mov	r1, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	01db      	lsls	r3, r3, #7
 8005c7c:	440b      	add	r3, r1
 8005c7e:	3384      	adds	r3, #132	@ 0x84
 8005c80:	4619      	mov	r1, r3
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	01db      	lsls	r3, r3, #7
 8005c92:	4413      	add	r3, r2
 8005c94:	3384      	adds	r3, #132	@ 0x84
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	01d2      	lsls	r2, r2, #7
 8005ca2:	440a      	add	r2, r1
 8005ca4:	3284      	adds	r2, #132	@ 0x84
 8005ca6:	f023 0307 	bic.w	r3, r3, #7
 8005caa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	01db      	lsls	r3, r3, #7
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3384      	adds	r3, #132	@ 0x84
 8005cba:	461a      	mov	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005cc8:	021b      	lsls	r3, r3, #8
 8005cca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005cd2:	041b      	lsls	r3, r3, #16
 8005cd4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	061b      	lsls	r3, r3, #24
 8005cdc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	01db      	lsls	r3, r3, #7
 8005ce8:	4413      	add	r3, r2
 8005cea:	3384      	adds	r3, #132	@ 0x84
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	01db      	lsls	r3, r3, #7
 8005cf8:	4413      	add	r3, r2
 8005cfa:	3384      	adds	r3, #132	@ 0x84
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	2300      	movs	r3, #0
 8005d00:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005d08:	461a      	mov	r2, r3
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	431a      	orrs	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4619      	mov	r1, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	01db      	lsls	r3, r3, #7
 8005d1c:	440b      	add	r3, r1
 8005d1e:	3384      	adds	r3, #132	@ 0x84
 8005d20:	4619      	mov	r1, r3
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	01db      	lsls	r3, r3, #7
 8005d32:	4413      	add	r3, r2
 8005d34:	3384      	adds	r3, #132	@ 0x84
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	01d2      	lsls	r2, r2, #7
 8005d42:	440a      	add	r2, r1
 8005d44:	3284      	adds	r2, #132	@ 0x84
 8005d46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d4a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	01db      	lsls	r3, r3, #7
 8005d56:	4413      	add	r3, r2
 8005d58:	3384      	adds	r3, #132	@ 0x84
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	01db      	lsls	r3, r3, #7
 8005d6c:	4413      	add	r3, r2
 8005d6e:	3384      	adds	r3, #132	@ 0x84
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	4611      	mov	r1, r2
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	01d2      	lsls	r2, r2, #7
 8005d7c:	440a      	add	r2, r1
 8005d7e:	3284      	adds	r2, #132	@ 0x84
 8005d80:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005d84:	f023 0307 	bic.w	r3, r3, #7
 8005d88:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	69da      	ldr	r2, [r3, #28]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	68f9      	ldr	r1, [r7, #12]
 8005d94:	6809      	ldr	r1, [r1, #0]
 8005d96:	4608      	mov	r0, r1
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	01c9      	lsls	r1, r1, #7
 8005d9c:	4401      	add	r1, r0
 8005d9e:	3184      	adds	r1, #132	@ 0x84
 8005da0:	4313      	orrs	r3, r2
 8005da2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	01db      	lsls	r3, r3, #7
 8005dae:	4413      	add	r3, r2
 8005db0:	3384      	adds	r3, #132	@ 0x84
 8005db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	461a      	mov	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	01db      	lsls	r3, r3, #7
 8005dbe:	4413      	add	r3, r2
 8005dc0:	3384      	adds	r3, #132	@ 0x84
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	01db      	lsls	r3, r3, #7
 8005dd2:	4413      	add	r3, r2
 8005dd4:	3384      	adds	r3, #132	@ 0x84
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ddc:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d102      	bne.n	8005dec <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005de6:	2304      	movs	r3, #4
 8005de8:	61fb      	str	r3, [r7, #28]
 8005dea:	e01b      	b.n	8005e24 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d102      	bne.n	8005dfa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005df4:	2303      	movs	r3, #3
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	e014      	b.n	8005e24 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d00b      	beq.n	8005e1a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d007      	beq.n	8005e1a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d003      	beq.n	8005e1a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e16:	2b07      	cmp	r3, #7
 8005e18:	d102      	bne.n	8005e20 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	e001      	b.n	8005e24 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005e20:	2301      	movs	r3, #1
 8005e22:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	01db      	lsls	r3, r3, #7
 8005e2e:	4413      	add	r3, r2
 8005e30:	3384      	adds	r3, #132	@ 0x84
 8005e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	6812      	ldr	r2, [r2, #0]
 8005e38:	4611      	mov	r1, r2
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	01d2      	lsls	r2, r2, #7
 8005e3e:	440a      	add	r2, r1
 8005e40:	3284      	adds	r2, #132	@ 0x84
 8005e42:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005e46:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	fb02 f303 	mul.w	r3, r2, r3
 8005e52:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	6859      	ldr	r1, [r3, #4]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	1acb      	subs	r3, r1, r3
 8005e5e:	69f9      	ldr	r1, [r7, #28]
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	6809      	ldr	r1, [r1, #0]
 8005e6a:	4608      	mov	r0, r1
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	01c9      	lsls	r1, r1, #7
 8005e70:	4401      	add	r1, r0
 8005e72:	3184      	adds	r1, #132	@ 0x84
 8005e74:	4313      	orrs	r3, r2
 8005e76:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	01db      	lsls	r3, r3, #7
 8005e82:	4413      	add	r3, r2
 8005e84:	3384      	adds	r3, #132	@ 0x84
 8005e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	4611      	mov	r1, r2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	01d2      	lsls	r2, r2, #7
 8005e92:	440a      	add	r2, r1
 8005e94:	3284      	adds	r2, #132	@ 0x84
 8005e96:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005e9a:	f023 0307 	bic.w	r3, r3, #7
 8005e9e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	01db      	lsls	r3, r3, #7
 8005eaa:	4413      	add	r3, r2
 8005eac:	3384      	adds	r3, #132	@ 0x84
 8005eae:	461a      	mov	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	01db      	lsls	r3, r3, #7
 8005ec0:	4413      	add	r3, r2
 8005ec2:	3384      	adds	r3, #132	@ 0x84
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	4611      	mov	r1, r2
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	01d2      	lsls	r2, r2, #7
 8005ed0:	440a      	add	r2, r1
 8005ed2:	3284      	adds	r2, #132	@ 0x84
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	6013      	str	r3, [r2, #0]
}
 8005eda:	bf00      	nop
 8005edc:	3724      	adds	r7, #36	@ 0x24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e267      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d075      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f06:	4b88      	ldr	r3, [pc, #544]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f003 030c 	and.w	r3, r3, #12
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d00c      	beq.n	8005f2c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f12:	4b85      	ldr	r3, [pc, #532]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d112      	bne.n	8005f44 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f1e:	4b82      	ldr	r3, [pc, #520]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f2a:	d10b      	bne.n	8005f44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f2c:	4b7e      	ldr	r3, [pc, #504]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d05b      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x108>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d157      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e242      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f4c:	d106      	bne.n	8005f5c <HAL_RCC_OscConfig+0x74>
 8005f4e:	4b76      	ldr	r3, [pc, #472]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a75      	ldr	r2, [pc, #468]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	e01d      	b.n	8005f98 <HAL_RCC_OscConfig+0xb0>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f64:	d10c      	bne.n	8005f80 <HAL_RCC_OscConfig+0x98>
 8005f66:	4b70      	ldr	r3, [pc, #448]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a6f      	ldr	r2, [pc, #444]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	4b6d      	ldr	r3, [pc, #436]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a6c      	ldr	r2, [pc, #432]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	e00b      	b.n	8005f98 <HAL_RCC_OscConfig+0xb0>
 8005f80:	4b69      	ldr	r3, [pc, #420]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a68      	ldr	r2, [pc, #416]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	4b66      	ldr	r3, [pc, #408]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a65      	ldr	r2, [pc, #404]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d013      	beq.n	8005fc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa0:	f7fd ffba 	bl	8003f18 <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fa8:	f7fd ffb6 	bl	8003f18 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b64      	cmp	r3, #100	@ 0x64
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e207      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fba:	4b5b      	ldr	r3, [pc, #364]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0f0      	beq.n	8005fa8 <HAL_RCC_OscConfig+0xc0>
 8005fc6:	e014      	b.n	8005ff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc8:	f7fd ffa6 	bl	8003f18 <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fd0:	f7fd ffa2 	bl	8003f18 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b64      	cmp	r3, #100	@ 0x64
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e1f3      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fe2:	4b51      	ldr	r3, [pc, #324]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f0      	bne.n	8005fd0 <HAL_RCC_OscConfig+0xe8>
 8005fee:	e000      	b.n	8005ff2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d063      	beq.n	80060c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f003 030c 	and.w	r3, r3, #12
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800600a:	4b47      	ldr	r3, [pc, #284]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006012:	2b08      	cmp	r3, #8
 8006014:	d11c      	bne.n	8006050 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006016:	4b44      	ldr	r3, [pc, #272]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d116      	bne.n	8006050 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006022:	4b41      	ldr	r3, [pc, #260]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d005      	beq.n	800603a <HAL_RCC_OscConfig+0x152>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d001      	beq.n	800603a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e1c7      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800603a:	4b3b      	ldr	r3, [pc, #236]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	4937      	ldr	r1, [pc, #220]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 800604a:	4313      	orrs	r3, r2
 800604c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800604e:	e03a      	b.n	80060c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d020      	beq.n	800609a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006058:	4b34      	ldr	r3, [pc, #208]	@ (800612c <HAL_RCC_OscConfig+0x244>)
 800605a:	2201      	movs	r2, #1
 800605c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605e:	f7fd ff5b 	bl	8003f18 <HAL_GetTick>
 8006062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006064:	e008      	b.n	8006078 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006066:	f7fd ff57 	bl	8003f18 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d901      	bls.n	8006078 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e1a8      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006078:	4b2b      	ldr	r3, [pc, #172]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0f0      	beq.n	8006066 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006084:	4b28      	ldr	r3, [pc, #160]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	4925      	ldr	r1, [pc, #148]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 8006094:	4313      	orrs	r3, r2
 8006096:	600b      	str	r3, [r1, #0]
 8006098:	e015      	b.n	80060c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800609a:	4b24      	ldr	r3, [pc, #144]	@ (800612c <HAL_RCC_OscConfig+0x244>)
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a0:	f7fd ff3a 	bl	8003f18 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060a8:	f7fd ff36 	bl	8003f18 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e187      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f0      	bne.n	80060a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d036      	beq.n	8006140 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d016      	beq.n	8006108 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060da:	4b15      	ldr	r3, [pc, #84]	@ (8006130 <HAL_RCC_OscConfig+0x248>)
 80060dc:	2201      	movs	r2, #1
 80060de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e0:	f7fd ff1a 	bl	8003f18 <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060e8:	f7fd ff16 	bl	8003f18 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e167      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006128 <HAL_RCC_OscConfig+0x240>)
 80060fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f0      	beq.n	80060e8 <HAL_RCC_OscConfig+0x200>
 8006106:	e01b      	b.n	8006140 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006108:	4b09      	ldr	r3, [pc, #36]	@ (8006130 <HAL_RCC_OscConfig+0x248>)
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800610e:	f7fd ff03 	bl	8003f18 <HAL_GetTick>
 8006112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006114:	e00e      	b.n	8006134 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006116:	f7fd feff 	bl	8003f18 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d907      	bls.n	8006134 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e150      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
 8006128:	40023800 	.word	0x40023800
 800612c:	42470000 	.word	0x42470000
 8006130:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006134:	4b88      	ldr	r3, [pc, #544]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 8006136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1ea      	bne.n	8006116 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 8097 	beq.w	800627c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800614e:	2300      	movs	r3, #0
 8006150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006152:	4b81      	ldr	r3, [pc, #516]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10f      	bne.n	800617e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800615e:	2300      	movs	r3, #0
 8006160:	60bb      	str	r3, [r7, #8]
 8006162:	4b7d      	ldr	r3, [pc, #500]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006166:	4a7c      	ldr	r2, [pc, #496]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 8006168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800616c:	6413      	str	r3, [r2, #64]	@ 0x40
 800616e:	4b7a      	ldr	r3, [pc, #488]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 8006170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006176:	60bb      	str	r3, [r7, #8]
 8006178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800617a:	2301      	movs	r3, #1
 800617c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800617e:	4b77      	ldr	r3, [pc, #476]	@ (800635c <HAL_RCC_OscConfig+0x474>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006186:	2b00      	cmp	r3, #0
 8006188:	d118      	bne.n	80061bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800618a:	4b74      	ldr	r3, [pc, #464]	@ (800635c <HAL_RCC_OscConfig+0x474>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a73      	ldr	r2, [pc, #460]	@ (800635c <HAL_RCC_OscConfig+0x474>)
 8006190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006196:	f7fd febf 	bl	8003f18 <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619c:	e008      	b.n	80061b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800619e:	f7fd febb 	bl	8003f18 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e10c      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b0:	4b6a      	ldr	r3, [pc, #424]	@ (800635c <HAL_RCC_OscConfig+0x474>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d0f0      	beq.n	800619e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d106      	bne.n	80061d2 <HAL_RCC_OscConfig+0x2ea>
 80061c4:	4b64      	ldr	r3, [pc, #400]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 80061c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c8:	4a63      	ldr	r2, [pc, #396]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 80061ca:	f043 0301 	orr.w	r3, r3, #1
 80061ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80061d0:	e01c      	b.n	800620c <HAL_RCC_OscConfig+0x324>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	2b05      	cmp	r3, #5
 80061d8:	d10c      	bne.n	80061f4 <HAL_RCC_OscConfig+0x30c>
 80061da:	4b5f      	ldr	r3, [pc, #380]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 80061dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061de:	4a5e      	ldr	r2, [pc, #376]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 80061e0:	f043 0304 	orr.w	r3, r3, #4
 80061e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80061e6:	4b5c      	ldr	r3, [pc, #368]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 80061e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ea:	4a5b      	ldr	r2, [pc, #364]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 80061ec:	f043 0301 	orr.w	r3, r3, #1
 80061f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80061f2:	e00b      	b.n	800620c <HAL_RCC_OscConfig+0x324>
 80061f4:	4b58      	ldr	r3, [pc, #352]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 80061f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f8:	4a57      	ldr	r2, [pc, #348]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 80061fa:	f023 0301 	bic.w	r3, r3, #1
 80061fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006200:	4b55      	ldr	r3, [pc, #340]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 8006202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006204:	4a54      	ldr	r2, [pc, #336]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 8006206:	f023 0304 	bic.w	r3, r3, #4
 800620a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d015      	beq.n	8006240 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006214:	f7fd fe80 	bl	8003f18 <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800621a:	e00a      	b.n	8006232 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800621c:	f7fd fe7c 	bl	8003f18 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800622a:	4293      	cmp	r3, r2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e0cb      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006232:	4b49      	ldr	r3, [pc, #292]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 8006234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0ee      	beq.n	800621c <HAL_RCC_OscConfig+0x334>
 800623e:	e014      	b.n	800626a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006240:	f7fd fe6a 	bl	8003f18 <HAL_GetTick>
 8006244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006246:	e00a      	b.n	800625e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006248:	f7fd fe66 	bl	8003f18 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006256:	4293      	cmp	r3, r2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e0b5      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800625e:	4b3e      	ldr	r3, [pc, #248]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 8006260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1ee      	bne.n	8006248 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800626a:	7dfb      	ldrb	r3, [r7, #23]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d105      	bne.n	800627c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006270:	4b39      	ldr	r3, [pc, #228]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 8006272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006274:	4a38      	ldr	r2, [pc, #224]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 8006276:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800627a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 80a1 	beq.w	80063c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006286:	4b34      	ldr	r3, [pc, #208]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 030c 	and.w	r3, r3, #12
 800628e:	2b08      	cmp	r3, #8
 8006290:	d05c      	beq.n	800634c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d141      	bne.n	800631e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800629a:	4b31      	ldr	r3, [pc, #196]	@ (8006360 <HAL_RCC_OscConfig+0x478>)
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a0:	f7fd fe3a 	bl	8003f18 <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a8:	f7fd fe36 	bl	8003f18 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e087      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ba:	4b27      	ldr	r3, [pc, #156]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f0      	bne.n	80062a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69da      	ldr	r2, [r3, #28]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d4:	019b      	lsls	r3, r3, #6
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062dc:	085b      	lsrs	r3, r3, #1
 80062de:	3b01      	subs	r3, #1
 80062e0:	041b      	lsls	r3, r3, #16
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e8:	061b      	lsls	r3, r3, #24
 80062ea:	491b      	ldr	r1, [pc, #108]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006360 <HAL_RCC_OscConfig+0x478>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f6:	f7fd fe0f 	bl	8003f18 <HAL_GetTick>
 80062fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062fc:	e008      	b.n	8006310 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062fe:	f7fd fe0b 	bl	8003f18 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d901      	bls.n	8006310 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e05c      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006310:	4b11      	ldr	r3, [pc, #68]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0f0      	beq.n	80062fe <HAL_RCC_OscConfig+0x416>
 800631c:	e054      	b.n	80063c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800631e:	4b10      	ldr	r3, [pc, #64]	@ (8006360 <HAL_RCC_OscConfig+0x478>)
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006324:	f7fd fdf8 	bl	8003f18 <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800632c:	f7fd fdf4 	bl	8003f18 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e045      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633e:	4b06      	ldr	r3, [pc, #24]	@ (8006358 <HAL_RCC_OscConfig+0x470>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1f0      	bne.n	800632c <HAL_RCC_OscConfig+0x444>
 800634a:	e03d      	b.n	80063c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d107      	bne.n	8006364 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e038      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
 8006358:	40023800 	.word	0x40023800
 800635c:	40007000 	.word	0x40007000
 8006360:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006364:	4b1b      	ldr	r3, [pc, #108]	@ (80063d4 <HAL_RCC_OscConfig+0x4ec>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d028      	beq.n	80063c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800637c:	429a      	cmp	r2, r3
 800637e:	d121      	bne.n	80063c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800638a:	429a      	cmp	r2, r3
 800638c:	d11a      	bne.n	80063c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006394:	4013      	ands	r3, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800639a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800639c:	4293      	cmp	r3, r2
 800639e:	d111      	bne.n	80063c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	3b01      	subs	r3, #1
 80063ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d107      	bne.n	80063c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d001      	beq.n	80063c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e000      	b.n	80063ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	40023800 	.word	0x40023800

080063d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e0cc      	b.n	8006586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063ec:	4b68      	ldr	r3, [pc, #416]	@ (8006590 <HAL_RCC_ClockConfig+0x1b8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 030f 	and.w	r3, r3, #15
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d90c      	bls.n	8006414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063fa:	4b65      	ldr	r3, [pc, #404]	@ (8006590 <HAL_RCC_ClockConfig+0x1b8>)
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006402:	4b63      	ldr	r3, [pc, #396]	@ (8006590 <HAL_RCC_ClockConfig+0x1b8>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d001      	beq.n	8006414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e0b8      	b.n	8006586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d020      	beq.n	8006462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d005      	beq.n	8006438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800642c:	4b59      	ldr	r3, [pc, #356]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	4a58      	ldr	r2, [pc, #352]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 8006432:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006436:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006444:	4b53      	ldr	r3, [pc, #332]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	4a52      	ldr	r2, [pc, #328]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 800644a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800644e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006450:	4b50      	ldr	r3, [pc, #320]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	494d      	ldr	r1, [pc, #308]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	4313      	orrs	r3, r2
 8006460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d044      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d107      	bne.n	8006486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006476:	4b47      	ldr	r3, [pc, #284]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d119      	bne.n	80064b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e07f      	b.n	8006586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b02      	cmp	r3, #2
 800648c:	d003      	beq.n	8006496 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006492:	2b03      	cmp	r3, #3
 8006494:	d107      	bne.n	80064a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006496:	4b3f      	ldr	r3, [pc, #252]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d109      	bne.n	80064b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e06f      	b.n	8006586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e067      	b.n	8006586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064b6:	4b37      	ldr	r3, [pc, #220]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f023 0203 	bic.w	r2, r3, #3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	4934      	ldr	r1, [pc, #208]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064c8:	f7fd fd26 	bl	8003f18 <HAL_GetTick>
 80064cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ce:	e00a      	b.n	80064e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064d0:	f7fd fd22 	bl	8003f18 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064de:	4293      	cmp	r3, r2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e04f      	b.n	8006586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 020c 	and.w	r2, r3, #12
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d1eb      	bne.n	80064d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064f8:	4b25      	ldr	r3, [pc, #148]	@ (8006590 <HAL_RCC_ClockConfig+0x1b8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d20c      	bcs.n	8006520 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006506:	4b22      	ldr	r3, [pc, #136]	@ (8006590 <HAL_RCC_ClockConfig+0x1b8>)
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800650e:	4b20      	ldr	r3, [pc, #128]	@ (8006590 <HAL_RCC_ClockConfig+0x1b8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	429a      	cmp	r2, r3
 800651a:	d001      	beq.n	8006520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e032      	b.n	8006586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d008      	beq.n	800653e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800652c:	4b19      	ldr	r3, [pc, #100]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	4916      	ldr	r1, [pc, #88]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	4313      	orrs	r3, r2
 800653c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0308 	and.w	r3, r3, #8
 8006546:	2b00      	cmp	r3, #0
 8006548:	d009      	beq.n	800655e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800654a:	4b12      	ldr	r3, [pc, #72]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	490e      	ldr	r1, [pc, #56]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 800655a:	4313      	orrs	r3, r2
 800655c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800655e:	f000 f821 	bl	80065a4 <HAL_RCC_GetSysClockFreq>
 8006562:	4602      	mov	r2, r0
 8006564:	4b0b      	ldr	r3, [pc, #44]	@ (8006594 <HAL_RCC_ClockConfig+0x1bc>)
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	091b      	lsrs	r3, r3, #4
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	490a      	ldr	r1, [pc, #40]	@ (8006598 <HAL_RCC_ClockConfig+0x1c0>)
 8006570:	5ccb      	ldrb	r3, [r1, r3]
 8006572:	fa22 f303 	lsr.w	r3, r2, r3
 8006576:	4a09      	ldr	r2, [pc, #36]	@ (800659c <HAL_RCC_ClockConfig+0x1c4>)
 8006578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800657a:	4b09      	ldr	r3, [pc, #36]	@ (80065a0 <HAL_RCC_ClockConfig+0x1c8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f7fd fc86 	bl	8003e90 <HAL_InitTick>

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	40023c00 	.word	0x40023c00
 8006594:	40023800 	.word	0x40023800
 8006598:	0800a224 	.word	0x0800a224
 800659c:	20000010 	.word	0x20000010
 80065a0:	20000014 	.word	0x20000014

080065a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065a8:	b094      	sub	sp, #80	@ 0x50
 80065aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065bc:	4b79      	ldr	r3, [pc, #484]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 030c 	and.w	r3, r3, #12
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d00d      	beq.n	80065e4 <HAL_RCC_GetSysClockFreq+0x40>
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	f200 80e1 	bhi.w	8006790 <HAL_RCC_GetSysClockFreq+0x1ec>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_RCC_GetSysClockFreq+0x34>
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d003      	beq.n	80065de <HAL_RCC_GetSysClockFreq+0x3a>
 80065d6:	e0db      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065d8:	4b73      	ldr	r3, [pc, #460]	@ (80067a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80065da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065dc:	e0db      	b.n	8006796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065de:	4b73      	ldr	r3, [pc, #460]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x208>)
 80065e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065e2:	e0d8      	b.n	8006796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065e4:	4b6f      	ldr	r3, [pc, #444]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065ee:	4b6d      	ldr	r3, [pc, #436]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d063      	beq.n	80066c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065fa:	4b6a      	ldr	r3, [pc, #424]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	099b      	lsrs	r3, r3, #6
 8006600:	2200      	movs	r2, #0
 8006602:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006604:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660c:	633b      	str	r3, [r7, #48]	@ 0x30
 800660e:	2300      	movs	r3, #0
 8006610:	637b      	str	r3, [r7, #52]	@ 0x34
 8006612:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006616:	4622      	mov	r2, r4
 8006618:	462b      	mov	r3, r5
 800661a:	f04f 0000 	mov.w	r0, #0
 800661e:	f04f 0100 	mov.w	r1, #0
 8006622:	0159      	lsls	r1, r3, #5
 8006624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006628:	0150      	lsls	r0, r2, #5
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	4621      	mov	r1, r4
 8006630:	1a51      	subs	r1, r2, r1
 8006632:	6139      	str	r1, [r7, #16]
 8006634:	4629      	mov	r1, r5
 8006636:	eb63 0301 	sbc.w	r3, r3, r1
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006648:	4659      	mov	r1, fp
 800664a:	018b      	lsls	r3, r1, #6
 800664c:	4651      	mov	r1, sl
 800664e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006652:	4651      	mov	r1, sl
 8006654:	018a      	lsls	r2, r1, #6
 8006656:	4651      	mov	r1, sl
 8006658:	ebb2 0801 	subs.w	r8, r2, r1
 800665c:	4659      	mov	r1, fp
 800665e:	eb63 0901 	sbc.w	r9, r3, r1
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800666e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006676:	4690      	mov	r8, r2
 8006678:	4699      	mov	r9, r3
 800667a:	4623      	mov	r3, r4
 800667c:	eb18 0303 	adds.w	r3, r8, r3
 8006680:	60bb      	str	r3, [r7, #8]
 8006682:	462b      	mov	r3, r5
 8006684:	eb49 0303 	adc.w	r3, r9, r3
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	f04f 0200 	mov.w	r2, #0
 800668e:	f04f 0300 	mov.w	r3, #0
 8006692:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006696:	4629      	mov	r1, r5
 8006698:	024b      	lsls	r3, r1, #9
 800669a:	4621      	mov	r1, r4
 800669c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066a0:	4621      	mov	r1, r4
 80066a2:	024a      	lsls	r2, r1, #9
 80066a4:	4610      	mov	r0, r2
 80066a6:	4619      	mov	r1, r3
 80066a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066aa:	2200      	movs	r2, #0
 80066ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066b4:	f7f9 fdec 	bl	8000290 <__aeabi_uldivmod>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4613      	mov	r3, r2
 80066be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066c0:	e058      	b.n	8006774 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066c2:	4b38      	ldr	r3, [pc, #224]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	099b      	lsrs	r3, r3, #6
 80066c8:	2200      	movs	r2, #0
 80066ca:	4618      	mov	r0, r3
 80066cc:	4611      	mov	r1, r2
 80066ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066d2:	623b      	str	r3, [r7, #32]
 80066d4:	2300      	movs	r3, #0
 80066d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066dc:	4642      	mov	r2, r8
 80066de:	464b      	mov	r3, r9
 80066e0:	f04f 0000 	mov.w	r0, #0
 80066e4:	f04f 0100 	mov.w	r1, #0
 80066e8:	0159      	lsls	r1, r3, #5
 80066ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066ee:	0150      	lsls	r0, r2, #5
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4641      	mov	r1, r8
 80066f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80066fa:	4649      	mov	r1, r9
 80066fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800670c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006710:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006714:	ebb2 040a 	subs.w	r4, r2, sl
 8006718:	eb63 050b 	sbc.w	r5, r3, fp
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	00eb      	lsls	r3, r5, #3
 8006726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800672a:	00e2      	lsls	r2, r4, #3
 800672c:	4614      	mov	r4, r2
 800672e:	461d      	mov	r5, r3
 8006730:	4643      	mov	r3, r8
 8006732:	18e3      	adds	r3, r4, r3
 8006734:	603b      	str	r3, [r7, #0]
 8006736:	464b      	mov	r3, r9
 8006738:	eb45 0303 	adc.w	r3, r5, r3
 800673c:	607b      	str	r3, [r7, #4]
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	f04f 0300 	mov.w	r3, #0
 8006746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800674a:	4629      	mov	r1, r5
 800674c:	028b      	lsls	r3, r1, #10
 800674e:	4621      	mov	r1, r4
 8006750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006754:	4621      	mov	r1, r4
 8006756:	028a      	lsls	r2, r1, #10
 8006758:	4610      	mov	r0, r2
 800675a:	4619      	mov	r1, r3
 800675c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800675e:	2200      	movs	r2, #0
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	61fa      	str	r2, [r7, #28]
 8006764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006768:	f7f9 fd92 	bl	8000290 <__aeabi_uldivmod>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4613      	mov	r3, r2
 8006772:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006774:	4b0b      	ldr	r3, [pc, #44]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	0c1b      	lsrs	r3, r3, #16
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	3301      	adds	r3, #1
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006784:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006788:	fbb2 f3f3 	udiv	r3, r2, r3
 800678c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800678e:	e002      	b.n	8006796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006790:	4b05      	ldr	r3, [pc, #20]	@ (80067a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006792:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006798:	4618      	mov	r0, r3
 800679a:	3750      	adds	r7, #80	@ 0x50
 800679c:	46bd      	mov	sp, r7
 800679e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067a2:	bf00      	nop
 80067a4:	40023800 	.word	0x40023800
 80067a8:	00f42400 	.word	0x00f42400
 80067ac:	007a1200 	.word	0x007a1200

080067b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067b4:	4b03      	ldr	r3, [pc, #12]	@ (80067c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80067b6:	681b      	ldr	r3, [r3, #0]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	20000010 	.word	0x20000010

080067c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80067cc:	f7ff fff0 	bl	80067b0 <HAL_RCC_GetHCLKFreq>
 80067d0:	4602      	mov	r2, r0
 80067d2:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	0a9b      	lsrs	r3, r3, #10
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	4903      	ldr	r1, [pc, #12]	@ (80067ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80067de:	5ccb      	ldrb	r3, [r1, r3]
 80067e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40023800 	.word	0x40023800
 80067ec:	0800a234 	.word	0x0800a234

080067f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10b      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006814:	2b00      	cmp	r3, #0
 8006816:	d105      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006820:	2b00      	cmp	r3, #0
 8006822:	d075      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006824:	4b91      	ldr	r3, [pc, #580]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800682a:	f7fd fb75 	bl	8003f18 <HAL_GetTick>
 800682e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006830:	e008      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006832:	f7fd fb71 	bl	8003f18 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e189      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006844:	4b8a      	ldr	r3, [pc, #552]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1f0      	bne.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d009      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	019a      	lsls	r2, r3, #6
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	071b      	lsls	r3, r3, #28
 8006868:	4981      	ldr	r1, [pc, #516]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800686a:	4313      	orrs	r3, r2
 800686c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01f      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800687c:	4b7c      	ldr	r3, [pc, #496]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800687e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006882:	0f1b      	lsrs	r3, r3, #28
 8006884:	f003 0307 	and.w	r3, r3, #7
 8006888:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	019a      	lsls	r2, r3, #6
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	061b      	lsls	r3, r3, #24
 8006896:	431a      	orrs	r2, r3
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	071b      	lsls	r3, r3, #28
 800689c:	4974      	ldr	r1, [pc, #464]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80068a4:	4b72      	ldr	r3, [pc, #456]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068aa:	f023 021f 	bic.w	r2, r3, #31
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	496e      	ldr	r1, [pc, #440]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00d      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	019a      	lsls	r2, r3, #6
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	061b      	lsls	r3, r3, #24
 80068d4:	431a      	orrs	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	071b      	lsls	r3, r3, #28
 80068dc:	4964      	ldr	r1, [pc, #400]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80068e4:	4b61      	ldr	r3, [pc, #388]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80068e6:	2201      	movs	r2, #1
 80068e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068ea:	f7fd fb15 	bl	8003f18 <HAL_GetTick>
 80068ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068f0:	e008      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068f2:	f7fd fb11 	bl	8003f18 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e129      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006904:	4b5a      	ldr	r3, [pc, #360]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0f0      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	d105      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006924:	2b00      	cmp	r3, #0
 8006926:	d079      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006928:	4b52      	ldr	r3, [pc, #328]	@ (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800692e:	f7fd faf3 	bl	8003f18 <HAL_GetTick>
 8006932:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006934:	e008      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006936:	f7fd faef 	bl	8003f18 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d901      	bls.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e107      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006948:	4b49      	ldr	r3, [pc, #292]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006954:	d0ef      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0304 	and.w	r3, r3, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	d020      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006962:	4b43      	ldr	r3, [pc, #268]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006968:	0f1b      	lsrs	r3, r3, #28
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	019a      	lsls	r2, r3, #6
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	061b      	lsls	r3, r3, #24
 800697c:	431a      	orrs	r2, r3
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	071b      	lsls	r3, r3, #28
 8006982:	493b      	ldr	r1, [pc, #236]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006984:	4313      	orrs	r3, r2
 8006986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800698a:	4b39      	ldr	r3, [pc, #228]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800698c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006990:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	3b01      	subs	r3, #1
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	4934      	ldr	r1, [pc, #208]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d01e      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80069b0:	4b2f      	ldr	r3, [pc, #188]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b6:	0e1b      	lsrs	r3, r3, #24
 80069b8:	f003 030f 	and.w	r3, r3, #15
 80069bc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	019a      	lsls	r2, r3, #6
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	061b      	lsls	r3, r3, #24
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	071b      	lsls	r3, r3, #28
 80069d0:	4927      	ldr	r1, [pc, #156]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80069d8:	4b25      	ldr	r3, [pc, #148]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e6:	4922      	ldr	r1, [pc, #136]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80069ee:	4b21      	ldr	r3, [pc, #132]	@ (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80069f0:	2201      	movs	r2, #1
 80069f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069f4:	f7fd fa90 	bl	8003f18 <HAL_GetTick>
 80069f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069fa:	e008      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80069fc:	f7fd fa8c 	bl	8003f18 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d901      	bls.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e0a4      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a0e:	4b18      	ldr	r3, [pc, #96]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a1a:	d1ef      	bne.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 808b 	beq.w	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	4b10      	ldr	r3, [pc, #64]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a32:	4a0f      	ldr	r2, [pc, #60]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006a46:	4b0c      	ldr	r3, [pc, #48]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a52:	f7fd fa61 	bl	8003f18 <HAL_GetTick>
 8006a56:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006a58:	e010      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a5a:	f7fd fa5d 	bl	8003f18 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d909      	bls.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e075      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006a6c:	42470068 	.word	0x42470068
 8006a70:	40023800 	.word	0x40023800
 8006a74:	42470070 	.word	0x42470070
 8006a78:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006a7c:	4b38      	ldr	r3, [pc, #224]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0e8      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a88:	4b36      	ldr	r3, [pc, #216]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a90:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d02f      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d028      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006abc:	4a29      	ldr	r2, [pc, #164]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ac2:	4b28      	ldr	r3, [pc, #160]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d114      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006ace:	f7fd fa23 	bl	8003f18 <HAL_GetTick>
 8006ad2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ad4:	e00a      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ad6:	f7fd fa1f 	bl	8003f18 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d901      	bls.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e035      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aec:	4b1d      	ldr	r3, [pc, #116]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0ee      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b04:	d10d      	bne.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006b06:	4b17      	ldr	r3, [pc, #92]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006b16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b1a:	4912      	ldr	r1, [pc, #72]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	608b      	str	r3, [r1, #8]
 8006b20:	e005      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006b22:	4b10      	ldr	r3, [pc, #64]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	4a0f      	ldr	r2, [pc, #60]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b28:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006b2c:	6093      	str	r3, [r2, #8]
 8006b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b3a:	490a      	ldr	r1, [pc, #40]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d004      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006b52:	4b06      	ldr	r3, [pc, #24]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006b54:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	40007000 	.word	0x40007000
 8006b64:	40023800 	.word	0x40023800
 8006b68:	42470e40 	.word	0x42470e40
 8006b6c:	424711e0 	.word	0x424711e0

08006b70 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e01c      	b.n	8006bbc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	795b      	ldrb	r3, [r3, #5]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d105      	bne.n	8006b98 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7fc fbc4 	bl	8003320 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f042 0204 	orr.w	r2, r2, #4
 8006bac:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d101      	bne.n	8006bde <HAL_RNG_GenerateRandomNumber+0x1a>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e044      	b.n	8006c68 <HAL_RNG_GenerateRandomNumber+0xa4>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	795b      	ldrb	r3, [r3, #5]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d133      	bne.n	8006c56 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bf4:	f7fd f990 	bl	8003f18 <HAL_GetTick>
 8006bf8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006bfa:	e018      	b.n	8006c2e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006bfc:	f7fd f98c 	bl	8003f18 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d911      	bls.n	8006c2e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d00a      	beq.n	8006c2e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e01c      	b.n	8006c68 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d1df      	bne.n	8006bfc <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	715a      	strb	r2, [r3, #5]
 8006c54:	e004      	b.n	8006c60 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2204      	movs	r2, #4
 8006c5a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	711a      	strb	r2, [r3, #4]

  return status;
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e07b      	b.n	8006d7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d108      	bne.n	8006c9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c92:	d009      	beq.n	8006ca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	61da      	str	r2, [r3, #28]
 8006c9a:	e005      	b.n	8006ca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7fc fb4e 	bl	8003364 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d2c:	ea42 0103 	orr.w	r1, r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	0c1b      	lsrs	r3, r3, #16
 8006d46:	f003 0104 	and.w	r1, r3, #4
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	f003 0210 	and.w	r2, r3, #16
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69da      	ldr	r2, [r3, #28]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e01a      	b.n	8006dca <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006daa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7fc fb21 	bl	80033f4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b088      	sub	sp, #32
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	60f8      	str	r0, [r7, #12]
 8006dda:	60b9      	str	r1, [r7, #8]
 8006ddc:	603b      	str	r3, [r7, #0]
 8006dde:	4613      	mov	r3, r2
 8006de0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006de2:	f7fd f899 	bl	8003f18 <HAL_GetTick>
 8006de6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006de8:	88fb      	ldrh	r3, [r7, #6]
 8006dea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d001      	beq.n	8006dfc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e12a      	b.n	8007052 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <HAL_SPI_Transmit+0x36>
 8006e02:	88fb      	ldrh	r3, [r7, #6]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e122      	b.n	8007052 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <HAL_SPI_Transmit+0x48>
 8006e16:	2302      	movs	r3, #2
 8006e18:	e11b      	b.n	8007052 <HAL_SPI_Transmit+0x280>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2203      	movs	r2, #3
 8006e26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	88fa      	ldrh	r2, [r7, #6]
 8006e3a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	88fa      	ldrh	r2, [r7, #6]
 8006e40:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e68:	d10f      	bne.n	8006e8a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e94:	2b40      	cmp	r3, #64	@ 0x40
 8006e96:	d007      	beq.n	8006ea8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ea6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006eb0:	d152      	bne.n	8006f58 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <HAL_SPI_Transmit+0xee>
 8006eba:	8b7b      	ldrh	r3, [r7, #26]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d145      	bne.n	8006f4c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec4:	881a      	ldrh	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed0:	1c9a      	adds	r2, r3, #2
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	3b01      	subs	r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ee4:	e032      	b.n	8006f4c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d112      	bne.n	8006f1a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef8:	881a      	ldrh	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f04:	1c9a      	adds	r2, r3, #2
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	3b01      	subs	r3, #1
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f18:	e018      	b.n	8006f4c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f1a:	f7fc fffd 	bl	8003f18 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d803      	bhi.n	8006f32 <HAL_SPI_Transmit+0x160>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f30:	d102      	bne.n	8006f38 <HAL_SPI_Transmit+0x166>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d109      	bne.n	8006f4c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e082      	b.n	8007052 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1c7      	bne.n	8006ee6 <HAL_SPI_Transmit+0x114>
 8006f56:	e053      	b.n	8007000 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <HAL_SPI_Transmit+0x194>
 8006f60:	8b7b      	ldrh	r3, [r7, #26]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d147      	bne.n	8006ff6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	330c      	adds	r3, #12
 8006f70:	7812      	ldrb	r2, [r2, #0]
 8006f72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b01      	subs	r3, #1
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f8c:	e033      	b.n	8006ff6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d113      	bne.n	8006fc4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	330c      	adds	r3, #12
 8006fa6:	7812      	ldrb	r2, [r2, #0]
 8006fa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006fc2:	e018      	b.n	8006ff6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fc4:	f7fc ffa8 	bl	8003f18 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d803      	bhi.n	8006fdc <HAL_SPI_Transmit+0x20a>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fda:	d102      	bne.n	8006fe2 <HAL_SPI_Transmit+0x210>
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d109      	bne.n	8006ff6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e02d      	b.n	8007052 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1c6      	bne.n	8006f8e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007000:	69fa      	ldr	r2, [r7, #28]
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f8bf 	bl	8007188 <SPI_EndRxTxTransaction>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2220      	movs	r2, #32
 8007014:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10a      	bne.n	8007034 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e000      	b.n	8007052 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007050:	2300      	movs	r3, #0
  }
}
 8007052:	4618      	mov	r0, r3
 8007054:	3720      	adds	r7, #32
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007068:	b2db      	uxtb	r3, r3
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
	...

08007078 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	4613      	mov	r3, r2
 8007086:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007088:	f7fc ff46 	bl	8003f18 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007090:	1a9b      	subs	r3, r3, r2
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	4413      	add	r3, r2
 8007096:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007098:	f7fc ff3e 	bl	8003f18 <HAL_GetTick>
 800709c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800709e:	4b39      	ldr	r3, [pc, #228]	@ (8007184 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	015b      	lsls	r3, r3, #5
 80070a4:	0d1b      	lsrs	r3, r3, #20
 80070a6:	69fa      	ldr	r2, [r7, #28]
 80070a8:	fb02 f303 	mul.w	r3, r2, r3
 80070ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070ae:	e054      	b.n	800715a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b6:	d050      	beq.n	800715a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070b8:	f7fc ff2e 	bl	8003f18 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	69fa      	ldr	r2, [r7, #28]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d902      	bls.n	80070ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d13d      	bne.n	800714a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80070dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070e6:	d111      	bne.n	800710c <SPI_WaitFlagStateUntilTimeout+0x94>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070f0:	d004      	beq.n	80070fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070fa:	d107      	bne.n	800710c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800710a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007114:	d10f      	bne.n	8007136 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007134:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e017      	b.n	800717a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	3b01      	subs	r3, #1
 8007158:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	4013      	ands	r3, r2
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	429a      	cmp	r2, r3
 8007168:	bf0c      	ite	eq
 800716a:	2301      	moveq	r3, #1
 800716c:	2300      	movne	r3, #0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	429a      	cmp	r2, r3
 8007176:	d19b      	bne.n	80070b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3720      	adds	r7, #32
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000010 	.word	0x20000010

08007188 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af02      	add	r7, sp, #8
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2201      	movs	r2, #1
 800719c:	2102      	movs	r1, #2
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f7ff ff6a 	bl	8007078 <SPI_WaitFlagStateUntilTimeout>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d007      	beq.n	80071ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ae:	f043 0220 	orr.w	r2, r3, #32
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e032      	b.n	8007220 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80071ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007228 <SPI_EndRxTxTransaction+0xa0>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a1b      	ldr	r2, [pc, #108]	@ (800722c <SPI_EndRxTxTransaction+0xa4>)
 80071c0:	fba2 2303 	umull	r2, r3, r2, r3
 80071c4:	0d5b      	lsrs	r3, r3, #21
 80071c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80071ca:	fb02 f303 	mul.w	r3, r2, r3
 80071ce:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071d8:	d112      	bne.n	8007200 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2200      	movs	r2, #0
 80071e2:	2180      	movs	r1, #128	@ 0x80
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f7ff ff47 	bl	8007078 <SPI_WaitFlagStateUntilTimeout>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d016      	beq.n	800721e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071f4:	f043 0220 	orr.w	r2, r3, #32
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e00f      	b.n	8007220 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	3b01      	subs	r3, #1
 800720a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007216:	2b80      	cmp	r3, #128	@ 0x80
 8007218:	d0f2      	beq.n	8007200 <SPI_EndRxTxTransaction+0x78>
 800721a:	e000      	b.n	800721e <SPI_EndRxTxTransaction+0x96>
        break;
 800721c:	bf00      	nop
  }

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20000010 	.word	0x20000010
 800722c:	165e9f81 	.word	0x165e9f81

08007230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e041      	b.n	80072c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d106      	bne.n	800725c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7fc f8ea 	bl	8003430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	3304      	adds	r3, #4
 800726c:	4619      	mov	r1, r3
 800726e:	4610      	mov	r0, r2
 8007270:	f000 faac 	bl	80077cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d001      	beq.n	80072e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e04e      	b.n	8007386 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0201 	orr.w	r2, r2, #1
 80072fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a23      	ldr	r2, [pc, #140]	@ (8007394 <HAL_TIM_Base_Start_IT+0xc4>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d022      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007312:	d01d      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a1f      	ldr	r2, [pc, #124]	@ (8007398 <HAL_TIM_Base_Start_IT+0xc8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d018      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a1e      	ldr	r2, [pc, #120]	@ (800739c <HAL_TIM_Base_Start_IT+0xcc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d013      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a1c      	ldr	r2, [pc, #112]	@ (80073a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00e      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a1b      	ldr	r2, [pc, #108]	@ (80073a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d009      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a19      	ldr	r2, [pc, #100]	@ (80073a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d004      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a18      	ldr	r2, [pc, #96]	@ (80073ac <HAL_TIM_Base_Start_IT+0xdc>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d111      	bne.n	8007374 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b06      	cmp	r3, #6
 8007360:	d010      	beq.n	8007384 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f042 0201 	orr.w	r2, r2, #1
 8007370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007372:	e007      	b.n	8007384 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	40010000 	.word	0x40010000
 8007398:	40000400 	.word	0x40000400
 800739c:	40000800 	.word	0x40000800
 80073a0:	40000c00 	.word	0x40000c00
 80073a4:	40010400 	.word	0x40010400
 80073a8:	40014000 	.word	0x40014000
 80073ac:	40001800 	.word	0x40001800

080073b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0201 	bic.w	r2, r2, #1
 80073c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6a1a      	ldr	r2, [r3, #32]
 80073ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80073d2:	4013      	ands	r3, r2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10f      	bne.n	80073f8 <HAL_TIM_Base_Stop_IT+0x48>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6a1a      	ldr	r2, [r3, #32]
 80073de:	f240 4344 	movw	r3, #1092	@ 0x444
 80073e2:	4013      	ands	r3, r2
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d107      	bne.n	80073f8 <HAL_TIM_Base_Stop_IT+0x48>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0201 	bic.w	r2, r2, #1
 80073f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d020      	beq.n	8007472 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01b      	beq.n	8007472 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f06f 0202 	mvn.w	r2, #2
 8007442:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	f003 0303 	and.w	r3, r3, #3
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f999 	bl	8007790 <HAL_TIM_IC_CaptureCallback>
 800745e:	e005      	b.n	800746c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f98b 	bl	800777c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f99c 	bl	80077a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f003 0304 	and.w	r3, r3, #4
 8007478:	2b00      	cmp	r3, #0
 800747a:	d020      	beq.n	80074be <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	2b00      	cmp	r3, #0
 8007484:	d01b      	beq.n	80074be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f06f 0204 	mvn.w	r2, #4
 800748e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2202      	movs	r2, #2
 8007494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f973 	bl	8007790 <HAL_TIM_IC_CaptureCallback>
 80074aa:	e005      	b.n	80074b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f965 	bl	800777c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f976 	bl	80077a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f003 0308 	and.w	r3, r3, #8
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d020      	beq.n	800750a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f003 0308 	and.w	r3, r3, #8
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d01b      	beq.n	800750a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f06f 0208 	mvn.w	r2, #8
 80074da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2204      	movs	r2, #4
 80074e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d003      	beq.n	80074f8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f94d 	bl	8007790 <HAL_TIM_IC_CaptureCallback>
 80074f6:	e005      	b.n	8007504 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f93f 	bl	800777c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f950 	bl	80077a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f003 0310 	and.w	r3, r3, #16
 8007510:	2b00      	cmp	r3, #0
 8007512:	d020      	beq.n	8007556 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f003 0310 	and.w	r3, r3, #16
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01b      	beq.n	8007556 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f06f 0210 	mvn.w	r2, #16
 8007526:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2208      	movs	r2, #8
 800752c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f927 	bl	8007790 <HAL_TIM_IC_CaptureCallback>
 8007542:	e005      	b.n	8007550 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f919 	bl	800777c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f92a 	bl	80077a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00c      	beq.n	800757a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d007      	beq.n	800757a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f06f 0201 	mvn.w	r2, #1
 8007572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7f9 f911 	bl	800079c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00c      	beq.n	800759e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800758a:	2b00      	cmp	r3, #0
 800758c:	d007      	beq.n	800759e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fae3 	bl	8007b64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00c      	beq.n	80075c2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d007      	beq.n	80075c2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80075ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f8fb 	bl	80077b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f003 0320 	and.w	r3, r3, #32
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00c      	beq.n	80075e6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d007      	beq.n	80075e6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f06f 0220 	mvn.w	r2, #32
 80075de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fab5 	bl	8007b50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075e6:	bf00      	nop
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b084      	sub	sp, #16
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007602:	2b01      	cmp	r3, #1
 8007604:	d101      	bne.n	800760a <HAL_TIM_ConfigClockSource+0x1c>
 8007606:	2302      	movs	r3, #2
 8007608:	e0b4      	b.n	8007774 <HAL_TIM_ConfigClockSource+0x186>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2202      	movs	r2, #2
 8007616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007628:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007630:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007642:	d03e      	beq.n	80076c2 <HAL_TIM_ConfigClockSource+0xd4>
 8007644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007648:	f200 8087 	bhi.w	800775a <HAL_TIM_ConfigClockSource+0x16c>
 800764c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007650:	f000 8086 	beq.w	8007760 <HAL_TIM_ConfigClockSource+0x172>
 8007654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007658:	d87f      	bhi.n	800775a <HAL_TIM_ConfigClockSource+0x16c>
 800765a:	2b70      	cmp	r3, #112	@ 0x70
 800765c:	d01a      	beq.n	8007694 <HAL_TIM_ConfigClockSource+0xa6>
 800765e:	2b70      	cmp	r3, #112	@ 0x70
 8007660:	d87b      	bhi.n	800775a <HAL_TIM_ConfigClockSource+0x16c>
 8007662:	2b60      	cmp	r3, #96	@ 0x60
 8007664:	d050      	beq.n	8007708 <HAL_TIM_ConfigClockSource+0x11a>
 8007666:	2b60      	cmp	r3, #96	@ 0x60
 8007668:	d877      	bhi.n	800775a <HAL_TIM_ConfigClockSource+0x16c>
 800766a:	2b50      	cmp	r3, #80	@ 0x50
 800766c:	d03c      	beq.n	80076e8 <HAL_TIM_ConfigClockSource+0xfa>
 800766e:	2b50      	cmp	r3, #80	@ 0x50
 8007670:	d873      	bhi.n	800775a <HAL_TIM_ConfigClockSource+0x16c>
 8007672:	2b40      	cmp	r3, #64	@ 0x40
 8007674:	d058      	beq.n	8007728 <HAL_TIM_ConfigClockSource+0x13a>
 8007676:	2b40      	cmp	r3, #64	@ 0x40
 8007678:	d86f      	bhi.n	800775a <HAL_TIM_ConfigClockSource+0x16c>
 800767a:	2b30      	cmp	r3, #48	@ 0x30
 800767c:	d064      	beq.n	8007748 <HAL_TIM_ConfigClockSource+0x15a>
 800767e:	2b30      	cmp	r3, #48	@ 0x30
 8007680:	d86b      	bhi.n	800775a <HAL_TIM_ConfigClockSource+0x16c>
 8007682:	2b20      	cmp	r3, #32
 8007684:	d060      	beq.n	8007748 <HAL_TIM_ConfigClockSource+0x15a>
 8007686:	2b20      	cmp	r3, #32
 8007688:	d867      	bhi.n	800775a <HAL_TIM_ConfigClockSource+0x16c>
 800768a:	2b00      	cmp	r3, #0
 800768c:	d05c      	beq.n	8007748 <HAL_TIM_ConfigClockSource+0x15a>
 800768e:	2b10      	cmp	r3, #16
 8007690:	d05a      	beq.n	8007748 <HAL_TIM_ConfigClockSource+0x15a>
 8007692:	e062      	b.n	800775a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076a4:	f000 f9b8 	bl	8007a18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80076b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	609a      	str	r2, [r3, #8]
      break;
 80076c0:	e04f      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076d2:	f000 f9a1 	bl	8007a18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076e4:	609a      	str	r2, [r3, #8]
      break;
 80076e6:	e03c      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076f4:	461a      	mov	r2, r3
 80076f6:	f000 f915 	bl	8007924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2150      	movs	r1, #80	@ 0x50
 8007700:	4618      	mov	r0, r3
 8007702:	f000 f96e 	bl	80079e2 <TIM_ITRx_SetConfig>
      break;
 8007706:	e02c      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007714:	461a      	mov	r2, r3
 8007716:	f000 f934 	bl	8007982 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2160      	movs	r1, #96	@ 0x60
 8007720:	4618      	mov	r0, r3
 8007722:	f000 f95e 	bl	80079e2 <TIM_ITRx_SetConfig>
      break;
 8007726:	e01c      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007734:	461a      	mov	r2, r3
 8007736:	f000 f8f5 	bl	8007924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2140      	movs	r1, #64	@ 0x40
 8007740:	4618      	mov	r0, r3
 8007742:	f000 f94e 	bl	80079e2 <TIM_ITRx_SetConfig>
      break;
 8007746:	e00c      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4619      	mov	r1, r3
 8007752:	4610      	mov	r0, r2
 8007754:	f000 f945 	bl	80079e2 <TIM_ITRx_SetConfig>
      break;
 8007758:	e003      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	73fb      	strb	r3, [r7, #15]
      break;
 800775e:	e000      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007760:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007772:	7bfb      	ldrb	r3, [r7, #15]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a46      	ldr	r2, [pc, #280]	@ (80078f8 <TIM_Base_SetConfig+0x12c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d013      	beq.n	800780c <TIM_Base_SetConfig+0x40>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ea:	d00f      	beq.n	800780c <TIM_Base_SetConfig+0x40>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a43      	ldr	r2, [pc, #268]	@ (80078fc <TIM_Base_SetConfig+0x130>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d00b      	beq.n	800780c <TIM_Base_SetConfig+0x40>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a42      	ldr	r2, [pc, #264]	@ (8007900 <TIM_Base_SetConfig+0x134>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d007      	beq.n	800780c <TIM_Base_SetConfig+0x40>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a41      	ldr	r2, [pc, #260]	@ (8007904 <TIM_Base_SetConfig+0x138>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d003      	beq.n	800780c <TIM_Base_SetConfig+0x40>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a40      	ldr	r2, [pc, #256]	@ (8007908 <TIM_Base_SetConfig+0x13c>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d108      	bne.n	800781e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a35      	ldr	r2, [pc, #212]	@ (80078f8 <TIM_Base_SetConfig+0x12c>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d02b      	beq.n	800787e <TIM_Base_SetConfig+0xb2>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800782c:	d027      	beq.n	800787e <TIM_Base_SetConfig+0xb2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a32      	ldr	r2, [pc, #200]	@ (80078fc <TIM_Base_SetConfig+0x130>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d023      	beq.n	800787e <TIM_Base_SetConfig+0xb2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a31      	ldr	r2, [pc, #196]	@ (8007900 <TIM_Base_SetConfig+0x134>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d01f      	beq.n	800787e <TIM_Base_SetConfig+0xb2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a30      	ldr	r2, [pc, #192]	@ (8007904 <TIM_Base_SetConfig+0x138>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d01b      	beq.n	800787e <TIM_Base_SetConfig+0xb2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a2f      	ldr	r2, [pc, #188]	@ (8007908 <TIM_Base_SetConfig+0x13c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d017      	beq.n	800787e <TIM_Base_SetConfig+0xb2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a2e      	ldr	r2, [pc, #184]	@ (800790c <TIM_Base_SetConfig+0x140>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d013      	beq.n	800787e <TIM_Base_SetConfig+0xb2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a2d      	ldr	r2, [pc, #180]	@ (8007910 <TIM_Base_SetConfig+0x144>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d00f      	beq.n	800787e <TIM_Base_SetConfig+0xb2>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a2c      	ldr	r2, [pc, #176]	@ (8007914 <TIM_Base_SetConfig+0x148>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d00b      	beq.n	800787e <TIM_Base_SetConfig+0xb2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a2b      	ldr	r2, [pc, #172]	@ (8007918 <TIM_Base_SetConfig+0x14c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d007      	beq.n	800787e <TIM_Base_SetConfig+0xb2>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a2a      	ldr	r2, [pc, #168]	@ (800791c <TIM_Base_SetConfig+0x150>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d003      	beq.n	800787e <TIM_Base_SetConfig+0xb2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a29      	ldr	r2, [pc, #164]	@ (8007920 <TIM_Base_SetConfig+0x154>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d108      	bne.n	8007890 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	4313      	orrs	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	4313      	orrs	r3, r2
 800789c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a10      	ldr	r2, [pc, #64]	@ (80078f8 <TIM_Base_SetConfig+0x12c>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d003      	beq.n	80078c4 <TIM_Base_SetConfig+0xf8>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a12      	ldr	r2, [pc, #72]	@ (8007908 <TIM_Base_SetConfig+0x13c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d103      	bne.n	80078cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	691a      	ldr	r2, [r3, #16]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d105      	bne.n	80078ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	f023 0201 	bic.w	r2, r3, #1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	611a      	str	r2, [r3, #16]
  }
}
 80078ea:	bf00      	nop
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	40010000 	.word	0x40010000
 80078fc:	40000400 	.word	0x40000400
 8007900:	40000800 	.word	0x40000800
 8007904:	40000c00 	.word	0x40000c00
 8007908:	40010400 	.word	0x40010400
 800790c:	40014000 	.word	0x40014000
 8007910:	40014400 	.word	0x40014400
 8007914:	40014800 	.word	0x40014800
 8007918:	40001800 	.word	0x40001800
 800791c:	40001c00 	.word	0x40001c00
 8007920:	40002000 	.word	0x40002000

08007924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f023 0201 	bic.w	r2, r3, #1
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800794e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	4313      	orrs	r3, r2
 8007958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f023 030a 	bic.w	r3, r3, #10
 8007960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4313      	orrs	r3, r2
 8007968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	621a      	str	r2, [r3, #32]
}
 8007976:	bf00      	nop
 8007978:	371c      	adds	r7, #28
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007982:	b480      	push	{r7}
 8007984:	b087      	sub	sp, #28
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	f023 0210 	bic.w	r2, r3, #16
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	031b      	lsls	r3, r3, #12
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	011b      	lsls	r3, r3, #4
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	621a      	str	r2, [r3, #32]
}
 80079d6:	bf00      	nop
 80079d8:	371c      	adds	r7, #28
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b085      	sub	sp, #20
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	f043 0307 	orr.w	r3, r3, #7
 8007a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	609a      	str	r2, [r3, #8]
}
 8007a0c:	bf00      	nop
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
 8007a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	021a      	lsls	r2, r3, #8
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	609a      	str	r2, [r3, #8]
}
 8007a4c:	bf00      	nop
 8007a4e:	371c      	adds	r7, #28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d101      	bne.n	8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e05a      	b.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a21      	ldr	r2, [pc, #132]	@ (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d022      	beq.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007abc:	d01d      	beq.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d018      	beq.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a1b      	ldr	r2, [pc, #108]	@ (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d013      	beq.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d00e      	beq.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a18      	ldr	r2, [pc, #96]	@ (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d009      	beq.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a17      	ldr	r2, [pc, #92]	@ (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d004      	beq.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a15      	ldr	r2, [pc, #84]	@ (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d10c      	bne.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	40010000 	.word	0x40010000
 8007b38:	40000400 	.word	0x40000400
 8007b3c:	40000800 	.word	0x40000800
 8007b40:	40000c00 	.word	0x40000c00
 8007b44:	40010400 	.word	0x40010400
 8007b48:	40014000 	.word	0x40014000
 8007b4c:	40001800 	.word	0x40001800

08007b50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <srand>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	4b10      	ldr	r3, [pc, #64]	@ (8007bbc <srand+0x44>)
 8007b7c:	681d      	ldr	r5, [r3, #0]
 8007b7e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007b80:	4604      	mov	r4, r0
 8007b82:	b9b3      	cbnz	r3, 8007bb2 <srand+0x3a>
 8007b84:	2018      	movs	r0, #24
 8007b86:	f000 fa6d 	bl	8008064 <malloc>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	6328      	str	r0, [r5, #48]	@ 0x30
 8007b8e:	b920      	cbnz	r0, 8007b9a <srand+0x22>
 8007b90:	4b0b      	ldr	r3, [pc, #44]	@ (8007bc0 <srand+0x48>)
 8007b92:	480c      	ldr	r0, [pc, #48]	@ (8007bc4 <srand+0x4c>)
 8007b94:	2146      	movs	r1, #70	@ 0x46
 8007b96:	f000 f9fd 	bl	8007f94 <__assert_func>
 8007b9a:	490b      	ldr	r1, [pc, #44]	@ (8007bc8 <srand+0x50>)
 8007b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007bcc <srand+0x54>)
 8007b9e:	e9c0 1300 	strd	r1, r3, [r0]
 8007ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd0 <srand+0x58>)
 8007ba4:	6083      	str	r3, [r0, #8]
 8007ba6:	230b      	movs	r3, #11
 8007ba8:	8183      	strh	r3, [r0, #12]
 8007baa:	2100      	movs	r1, #0
 8007bac:	2001      	movs	r0, #1
 8007bae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007bb2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	611c      	str	r4, [r3, #16]
 8007bb8:	615a      	str	r2, [r3, #20]
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	20000028 	.word	0x20000028
 8007bc0:	0800a23c 	.word	0x0800a23c
 8007bc4:	0800a253 	.word	0x0800a253
 8007bc8:	abcd330e 	.word	0xabcd330e
 8007bcc:	e66d1234 	.word	0xe66d1234
 8007bd0:	0005deec 	.word	0x0005deec

08007bd4 <rand>:
 8007bd4:	4b16      	ldr	r3, [pc, #88]	@ (8007c30 <rand+0x5c>)
 8007bd6:	b510      	push	{r4, lr}
 8007bd8:	681c      	ldr	r4, [r3, #0]
 8007bda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007bdc:	b9b3      	cbnz	r3, 8007c0c <rand+0x38>
 8007bde:	2018      	movs	r0, #24
 8007be0:	f000 fa40 	bl	8008064 <malloc>
 8007be4:	4602      	mov	r2, r0
 8007be6:	6320      	str	r0, [r4, #48]	@ 0x30
 8007be8:	b920      	cbnz	r0, 8007bf4 <rand+0x20>
 8007bea:	4b12      	ldr	r3, [pc, #72]	@ (8007c34 <rand+0x60>)
 8007bec:	4812      	ldr	r0, [pc, #72]	@ (8007c38 <rand+0x64>)
 8007bee:	2152      	movs	r1, #82	@ 0x52
 8007bf0:	f000 f9d0 	bl	8007f94 <__assert_func>
 8007bf4:	4911      	ldr	r1, [pc, #68]	@ (8007c3c <rand+0x68>)
 8007bf6:	4b12      	ldr	r3, [pc, #72]	@ (8007c40 <rand+0x6c>)
 8007bf8:	e9c0 1300 	strd	r1, r3, [r0]
 8007bfc:	4b11      	ldr	r3, [pc, #68]	@ (8007c44 <rand+0x70>)
 8007bfe:	6083      	str	r3, [r0, #8]
 8007c00:	230b      	movs	r3, #11
 8007c02:	8183      	strh	r3, [r0, #12]
 8007c04:	2100      	movs	r1, #0
 8007c06:	2001      	movs	r0, #1
 8007c08:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007c0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007c0e:	480e      	ldr	r0, [pc, #56]	@ (8007c48 <rand+0x74>)
 8007c10:	690b      	ldr	r3, [r1, #16]
 8007c12:	694c      	ldr	r4, [r1, #20]
 8007c14:	4a0d      	ldr	r2, [pc, #52]	@ (8007c4c <rand+0x78>)
 8007c16:	4358      	muls	r0, r3
 8007c18:	fb02 0004 	mla	r0, r2, r4, r0
 8007c1c:	fba3 3202 	umull	r3, r2, r3, r2
 8007c20:	3301      	adds	r3, #1
 8007c22:	eb40 0002 	adc.w	r0, r0, r2
 8007c26:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007c2a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007c2e:	bd10      	pop	{r4, pc}
 8007c30:	20000028 	.word	0x20000028
 8007c34:	0800a23c 	.word	0x0800a23c
 8007c38:	0800a253 	.word	0x0800a253
 8007c3c:	abcd330e 	.word	0xabcd330e
 8007c40:	e66d1234 	.word	0xe66d1234
 8007c44:	0005deec 	.word	0x0005deec
 8007c48:	5851f42d 	.word	0x5851f42d
 8007c4c:	4c957f2d 	.word	0x4c957f2d

08007c50 <std>:
 8007c50:	2300      	movs	r3, #0
 8007c52:	b510      	push	{r4, lr}
 8007c54:	4604      	mov	r4, r0
 8007c56:	e9c0 3300 	strd	r3, r3, [r0]
 8007c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c5e:	6083      	str	r3, [r0, #8]
 8007c60:	8181      	strh	r1, [r0, #12]
 8007c62:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c64:	81c2      	strh	r2, [r0, #14]
 8007c66:	6183      	str	r3, [r0, #24]
 8007c68:	4619      	mov	r1, r3
 8007c6a:	2208      	movs	r2, #8
 8007c6c:	305c      	adds	r0, #92	@ 0x5c
 8007c6e:	f000 f914 	bl	8007e9a <memset>
 8007c72:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca8 <std+0x58>)
 8007c74:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c76:	4b0d      	ldr	r3, [pc, #52]	@ (8007cac <std+0x5c>)
 8007c78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb0 <std+0x60>)
 8007c7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb4 <std+0x64>)
 8007c80:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c82:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb8 <std+0x68>)
 8007c84:	6224      	str	r4, [r4, #32]
 8007c86:	429c      	cmp	r4, r3
 8007c88:	d006      	beq.n	8007c98 <std+0x48>
 8007c8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c8e:	4294      	cmp	r4, r2
 8007c90:	d002      	beq.n	8007c98 <std+0x48>
 8007c92:	33d0      	adds	r3, #208	@ 0xd0
 8007c94:	429c      	cmp	r4, r3
 8007c96:	d105      	bne.n	8007ca4 <std+0x54>
 8007c98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ca0:	f000 b974 	b.w	8007f8c <__retarget_lock_init_recursive>
 8007ca4:	bd10      	pop	{r4, pc}
 8007ca6:	bf00      	nop
 8007ca8:	08007e15 	.word	0x08007e15
 8007cac:	08007e37 	.word	0x08007e37
 8007cb0:	08007e6f 	.word	0x08007e6f
 8007cb4:	08007e93 	.word	0x08007e93
 8007cb8:	20025eb8 	.word	0x20025eb8

08007cbc <stdio_exit_handler>:
 8007cbc:	4a02      	ldr	r2, [pc, #8]	@ (8007cc8 <stdio_exit_handler+0xc>)
 8007cbe:	4903      	ldr	r1, [pc, #12]	@ (8007ccc <stdio_exit_handler+0x10>)
 8007cc0:	4803      	ldr	r0, [pc, #12]	@ (8007cd0 <stdio_exit_handler+0x14>)
 8007cc2:	f000 b869 	b.w	8007d98 <_fwalk_sglue>
 8007cc6:	bf00      	nop
 8007cc8:	2000001c 	.word	0x2000001c
 8007ccc:	080088a5 	.word	0x080088a5
 8007cd0:	2000002c 	.word	0x2000002c

08007cd4 <cleanup_stdio>:
 8007cd4:	6841      	ldr	r1, [r0, #4]
 8007cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8007d08 <cleanup_stdio+0x34>)
 8007cd8:	4299      	cmp	r1, r3
 8007cda:	b510      	push	{r4, lr}
 8007cdc:	4604      	mov	r4, r0
 8007cde:	d001      	beq.n	8007ce4 <cleanup_stdio+0x10>
 8007ce0:	f000 fde0 	bl	80088a4 <_fflush_r>
 8007ce4:	68a1      	ldr	r1, [r4, #8]
 8007ce6:	4b09      	ldr	r3, [pc, #36]	@ (8007d0c <cleanup_stdio+0x38>)
 8007ce8:	4299      	cmp	r1, r3
 8007cea:	d002      	beq.n	8007cf2 <cleanup_stdio+0x1e>
 8007cec:	4620      	mov	r0, r4
 8007cee:	f000 fdd9 	bl	80088a4 <_fflush_r>
 8007cf2:	68e1      	ldr	r1, [r4, #12]
 8007cf4:	4b06      	ldr	r3, [pc, #24]	@ (8007d10 <cleanup_stdio+0x3c>)
 8007cf6:	4299      	cmp	r1, r3
 8007cf8:	d004      	beq.n	8007d04 <cleanup_stdio+0x30>
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d00:	f000 bdd0 	b.w	80088a4 <_fflush_r>
 8007d04:	bd10      	pop	{r4, pc}
 8007d06:	bf00      	nop
 8007d08:	20025eb8 	.word	0x20025eb8
 8007d0c:	20025f20 	.word	0x20025f20
 8007d10:	20025f88 	.word	0x20025f88

08007d14 <global_stdio_init.part.0>:
 8007d14:	b510      	push	{r4, lr}
 8007d16:	4b0b      	ldr	r3, [pc, #44]	@ (8007d44 <global_stdio_init.part.0+0x30>)
 8007d18:	4c0b      	ldr	r4, [pc, #44]	@ (8007d48 <global_stdio_init.part.0+0x34>)
 8007d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8007d4c <global_stdio_init.part.0+0x38>)
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	4620      	mov	r0, r4
 8007d20:	2200      	movs	r2, #0
 8007d22:	2104      	movs	r1, #4
 8007d24:	f7ff ff94 	bl	8007c50 <std>
 8007d28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	2109      	movs	r1, #9
 8007d30:	f7ff ff8e 	bl	8007c50 <std>
 8007d34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d38:	2202      	movs	r2, #2
 8007d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d3e:	2112      	movs	r1, #18
 8007d40:	f7ff bf86 	b.w	8007c50 <std>
 8007d44:	20025ff0 	.word	0x20025ff0
 8007d48:	20025eb8 	.word	0x20025eb8
 8007d4c:	08007cbd 	.word	0x08007cbd

08007d50 <__sfp_lock_acquire>:
 8007d50:	4801      	ldr	r0, [pc, #4]	@ (8007d58 <__sfp_lock_acquire+0x8>)
 8007d52:	f000 b91c 	b.w	8007f8e <__retarget_lock_acquire_recursive>
 8007d56:	bf00      	nop
 8007d58:	20025ff9 	.word	0x20025ff9

08007d5c <__sfp_lock_release>:
 8007d5c:	4801      	ldr	r0, [pc, #4]	@ (8007d64 <__sfp_lock_release+0x8>)
 8007d5e:	f000 b917 	b.w	8007f90 <__retarget_lock_release_recursive>
 8007d62:	bf00      	nop
 8007d64:	20025ff9 	.word	0x20025ff9

08007d68 <__sinit>:
 8007d68:	b510      	push	{r4, lr}
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	f7ff fff0 	bl	8007d50 <__sfp_lock_acquire>
 8007d70:	6a23      	ldr	r3, [r4, #32]
 8007d72:	b11b      	cbz	r3, 8007d7c <__sinit+0x14>
 8007d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d78:	f7ff bff0 	b.w	8007d5c <__sfp_lock_release>
 8007d7c:	4b04      	ldr	r3, [pc, #16]	@ (8007d90 <__sinit+0x28>)
 8007d7e:	6223      	str	r3, [r4, #32]
 8007d80:	4b04      	ldr	r3, [pc, #16]	@ (8007d94 <__sinit+0x2c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1f5      	bne.n	8007d74 <__sinit+0xc>
 8007d88:	f7ff ffc4 	bl	8007d14 <global_stdio_init.part.0>
 8007d8c:	e7f2      	b.n	8007d74 <__sinit+0xc>
 8007d8e:	bf00      	nop
 8007d90:	08007cd5 	.word	0x08007cd5
 8007d94:	20025ff0 	.word	0x20025ff0

08007d98 <_fwalk_sglue>:
 8007d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	4688      	mov	r8, r1
 8007da0:	4614      	mov	r4, r2
 8007da2:	2600      	movs	r6, #0
 8007da4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007da8:	f1b9 0901 	subs.w	r9, r9, #1
 8007dac:	d505      	bpl.n	8007dba <_fwalk_sglue+0x22>
 8007dae:	6824      	ldr	r4, [r4, #0]
 8007db0:	2c00      	cmp	r4, #0
 8007db2:	d1f7      	bne.n	8007da4 <_fwalk_sglue+0xc>
 8007db4:	4630      	mov	r0, r6
 8007db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dba:	89ab      	ldrh	r3, [r5, #12]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d907      	bls.n	8007dd0 <_fwalk_sglue+0x38>
 8007dc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	d003      	beq.n	8007dd0 <_fwalk_sglue+0x38>
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4638      	mov	r0, r7
 8007dcc:	47c0      	blx	r8
 8007dce:	4306      	orrs	r6, r0
 8007dd0:	3568      	adds	r5, #104	@ 0x68
 8007dd2:	e7e9      	b.n	8007da8 <_fwalk_sglue+0x10>

08007dd4 <siprintf>:
 8007dd4:	b40e      	push	{r1, r2, r3}
 8007dd6:	b500      	push	{lr}
 8007dd8:	b09c      	sub	sp, #112	@ 0x70
 8007dda:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ddc:	9002      	str	r0, [sp, #8]
 8007dde:	9006      	str	r0, [sp, #24]
 8007de0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007de4:	4809      	ldr	r0, [pc, #36]	@ (8007e0c <siprintf+0x38>)
 8007de6:	9107      	str	r1, [sp, #28]
 8007de8:	9104      	str	r1, [sp, #16]
 8007dea:	4909      	ldr	r1, [pc, #36]	@ (8007e10 <siprintf+0x3c>)
 8007dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007df0:	9105      	str	r1, [sp, #20]
 8007df2:	6800      	ldr	r0, [r0, #0]
 8007df4:	9301      	str	r3, [sp, #4]
 8007df6:	a902      	add	r1, sp, #8
 8007df8:	f000 fa46 	bl	8008288 <_svfiprintf_r>
 8007dfc:	9b02      	ldr	r3, [sp, #8]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	701a      	strb	r2, [r3, #0]
 8007e02:	b01c      	add	sp, #112	@ 0x70
 8007e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e08:	b003      	add	sp, #12
 8007e0a:	4770      	bx	lr
 8007e0c:	20000028 	.word	0x20000028
 8007e10:	ffff0208 	.word	0xffff0208

08007e14 <__sread>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	460c      	mov	r4, r1
 8007e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1c:	f000 f868 	bl	8007ef0 <_read_r>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	bfab      	itete	ge
 8007e24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e26:	89a3      	ldrhlt	r3, [r4, #12]
 8007e28:	181b      	addge	r3, r3, r0
 8007e2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e2e:	bfac      	ite	ge
 8007e30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e32:	81a3      	strhlt	r3, [r4, #12]
 8007e34:	bd10      	pop	{r4, pc}

08007e36 <__swrite>:
 8007e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3a:	461f      	mov	r7, r3
 8007e3c:	898b      	ldrh	r3, [r1, #12]
 8007e3e:	05db      	lsls	r3, r3, #23
 8007e40:	4605      	mov	r5, r0
 8007e42:	460c      	mov	r4, r1
 8007e44:	4616      	mov	r6, r2
 8007e46:	d505      	bpl.n	8007e54 <__swrite+0x1e>
 8007e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f000 f83c 	bl	8007ecc <_lseek_r>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e5e:	81a3      	strh	r3, [r4, #12]
 8007e60:	4632      	mov	r2, r6
 8007e62:	463b      	mov	r3, r7
 8007e64:	4628      	mov	r0, r5
 8007e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6a:	f000 b853 	b.w	8007f14 <_write_r>

08007e6e <__sseek>:
 8007e6e:	b510      	push	{r4, lr}
 8007e70:	460c      	mov	r4, r1
 8007e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e76:	f000 f829 	bl	8007ecc <_lseek_r>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	bf15      	itete	ne
 8007e80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e8a:	81a3      	strheq	r3, [r4, #12]
 8007e8c:	bf18      	it	ne
 8007e8e:	81a3      	strhne	r3, [r4, #12]
 8007e90:	bd10      	pop	{r4, pc}

08007e92 <__sclose>:
 8007e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e96:	f000 b809 	b.w	8007eac <_close_r>

08007e9a <memset>:
 8007e9a:	4402      	add	r2, r0
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d100      	bne.n	8007ea4 <memset+0xa>
 8007ea2:	4770      	bx	lr
 8007ea4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ea8:	e7f9      	b.n	8007e9e <memset+0x4>
	...

08007eac <_close_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4d06      	ldr	r5, [pc, #24]	@ (8007ec8 <_close_r+0x1c>)
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	4608      	mov	r0, r1
 8007eb6:	602b      	str	r3, [r5, #0]
 8007eb8:	f7fb ff21 	bl	8003cfe <_close>
 8007ebc:	1c43      	adds	r3, r0, #1
 8007ebe:	d102      	bne.n	8007ec6 <_close_r+0x1a>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	b103      	cbz	r3, 8007ec6 <_close_r+0x1a>
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	20025ff4 	.word	0x20025ff4

08007ecc <_lseek_r>:
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	4d07      	ldr	r5, [pc, #28]	@ (8007eec <_lseek_r+0x20>)
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	4608      	mov	r0, r1
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	602a      	str	r2, [r5, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	f7fb ff36 	bl	8003d4c <_lseek>
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	d102      	bne.n	8007eea <_lseek_r+0x1e>
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	b103      	cbz	r3, 8007eea <_lseek_r+0x1e>
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	20025ff4 	.word	0x20025ff4

08007ef0 <_read_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4d07      	ldr	r5, [pc, #28]	@ (8007f10 <_read_r+0x20>)
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	4608      	mov	r0, r1
 8007ef8:	4611      	mov	r1, r2
 8007efa:	2200      	movs	r2, #0
 8007efc:	602a      	str	r2, [r5, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	f7fb fec4 	bl	8003c8c <_read>
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	d102      	bne.n	8007f0e <_read_r+0x1e>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	b103      	cbz	r3, 8007f0e <_read_r+0x1e>
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	20025ff4 	.word	0x20025ff4

08007f14 <_write_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d07      	ldr	r5, [pc, #28]	@ (8007f34 <_write_r+0x20>)
 8007f18:	4604      	mov	r4, r0
 8007f1a:	4608      	mov	r0, r1
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	2200      	movs	r2, #0
 8007f20:	602a      	str	r2, [r5, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	f7fb fecf 	bl	8003cc6 <_write>
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	d102      	bne.n	8007f32 <_write_r+0x1e>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	b103      	cbz	r3, 8007f32 <_write_r+0x1e>
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	bd38      	pop	{r3, r4, r5, pc}
 8007f34:	20025ff4 	.word	0x20025ff4

08007f38 <__errno>:
 8007f38:	4b01      	ldr	r3, [pc, #4]	@ (8007f40 <__errno+0x8>)
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	20000028 	.word	0x20000028

08007f44 <__libc_init_array>:
 8007f44:	b570      	push	{r4, r5, r6, lr}
 8007f46:	4d0d      	ldr	r5, [pc, #52]	@ (8007f7c <__libc_init_array+0x38>)
 8007f48:	4c0d      	ldr	r4, [pc, #52]	@ (8007f80 <__libc_init_array+0x3c>)
 8007f4a:	1b64      	subs	r4, r4, r5
 8007f4c:	10a4      	asrs	r4, r4, #2
 8007f4e:	2600      	movs	r6, #0
 8007f50:	42a6      	cmp	r6, r4
 8007f52:	d109      	bne.n	8007f68 <__libc_init_array+0x24>
 8007f54:	4d0b      	ldr	r5, [pc, #44]	@ (8007f84 <__libc_init_array+0x40>)
 8007f56:	4c0c      	ldr	r4, [pc, #48]	@ (8007f88 <__libc_init_array+0x44>)
 8007f58:	f000 fff0 	bl	8008f3c <_init>
 8007f5c:	1b64      	subs	r4, r4, r5
 8007f5e:	10a4      	asrs	r4, r4, #2
 8007f60:	2600      	movs	r6, #0
 8007f62:	42a6      	cmp	r6, r4
 8007f64:	d105      	bne.n	8007f72 <__libc_init_array+0x2e>
 8007f66:	bd70      	pop	{r4, r5, r6, pc}
 8007f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f6c:	4798      	blx	r3
 8007f6e:	3601      	adds	r6, #1
 8007f70:	e7ee      	b.n	8007f50 <__libc_init_array+0xc>
 8007f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f76:	4798      	blx	r3
 8007f78:	3601      	adds	r6, #1
 8007f7a:	e7f2      	b.n	8007f62 <__libc_init_array+0x1e>
 8007f7c:	0800a324 	.word	0x0800a324
 8007f80:	0800a324 	.word	0x0800a324
 8007f84:	0800a324 	.word	0x0800a324
 8007f88:	0800a328 	.word	0x0800a328

08007f8c <__retarget_lock_init_recursive>:
 8007f8c:	4770      	bx	lr

08007f8e <__retarget_lock_acquire_recursive>:
 8007f8e:	4770      	bx	lr

08007f90 <__retarget_lock_release_recursive>:
 8007f90:	4770      	bx	lr
	...

08007f94 <__assert_func>:
 8007f94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f96:	4614      	mov	r4, r2
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4b09      	ldr	r3, [pc, #36]	@ (8007fc0 <__assert_func+0x2c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	68d8      	ldr	r0, [r3, #12]
 8007fa2:	b954      	cbnz	r4, 8007fba <__assert_func+0x26>
 8007fa4:	4b07      	ldr	r3, [pc, #28]	@ (8007fc4 <__assert_func+0x30>)
 8007fa6:	461c      	mov	r4, r3
 8007fa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007fac:	9100      	str	r1, [sp, #0]
 8007fae:	462b      	mov	r3, r5
 8007fb0:	4905      	ldr	r1, [pc, #20]	@ (8007fc8 <__assert_func+0x34>)
 8007fb2:	f000 fc9f 	bl	80088f4 <fiprintf>
 8007fb6:	f000 fce7 	bl	8008988 <abort>
 8007fba:	4b04      	ldr	r3, [pc, #16]	@ (8007fcc <__assert_func+0x38>)
 8007fbc:	e7f4      	b.n	8007fa8 <__assert_func+0x14>
 8007fbe:	bf00      	nop
 8007fc0:	20000028 	.word	0x20000028
 8007fc4:	0800a2e6 	.word	0x0800a2e6
 8007fc8:	0800a2b8 	.word	0x0800a2b8
 8007fcc:	0800a2ab 	.word	0x0800a2ab

08007fd0 <_free_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	2900      	cmp	r1, #0
 8007fd6:	d041      	beq.n	800805c <_free_r+0x8c>
 8007fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fdc:	1f0c      	subs	r4, r1, #4
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bfb8      	it	lt
 8007fe2:	18e4      	addlt	r4, r4, r3
 8007fe4:	f000 f8e8 	bl	80081b8 <__malloc_lock>
 8007fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8008060 <_free_r+0x90>)
 8007fea:	6813      	ldr	r3, [r2, #0]
 8007fec:	b933      	cbnz	r3, 8007ffc <_free_r+0x2c>
 8007fee:	6063      	str	r3, [r4, #4]
 8007ff0:	6014      	str	r4, [r2, #0]
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ff8:	f000 b8e4 	b.w	80081c4 <__malloc_unlock>
 8007ffc:	42a3      	cmp	r3, r4
 8007ffe:	d908      	bls.n	8008012 <_free_r+0x42>
 8008000:	6820      	ldr	r0, [r4, #0]
 8008002:	1821      	adds	r1, r4, r0
 8008004:	428b      	cmp	r3, r1
 8008006:	bf01      	itttt	eq
 8008008:	6819      	ldreq	r1, [r3, #0]
 800800a:	685b      	ldreq	r3, [r3, #4]
 800800c:	1809      	addeq	r1, r1, r0
 800800e:	6021      	streq	r1, [r4, #0]
 8008010:	e7ed      	b.n	8007fee <_free_r+0x1e>
 8008012:	461a      	mov	r2, r3
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	b10b      	cbz	r3, 800801c <_free_r+0x4c>
 8008018:	42a3      	cmp	r3, r4
 800801a:	d9fa      	bls.n	8008012 <_free_r+0x42>
 800801c:	6811      	ldr	r1, [r2, #0]
 800801e:	1850      	adds	r0, r2, r1
 8008020:	42a0      	cmp	r0, r4
 8008022:	d10b      	bne.n	800803c <_free_r+0x6c>
 8008024:	6820      	ldr	r0, [r4, #0]
 8008026:	4401      	add	r1, r0
 8008028:	1850      	adds	r0, r2, r1
 800802a:	4283      	cmp	r3, r0
 800802c:	6011      	str	r1, [r2, #0]
 800802e:	d1e0      	bne.n	8007ff2 <_free_r+0x22>
 8008030:	6818      	ldr	r0, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	6053      	str	r3, [r2, #4]
 8008036:	4408      	add	r0, r1
 8008038:	6010      	str	r0, [r2, #0]
 800803a:	e7da      	b.n	8007ff2 <_free_r+0x22>
 800803c:	d902      	bls.n	8008044 <_free_r+0x74>
 800803e:	230c      	movs	r3, #12
 8008040:	602b      	str	r3, [r5, #0]
 8008042:	e7d6      	b.n	8007ff2 <_free_r+0x22>
 8008044:	6820      	ldr	r0, [r4, #0]
 8008046:	1821      	adds	r1, r4, r0
 8008048:	428b      	cmp	r3, r1
 800804a:	bf04      	itt	eq
 800804c:	6819      	ldreq	r1, [r3, #0]
 800804e:	685b      	ldreq	r3, [r3, #4]
 8008050:	6063      	str	r3, [r4, #4]
 8008052:	bf04      	itt	eq
 8008054:	1809      	addeq	r1, r1, r0
 8008056:	6021      	streq	r1, [r4, #0]
 8008058:	6054      	str	r4, [r2, #4]
 800805a:	e7ca      	b.n	8007ff2 <_free_r+0x22>
 800805c:	bd38      	pop	{r3, r4, r5, pc}
 800805e:	bf00      	nop
 8008060:	20026000 	.word	0x20026000

08008064 <malloc>:
 8008064:	4b02      	ldr	r3, [pc, #8]	@ (8008070 <malloc+0xc>)
 8008066:	4601      	mov	r1, r0
 8008068:	6818      	ldr	r0, [r3, #0]
 800806a:	f000 b825 	b.w	80080b8 <_malloc_r>
 800806e:	bf00      	nop
 8008070:	20000028 	.word	0x20000028

08008074 <sbrk_aligned>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	4e0f      	ldr	r6, [pc, #60]	@ (80080b4 <sbrk_aligned+0x40>)
 8008078:	460c      	mov	r4, r1
 800807a:	6831      	ldr	r1, [r6, #0]
 800807c:	4605      	mov	r5, r0
 800807e:	b911      	cbnz	r1, 8008086 <sbrk_aligned+0x12>
 8008080:	f000 fc64 	bl	800894c <_sbrk_r>
 8008084:	6030      	str	r0, [r6, #0]
 8008086:	4621      	mov	r1, r4
 8008088:	4628      	mov	r0, r5
 800808a:	f000 fc5f 	bl	800894c <_sbrk_r>
 800808e:	1c43      	adds	r3, r0, #1
 8008090:	d103      	bne.n	800809a <sbrk_aligned+0x26>
 8008092:	f04f 34ff 	mov.w	r4, #4294967295
 8008096:	4620      	mov	r0, r4
 8008098:	bd70      	pop	{r4, r5, r6, pc}
 800809a:	1cc4      	adds	r4, r0, #3
 800809c:	f024 0403 	bic.w	r4, r4, #3
 80080a0:	42a0      	cmp	r0, r4
 80080a2:	d0f8      	beq.n	8008096 <sbrk_aligned+0x22>
 80080a4:	1a21      	subs	r1, r4, r0
 80080a6:	4628      	mov	r0, r5
 80080a8:	f000 fc50 	bl	800894c <_sbrk_r>
 80080ac:	3001      	adds	r0, #1
 80080ae:	d1f2      	bne.n	8008096 <sbrk_aligned+0x22>
 80080b0:	e7ef      	b.n	8008092 <sbrk_aligned+0x1e>
 80080b2:	bf00      	nop
 80080b4:	20025ffc 	.word	0x20025ffc

080080b8 <_malloc_r>:
 80080b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080bc:	1ccd      	adds	r5, r1, #3
 80080be:	f025 0503 	bic.w	r5, r5, #3
 80080c2:	3508      	adds	r5, #8
 80080c4:	2d0c      	cmp	r5, #12
 80080c6:	bf38      	it	cc
 80080c8:	250c      	movcc	r5, #12
 80080ca:	2d00      	cmp	r5, #0
 80080cc:	4606      	mov	r6, r0
 80080ce:	db01      	blt.n	80080d4 <_malloc_r+0x1c>
 80080d0:	42a9      	cmp	r1, r5
 80080d2:	d904      	bls.n	80080de <_malloc_r+0x26>
 80080d4:	230c      	movs	r3, #12
 80080d6:	6033      	str	r3, [r6, #0]
 80080d8:	2000      	movs	r0, #0
 80080da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081b4 <_malloc_r+0xfc>
 80080e2:	f000 f869 	bl	80081b8 <__malloc_lock>
 80080e6:	f8d8 3000 	ldr.w	r3, [r8]
 80080ea:	461c      	mov	r4, r3
 80080ec:	bb44      	cbnz	r4, 8008140 <_malloc_r+0x88>
 80080ee:	4629      	mov	r1, r5
 80080f0:	4630      	mov	r0, r6
 80080f2:	f7ff ffbf 	bl	8008074 <sbrk_aligned>
 80080f6:	1c43      	adds	r3, r0, #1
 80080f8:	4604      	mov	r4, r0
 80080fa:	d158      	bne.n	80081ae <_malloc_r+0xf6>
 80080fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008100:	4627      	mov	r7, r4
 8008102:	2f00      	cmp	r7, #0
 8008104:	d143      	bne.n	800818e <_malloc_r+0xd6>
 8008106:	2c00      	cmp	r4, #0
 8008108:	d04b      	beq.n	80081a2 <_malloc_r+0xea>
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	4639      	mov	r1, r7
 800810e:	4630      	mov	r0, r6
 8008110:	eb04 0903 	add.w	r9, r4, r3
 8008114:	f000 fc1a 	bl	800894c <_sbrk_r>
 8008118:	4581      	cmp	r9, r0
 800811a:	d142      	bne.n	80081a2 <_malloc_r+0xea>
 800811c:	6821      	ldr	r1, [r4, #0]
 800811e:	1a6d      	subs	r5, r5, r1
 8008120:	4629      	mov	r1, r5
 8008122:	4630      	mov	r0, r6
 8008124:	f7ff ffa6 	bl	8008074 <sbrk_aligned>
 8008128:	3001      	adds	r0, #1
 800812a:	d03a      	beq.n	80081a2 <_malloc_r+0xea>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	442b      	add	r3, r5
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	f8d8 3000 	ldr.w	r3, [r8]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	bb62      	cbnz	r2, 8008194 <_malloc_r+0xdc>
 800813a:	f8c8 7000 	str.w	r7, [r8]
 800813e:	e00f      	b.n	8008160 <_malloc_r+0xa8>
 8008140:	6822      	ldr	r2, [r4, #0]
 8008142:	1b52      	subs	r2, r2, r5
 8008144:	d420      	bmi.n	8008188 <_malloc_r+0xd0>
 8008146:	2a0b      	cmp	r2, #11
 8008148:	d917      	bls.n	800817a <_malloc_r+0xc2>
 800814a:	1961      	adds	r1, r4, r5
 800814c:	42a3      	cmp	r3, r4
 800814e:	6025      	str	r5, [r4, #0]
 8008150:	bf18      	it	ne
 8008152:	6059      	strne	r1, [r3, #4]
 8008154:	6863      	ldr	r3, [r4, #4]
 8008156:	bf08      	it	eq
 8008158:	f8c8 1000 	streq.w	r1, [r8]
 800815c:	5162      	str	r2, [r4, r5]
 800815e:	604b      	str	r3, [r1, #4]
 8008160:	4630      	mov	r0, r6
 8008162:	f000 f82f 	bl	80081c4 <__malloc_unlock>
 8008166:	f104 000b 	add.w	r0, r4, #11
 800816a:	1d23      	adds	r3, r4, #4
 800816c:	f020 0007 	bic.w	r0, r0, #7
 8008170:	1ac2      	subs	r2, r0, r3
 8008172:	bf1c      	itt	ne
 8008174:	1a1b      	subne	r3, r3, r0
 8008176:	50a3      	strne	r3, [r4, r2]
 8008178:	e7af      	b.n	80080da <_malloc_r+0x22>
 800817a:	6862      	ldr	r2, [r4, #4]
 800817c:	42a3      	cmp	r3, r4
 800817e:	bf0c      	ite	eq
 8008180:	f8c8 2000 	streq.w	r2, [r8]
 8008184:	605a      	strne	r2, [r3, #4]
 8008186:	e7eb      	b.n	8008160 <_malloc_r+0xa8>
 8008188:	4623      	mov	r3, r4
 800818a:	6864      	ldr	r4, [r4, #4]
 800818c:	e7ae      	b.n	80080ec <_malloc_r+0x34>
 800818e:	463c      	mov	r4, r7
 8008190:	687f      	ldr	r7, [r7, #4]
 8008192:	e7b6      	b.n	8008102 <_malloc_r+0x4a>
 8008194:	461a      	mov	r2, r3
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	42a3      	cmp	r3, r4
 800819a:	d1fb      	bne.n	8008194 <_malloc_r+0xdc>
 800819c:	2300      	movs	r3, #0
 800819e:	6053      	str	r3, [r2, #4]
 80081a0:	e7de      	b.n	8008160 <_malloc_r+0xa8>
 80081a2:	230c      	movs	r3, #12
 80081a4:	6033      	str	r3, [r6, #0]
 80081a6:	4630      	mov	r0, r6
 80081a8:	f000 f80c 	bl	80081c4 <__malloc_unlock>
 80081ac:	e794      	b.n	80080d8 <_malloc_r+0x20>
 80081ae:	6005      	str	r5, [r0, #0]
 80081b0:	e7d6      	b.n	8008160 <_malloc_r+0xa8>
 80081b2:	bf00      	nop
 80081b4:	20026000 	.word	0x20026000

080081b8 <__malloc_lock>:
 80081b8:	4801      	ldr	r0, [pc, #4]	@ (80081c0 <__malloc_lock+0x8>)
 80081ba:	f7ff bee8 	b.w	8007f8e <__retarget_lock_acquire_recursive>
 80081be:	bf00      	nop
 80081c0:	20025ff8 	.word	0x20025ff8

080081c4 <__malloc_unlock>:
 80081c4:	4801      	ldr	r0, [pc, #4]	@ (80081cc <__malloc_unlock+0x8>)
 80081c6:	f7ff bee3 	b.w	8007f90 <__retarget_lock_release_recursive>
 80081ca:	bf00      	nop
 80081cc:	20025ff8 	.word	0x20025ff8

080081d0 <__ssputs_r>:
 80081d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d4:	688e      	ldr	r6, [r1, #8]
 80081d6:	461f      	mov	r7, r3
 80081d8:	42be      	cmp	r6, r7
 80081da:	680b      	ldr	r3, [r1, #0]
 80081dc:	4682      	mov	sl, r0
 80081de:	460c      	mov	r4, r1
 80081e0:	4690      	mov	r8, r2
 80081e2:	d82d      	bhi.n	8008240 <__ssputs_r+0x70>
 80081e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80081ec:	d026      	beq.n	800823c <__ssputs_r+0x6c>
 80081ee:	6965      	ldr	r5, [r4, #20]
 80081f0:	6909      	ldr	r1, [r1, #16]
 80081f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081f6:	eba3 0901 	sub.w	r9, r3, r1
 80081fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081fe:	1c7b      	adds	r3, r7, #1
 8008200:	444b      	add	r3, r9
 8008202:	106d      	asrs	r5, r5, #1
 8008204:	429d      	cmp	r5, r3
 8008206:	bf38      	it	cc
 8008208:	461d      	movcc	r5, r3
 800820a:	0553      	lsls	r3, r2, #21
 800820c:	d527      	bpl.n	800825e <__ssputs_r+0x8e>
 800820e:	4629      	mov	r1, r5
 8008210:	f7ff ff52 	bl	80080b8 <_malloc_r>
 8008214:	4606      	mov	r6, r0
 8008216:	b360      	cbz	r0, 8008272 <__ssputs_r+0xa2>
 8008218:	6921      	ldr	r1, [r4, #16]
 800821a:	464a      	mov	r2, r9
 800821c:	f000 fba6 	bl	800896c <memcpy>
 8008220:	89a3      	ldrh	r3, [r4, #12]
 8008222:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800822a:	81a3      	strh	r3, [r4, #12]
 800822c:	6126      	str	r6, [r4, #16]
 800822e:	6165      	str	r5, [r4, #20]
 8008230:	444e      	add	r6, r9
 8008232:	eba5 0509 	sub.w	r5, r5, r9
 8008236:	6026      	str	r6, [r4, #0]
 8008238:	60a5      	str	r5, [r4, #8]
 800823a:	463e      	mov	r6, r7
 800823c:	42be      	cmp	r6, r7
 800823e:	d900      	bls.n	8008242 <__ssputs_r+0x72>
 8008240:	463e      	mov	r6, r7
 8008242:	6820      	ldr	r0, [r4, #0]
 8008244:	4632      	mov	r2, r6
 8008246:	4641      	mov	r1, r8
 8008248:	f000 fb66 	bl	8008918 <memmove>
 800824c:	68a3      	ldr	r3, [r4, #8]
 800824e:	1b9b      	subs	r3, r3, r6
 8008250:	60a3      	str	r3, [r4, #8]
 8008252:	6823      	ldr	r3, [r4, #0]
 8008254:	4433      	add	r3, r6
 8008256:	6023      	str	r3, [r4, #0]
 8008258:	2000      	movs	r0, #0
 800825a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800825e:	462a      	mov	r2, r5
 8008260:	f000 fb99 	bl	8008996 <_realloc_r>
 8008264:	4606      	mov	r6, r0
 8008266:	2800      	cmp	r0, #0
 8008268:	d1e0      	bne.n	800822c <__ssputs_r+0x5c>
 800826a:	6921      	ldr	r1, [r4, #16]
 800826c:	4650      	mov	r0, sl
 800826e:	f7ff feaf 	bl	8007fd0 <_free_r>
 8008272:	230c      	movs	r3, #12
 8008274:	f8ca 3000 	str.w	r3, [sl]
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800827e:	81a3      	strh	r3, [r4, #12]
 8008280:	f04f 30ff 	mov.w	r0, #4294967295
 8008284:	e7e9      	b.n	800825a <__ssputs_r+0x8a>
	...

08008288 <_svfiprintf_r>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	4698      	mov	r8, r3
 800828e:	898b      	ldrh	r3, [r1, #12]
 8008290:	061b      	lsls	r3, r3, #24
 8008292:	b09d      	sub	sp, #116	@ 0x74
 8008294:	4607      	mov	r7, r0
 8008296:	460d      	mov	r5, r1
 8008298:	4614      	mov	r4, r2
 800829a:	d510      	bpl.n	80082be <_svfiprintf_r+0x36>
 800829c:	690b      	ldr	r3, [r1, #16]
 800829e:	b973      	cbnz	r3, 80082be <_svfiprintf_r+0x36>
 80082a0:	2140      	movs	r1, #64	@ 0x40
 80082a2:	f7ff ff09 	bl	80080b8 <_malloc_r>
 80082a6:	6028      	str	r0, [r5, #0]
 80082a8:	6128      	str	r0, [r5, #16]
 80082aa:	b930      	cbnz	r0, 80082ba <_svfiprintf_r+0x32>
 80082ac:	230c      	movs	r3, #12
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295
 80082b4:	b01d      	add	sp, #116	@ 0x74
 80082b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ba:	2340      	movs	r3, #64	@ 0x40
 80082bc:	616b      	str	r3, [r5, #20]
 80082be:	2300      	movs	r3, #0
 80082c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80082c2:	2320      	movs	r3, #32
 80082c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80082cc:	2330      	movs	r3, #48	@ 0x30
 80082ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800846c <_svfiprintf_r+0x1e4>
 80082d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082d6:	f04f 0901 	mov.w	r9, #1
 80082da:	4623      	mov	r3, r4
 80082dc:	469a      	mov	sl, r3
 80082de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082e2:	b10a      	cbz	r2, 80082e8 <_svfiprintf_r+0x60>
 80082e4:	2a25      	cmp	r2, #37	@ 0x25
 80082e6:	d1f9      	bne.n	80082dc <_svfiprintf_r+0x54>
 80082e8:	ebba 0b04 	subs.w	fp, sl, r4
 80082ec:	d00b      	beq.n	8008306 <_svfiprintf_r+0x7e>
 80082ee:	465b      	mov	r3, fp
 80082f0:	4622      	mov	r2, r4
 80082f2:	4629      	mov	r1, r5
 80082f4:	4638      	mov	r0, r7
 80082f6:	f7ff ff6b 	bl	80081d0 <__ssputs_r>
 80082fa:	3001      	adds	r0, #1
 80082fc:	f000 80a7 	beq.w	800844e <_svfiprintf_r+0x1c6>
 8008300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008302:	445a      	add	r2, fp
 8008304:	9209      	str	r2, [sp, #36]	@ 0x24
 8008306:	f89a 3000 	ldrb.w	r3, [sl]
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 809f 	beq.w	800844e <_svfiprintf_r+0x1c6>
 8008310:	2300      	movs	r3, #0
 8008312:	f04f 32ff 	mov.w	r2, #4294967295
 8008316:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800831a:	f10a 0a01 	add.w	sl, sl, #1
 800831e:	9304      	str	r3, [sp, #16]
 8008320:	9307      	str	r3, [sp, #28]
 8008322:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008326:	931a      	str	r3, [sp, #104]	@ 0x68
 8008328:	4654      	mov	r4, sl
 800832a:	2205      	movs	r2, #5
 800832c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008330:	484e      	ldr	r0, [pc, #312]	@ (800846c <_svfiprintf_r+0x1e4>)
 8008332:	f7f7 ff5d 	bl	80001f0 <memchr>
 8008336:	9a04      	ldr	r2, [sp, #16]
 8008338:	b9d8      	cbnz	r0, 8008372 <_svfiprintf_r+0xea>
 800833a:	06d0      	lsls	r0, r2, #27
 800833c:	bf44      	itt	mi
 800833e:	2320      	movmi	r3, #32
 8008340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008344:	0711      	lsls	r1, r2, #28
 8008346:	bf44      	itt	mi
 8008348:	232b      	movmi	r3, #43	@ 0x2b
 800834a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800834e:	f89a 3000 	ldrb.w	r3, [sl]
 8008352:	2b2a      	cmp	r3, #42	@ 0x2a
 8008354:	d015      	beq.n	8008382 <_svfiprintf_r+0xfa>
 8008356:	9a07      	ldr	r2, [sp, #28]
 8008358:	4654      	mov	r4, sl
 800835a:	2000      	movs	r0, #0
 800835c:	f04f 0c0a 	mov.w	ip, #10
 8008360:	4621      	mov	r1, r4
 8008362:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008366:	3b30      	subs	r3, #48	@ 0x30
 8008368:	2b09      	cmp	r3, #9
 800836a:	d94b      	bls.n	8008404 <_svfiprintf_r+0x17c>
 800836c:	b1b0      	cbz	r0, 800839c <_svfiprintf_r+0x114>
 800836e:	9207      	str	r2, [sp, #28]
 8008370:	e014      	b.n	800839c <_svfiprintf_r+0x114>
 8008372:	eba0 0308 	sub.w	r3, r0, r8
 8008376:	fa09 f303 	lsl.w	r3, r9, r3
 800837a:	4313      	orrs	r3, r2
 800837c:	9304      	str	r3, [sp, #16]
 800837e:	46a2      	mov	sl, r4
 8008380:	e7d2      	b.n	8008328 <_svfiprintf_r+0xa0>
 8008382:	9b03      	ldr	r3, [sp, #12]
 8008384:	1d19      	adds	r1, r3, #4
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	9103      	str	r1, [sp, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	bfbb      	ittet	lt
 800838e:	425b      	neglt	r3, r3
 8008390:	f042 0202 	orrlt.w	r2, r2, #2
 8008394:	9307      	strge	r3, [sp, #28]
 8008396:	9307      	strlt	r3, [sp, #28]
 8008398:	bfb8      	it	lt
 800839a:	9204      	strlt	r2, [sp, #16]
 800839c:	7823      	ldrb	r3, [r4, #0]
 800839e:	2b2e      	cmp	r3, #46	@ 0x2e
 80083a0:	d10a      	bne.n	80083b8 <_svfiprintf_r+0x130>
 80083a2:	7863      	ldrb	r3, [r4, #1]
 80083a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80083a6:	d132      	bne.n	800840e <_svfiprintf_r+0x186>
 80083a8:	9b03      	ldr	r3, [sp, #12]
 80083aa:	1d1a      	adds	r2, r3, #4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	9203      	str	r2, [sp, #12]
 80083b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083b4:	3402      	adds	r4, #2
 80083b6:	9305      	str	r3, [sp, #20]
 80083b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800847c <_svfiprintf_r+0x1f4>
 80083bc:	7821      	ldrb	r1, [r4, #0]
 80083be:	2203      	movs	r2, #3
 80083c0:	4650      	mov	r0, sl
 80083c2:	f7f7 ff15 	bl	80001f0 <memchr>
 80083c6:	b138      	cbz	r0, 80083d8 <_svfiprintf_r+0x150>
 80083c8:	9b04      	ldr	r3, [sp, #16]
 80083ca:	eba0 000a 	sub.w	r0, r0, sl
 80083ce:	2240      	movs	r2, #64	@ 0x40
 80083d0:	4082      	lsls	r2, r0
 80083d2:	4313      	orrs	r3, r2
 80083d4:	3401      	adds	r4, #1
 80083d6:	9304      	str	r3, [sp, #16]
 80083d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083dc:	4824      	ldr	r0, [pc, #144]	@ (8008470 <_svfiprintf_r+0x1e8>)
 80083de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083e2:	2206      	movs	r2, #6
 80083e4:	f7f7 ff04 	bl	80001f0 <memchr>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d036      	beq.n	800845a <_svfiprintf_r+0x1d2>
 80083ec:	4b21      	ldr	r3, [pc, #132]	@ (8008474 <_svfiprintf_r+0x1ec>)
 80083ee:	bb1b      	cbnz	r3, 8008438 <_svfiprintf_r+0x1b0>
 80083f0:	9b03      	ldr	r3, [sp, #12]
 80083f2:	3307      	adds	r3, #7
 80083f4:	f023 0307 	bic.w	r3, r3, #7
 80083f8:	3308      	adds	r3, #8
 80083fa:	9303      	str	r3, [sp, #12]
 80083fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083fe:	4433      	add	r3, r6
 8008400:	9309      	str	r3, [sp, #36]	@ 0x24
 8008402:	e76a      	b.n	80082da <_svfiprintf_r+0x52>
 8008404:	fb0c 3202 	mla	r2, ip, r2, r3
 8008408:	460c      	mov	r4, r1
 800840a:	2001      	movs	r0, #1
 800840c:	e7a8      	b.n	8008360 <_svfiprintf_r+0xd8>
 800840e:	2300      	movs	r3, #0
 8008410:	3401      	adds	r4, #1
 8008412:	9305      	str	r3, [sp, #20]
 8008414:	4619      	mov	r1, r3
 8008416:	f04f 0c0a 	mov.w	ip, #10
 800841a:	4620      	mov	r0, r4
 800841c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008420:	3a30      	subs	r2, #48	@ 0x30
 8008422:	2a09      	cmp	r2, #9
 8008424:	d903      	bls.n	800842e <_svfiprintf_r+0x1a6>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0c6      	beq.n	80083b8 <_svfiprintf_r+0x130>
 800842a:	9105      	str	r1, [sp, #20]
 800842c:	e7c4      	b.n	80083b8 <_svfiprintf_r+0x130>
 800842e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008432:	4604      	mov	r4, r0
 8008434:	2301      	movs	r3, #1
 8008436:	e7f0      	b.n	800841a <_svfiprintf_r+0x192>
 8008438:	ab03      	add	r3, sp, #12
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	462a      	mov	r2, r5
 800843e:	4b0e      	ldr	r3, [pc, #56]	@ (8008478 <_svfiprintf_r+0x1f0>)
 8008440:	a904      	add	r1, sp, #16
 8008442:	4638      	mov	r0, r7
 8008444:	f3af 8000 	nop.w
 8008448:	1c42      	adds	r2, r0, #1
 800844a:	4606      	mov	r6, r0
 800844c:	d1d6      	bne.n	80083fc <_svfiprintf_r+0x174>
 800844e:	89ab      	ldrh	r3, [r5, #12]
 8008450:	065b      	lsls	r3, r3, #25
 8008452:	f53f af2d 	bmi.w	80082b0 <_svfiprintf_r+0x28>
 8008456:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008458:	e72c      	b.n	80082b4 <_svfiprintf_r+0x2c>
 800845a:	ab03      	add	r3, sp, #12
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	462a      	mov	r2, r5
 8008460:	4b05      	ldr	r3, [pc, #20]	@ (8008478 <_svfiprintf_r+0x1f0>)
 8008462:	a904      	add	r1, sp, #16
 8008464:	4638      	mov	r0, r7
 8008466:	f000 f879 	bl	800855c <_printf_i>
 800846a:	e7ed      	b.n	8008448 <_svfiprintf_r+0x1c0>
 800846c:	0800a2e7 	.word	0x0800a2e7
 8008470:	0800a2f1 	.word	0x0800a2f1
 8008474:	00000000 	.word	0x00000000
 8008478:	080081d1 	.word	0x080081d1
 800847c:	0800a2ed 	.word	0x0800a2ed

08008480 <_printf_common>:
 8008480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008484:	4616      	mov	r6, r2
 8008486:	4698      	mov	r8, r3
 8008488:	688a      	ldr	r2, [r1, #8]
 800848a:	690b      	ldr	r3, [r1, #16]
 800848c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008490:	4293      	cmp	r3, r2
 8008492:	bfb8      	it	lt
 8008494:	4613      	movlt	r3, r2
 8008496:	6033      	str	r3, [r6, #0]
 8008498:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800849c:	4607      	mov	r7, r0
 800849e:	460c      	mov	r4, r1
 80084a0:	b10a      	cbz	r2, 80084a6 <_printf_common+0x26>
 80084a2:	3301      	adds	r3, #1
 80084a4:	6033      	str	r3, [r6, #0]
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	0699      	lsls	r1, r3, #26
 80084aa:	bf42      	ittt	mi
 80084ac:	6833      	ldrmi	r3, [r6, #0]
 80084ae:	3302      	addmi	r3, #2
 80084b0:	6033      	strmi	r3, [r6, #0]
 80084b2:	6825      	ldr	r5, [r4, #0]
 80084b4:	f015 0506 	ands.w	r5, r5, #6
 80084b8:	d106      	bne.n	80084c8 <_printf_common+0x48>
 80084ba:	f104 0a19 	add.w	sl, r4, #25
 80084be:	68e3      	ldr	r3, [r4, #12]
 80084c0:	6832      	ldr	r2, [r6, #0]
 80084c2:	1a9b      	subs	r3, r3, r2
 80084c4:	42ab      	cmp	r3, r5
 80084c6:	dc26      	bgt.n	8008516 <_printf_common+0x96>
 80084c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084cc:	6822      	ldr	r2, [r4, #0]
 80084ce:	3b00      	subs	r3, #0
 80084d0:	bf18      	it	ne
 80084d2:	2301      	movne	r3, #1
 80084d4:	0692      	lsls	r2, r2, #26
 80084d6:	d42b      	bmi.n	8008530 <_printf_common+0xb0>
 80084d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80084dc:	4641      	mov	r1, r8
 80084de:	4638      	mov	r0, r7
 80084e0:	47c8      	blx	r9
 80084e2:	3001      	adds	r0, #1
 80084e4:	d01e      	beq.n	8008524 <_printf_common+0xa4>
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	6922      	ldr	r2, [r4, #16]
 80084ea:	f003 0306 	and.w	r3, r3, #6
 80084ee:	2b04      	cmp	r3, #4
 80084f0:	bf02      	ittt	eq
 80084f2:	68e5      	ldreq	r5, [r4, #12]
 80084f4:	6833      	ldreq	r3, [r6, #0]
 80084f6:	1aed      	subeq	r5, r5, r3
 80084f8:	68a3      	ldr	r3, [r4, #8]
 80084fa:	bf0c      	ite	eq
 80084fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008500:	2500      	movne	r5, #0
 8008502:	4293      	cmp	r3, r2
 8008504:	bfc4      	itt	gt
 8008506:	1a9b      	subgt	r3, r3, r2
 8008508:	18ed      	addgt	r5, r5, r3
 800850a:	2600      	movs	r6, #0
 800850c:	341a      	adds	r4, #26
 800850e:	42b5      	cmp	r5, r6
 8008510:	d11a      	bne.n	8008548 <_printf_common+0xc8>
 8008512:	2000      	movs	r0, #0
 8008514:	e008      	b.n	8008528 <_printf_common+0xa8>
 8008516:	2301      	movs	r3, #1
 8008518:	4652      	mov	r2, sl
 800851a:	4641      	mov	r1, r8
 800851c:	4638      	mov	r0, r7
 800851e:	47c8      	blx	r9
 8008520:	3001      	adds	r0, #1
 8008522:	d103      	bne.n	800852c <_printf_common+0xac>
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800852c:	3501      	adds	r5, #1
 800852e:	e7c6      	b.n	80084be <_printf_common+0x3e>
 8008530:	18e1      	adds	r1, r4, r3
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	2030      	movs	r0, #48	@ 0x30
 8008536:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800853a:	4422      	add	r2, r4
 800853c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008540:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008544:	3302      	adds	r3, #2
 8008546:	e7c7      	b.n	80084d8 <_printf_common+0x58>
 8008548:	2301      	movs	r3, #1
 800854a:	4622      	mov	r2, r4
 800854c:	4641      	mov	r1, r8
 800854e:	4638      	mov	r0, r7
 8008550:	47c8      	blx	r9
 8008552:	3001      	adds	r0, #1
 8008554:	d0e6      	beq.n	8008524 <_printf_common+0xa4>
 8008556:	3601      	adds	r6, #1
 8008558:	e7d9      	b.n	800850e <_printf_common+0x8e>
	...

0800855c <_printf_i>:
 800855c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008560:	7e0f      	ldrb	r7, [r1, #24]
 8008562:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008564:	2f78      	cmp	r7, #120	@ 0x78
 8008566:	4691      	mov	r9, r2
 8008568:	4680      	mov	r8, r0
 800856a:	460c      	mov	r4, r1
 800856c:	469a      	mov	sl, r3
 800856e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008572:	d807      	bhi.n	8008584 <_printf_i+0x28>
 8008574:	2f62      	cmp	r7, #98	@ 0x62
 8008576:	d80a      	bhi.n	800858e <_printf_i+0x32>
 8008578:	2f00      	cmp	r7, #0
 800857a:	f000 80d2 	beq.w	8008722 <_printf_i+0x1c6>
 800857e:	2f58      	cmp	r7, #88	@ 0x58
 8008580:	f000 80b9 	beq.w	80086f6 <_printf_i+0x19a>
 8008584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008588:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800858c:	e03a      	b.n	8008604 <_printf_i+0xa8>
 800858e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008592:	2b15      	cmp	r3, #21
 8008594:	d8f6      	bhi.n	8008584 <_printf_i+0x28>
 8008596:	a101      	add	r1, pc, #4	@ (adr r1, 800859c <_printf_i+0x40>)
 8008598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800859c:	080085f5 	.word	0x080085f5
 80085a0:	08008609 	.word	0x08008609
 80085a4:	08008585 	.word	0x08008585
 80085a8:	08008585 	.word	0x08008585
 80085ac:	08008585 	.word	0x08008585
 80085b0:	08008585 	.word	0x08008585
 80085b4:	08008609 	.word	0x08008609
 80085b8:	08008585 	.word	0x08008585
 80085bc:	08008585 	.word	0x08008585
 80085c0:	08008585 	.word	0x08008585
 80085c4:	08008585 	.word	0x08008585
 80085c8:	08008709 	.word	0x08008709
 80085cc:	08008633 	.word	0x08008633
 80085d0:	080086c3 	.word	0x080086c3
 80085d4:	08008585 	.word	0x08008585
 80085d8:	08008585 	.word	0x08008585
 80085dc:	0800872b 	.word	0x0800872b
 80085e0:	08008585 	.word	0x08008585
 80085e4:	08008633 	.word	0x08008633
 80085e8:	08008585 	.word	0x08008585
 80085ec:	08008585 	.word	0x08008585
 80085f0:	080086cb 	.word	0x080086cb
 80085f4:	6833      	ldr	r3, [r6, #0]
 80085f6:	1d1a      	adds	r2, r3, #4
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	6032      	str	r2, [r6, #0]
 80085fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008600:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008604:	2301      	movs	r3, #1
 8008606:	e09d      	b.n	8008744 <_printf_i+0x1e8>
 8008608:	6833      	ldr	r3, [r6, #0]
 800860a:	6820      	ldr	r0, [r4, #0]
 800860c:	1d19      	adds	r1, r3, #4
 800860e:	6031      	str	r1, [r6, #0]
 8008610:	0606      	lsls	r6, r0, #24
 8008612:	d501      	bpl.n	8008618 <_printf_i+0xbc>
 8008614:	681d      	ldr	r5, [r3, #0]
 8008616:	e003      	b.n	8008620 <_printf_i+0xc4>
 8008618:	0645      	lsls	r5, r0, #25
 800861a:	d5fb      	bpl.n	8008614 <_printf_i+0xb8>
 800861c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008620:	2d00      	cmp	r5, #0
 8008622:	da03      	bge.n	800862c <_printf_i+0xd0>
 8008624:	232d      	movs	r3, #45	@ 0x2d
 8008626:	426d      	negs	r5, r5
 8008628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800862c:	4859      	ldr	r0, [pc, #356]	@ (8008794 <_printf_i+0x238>)
 800862e:	230a      	movs	r3, #10
 8008630:	e011      	b.n	8008656 <_printf_i+0xfa>
 8008632:	6821      	ldr	r1, [r4, #0]
 8008634:	6833      	ldr	r3, [r6, #0]
 8008636:	0608      	lsls	r0, r1, #24
 8008638:	f853 5b04 	ldr.w	r5, [r3], #4
 800863c:	d402      	bmi.n	8008644 <_printf_i+0xe8>
 800863e:	0649      	lsls	r1, r1, #25
 8008640:	bf48      	it	mi
 8008642:	b2ad      	uxthmi	r5, r5
 8008644:	2f6f      	cmp	r7, #111	@ 0x6f
 8008646:	4853      	ldr	r0, [pc, #332]	@ (8008794 <_printf_i+0x238>)
 8008648:	6033      	str	r3, [r6, #0]
 800864a:	bf14      	ite	ne
 800864c:	230a      	movne	r3, #10
 800864e:	2308      	moveq	r3, #8
 8008650:	2100      	movs	r1, #0
 8008652:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008656:	6866      	ldr	r6, [r4, #4]
 8008658:	60a6      	str	r6, [r4, #8]
 800865a:	2e00      	cmp	r6, #0
 800865c:	bfa2      	ittt	ge
 800865e:	6821      	ldrge	r1, [r4, #0]
 8008660:	f021 0104 	bicge.w	r1, r1, #4
 8008664:	6021      	strge	r1, [r4, #0]
 8008666:	b90d      	cbnz	r5, 800866c <_printf_i+0x110>
 8008668:	2e00      	cmp	r6, #0
 800866a:	d04b      	beq.n	8008704 <_printf_i+0x1a8>
 800866c:	4616      	mov	r6, r2
 800866e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008672:	fb03 5711 	mls	r7, r3, r1, r5
 8008676:	5dc7      	ldrb	r7, [r0, r7]
 8008678:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800867c:	462f      	mov	r7, r5
 800867e:	42bb      	cmp	r3, r7
 8008680:	460d      	mov	r5, r1
 8008682:	d9f4      	bls.n	800866e <_printf_i+0x112>
 8008684:	2b08      	cmp	r3, #8
 8008686:	d10b      	bne.n	80086a0 <_printf_i+0x144>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	07df      	lsls	r7, r3, #31
 800868c:	d508      	bpl.n	80086a0 <_printf_i+0x144>
 800868e:	6923      	ldr	r3, [r4, #16]
 8008690:	6861      	ldr	r1, [r4, #4]
 8008692:	4299      	cmp	r1, r3
 8008694:	bfde      	ittt	le
 8008696:	2330      	movle	r3, #48	@ 0x30
 8008698:	f806 3c01 	strble.w	r3, [r6, #-1]
 800869c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086a0:	1b92      	subs	r2, r2, r6
 80086a2:	6122      	str	r2, [r4, #16]
 80086a4:	f8cd a000 	str.w	sl, [sp]
 80086a8:	464b      	mov	r3, r9
 80086aa:	aa03      	add	r2, sp, #12
 80086ac:	4621      	mov	r1, r4
 80086ae:	4640      	mov	r0, r8
 80086b0:	f7ff fee6 	bl	8008480 <_printf_common>
 80086b4:	3001      	adds	r0, #1
 80086b6:	d14a      	bne.n	800874e <_printf_i+0x1f2>
 80086b8:	f04f 30ff 	mov.w	r0, #4294967295
 80086bc:	b004      	add	sp, #16
 80086be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	f043 0320 	orr.w	r3, r3, #32
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	4833      	ldr	r0, [pc, #204]	@ (8008798 <_printf_i+0x23c>)
 80086cc:	2778      	movs	r7, #120	@ 0x78
 80086ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	6831      	ldr	r1, [r6, #0]
 80086d6:	061f      	lsls	r7, r3, #24
 80086d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80086dc:	d402      	bmi.n	80086e4 <_printf_i+0x188>
 80086de:	065f      	lsls	r7, r3, #25
 80086e0:	bf48      	it	mi
 80086e2:	b2ad      	uxthmi	r5, r5
 80086e4:	6031      	str	r1, [r6, #0]
 80086e6:	07d9      	lsls	r1, r3, #31
 80086e8:	bf44      	itt	mi
 80086ea:	f043 0320 	orrmi.w	r3, r3, #32
 80086ee:	6023      	strmi	r3, [r4, #0]
 80086f0:	b11d      	cbz	r5, 80086fa <_printf_i+0x19e>
 80086f2:	2310      	movs	r3, #16
 80086f4:	e7ac      	b.n	8008650 <_printf_i+0xf4>
 80086f6:	4827      	ldr	r0, [pc, #156]	@ (8008794 <_printf_i+0x238>)
 80086f8:	e7e9      	b.n	80086ce <_printf_i+0x172>
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	f023 0320 	bic.w	r3, r3, #32
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	e7f6      	b.n	80086f2 <_printf_i+0x196>
 8008704:	4616      	mov	r6, r2
 8008706:	e7bd      	b.n	8008684 <_printf_i+0x128>
 8008708:	6833      	ldr	r3, [r6, #0]
 800870a:	6825      	ldr	r5, [r4, #0]
 800870c:	6961      	ldr	r1, [r4, #20]
 800870e:	1d18      	adds	r0, r3, #4
 8008710:	6030      	str	r0, [r6, #0]
 8008712:	062e      	lsls	r6, r5, #24
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	d501      	bpl.n	800871c <_printf_i+0x1c0>
 8008718:	6019      	str	r1, [r3, #0]
 800871a:	e002      	b.n	8008722 <_printf_i+0x1c6>
 800871c:	0668      	lsls	r0, r5, #25
 800871e:	d5fb      	bpl.n	8008718 <_printf_i+0x1bc>
 8008720:	8019      	strh	r1, [r3, #0]
 8008722:	2300      	movs	r3, #0
 8008724:	6123      	str	r3, [r4, #16]
 8008726:	4616      	mov	r6, r2
 8008728:	e7bc      	b.n	80086a4 <_printf_i+0x148>
 800872a:	6833      	ldr	r3, [r6, #0]
 800872c:	1d1a      	adds	r2, r3, #4
 800872e:	6032      	str	r2, [r6, #0]
 8008730:	681e      	ldr	r6, [r3, #0]
 8008732:	6862      	ldr	r2, [r4, #4]
 8008734:	2100      	movs	r1, #0
 8008736:	4630      	mov	r0, r6
 8008738:	f7f7 fd5a 	bl	80001f0 <memchr>
 800873c:	b108      	cbz	r0, 8008742 <_printf_i+0x1e6>
 800873e:	1b80      	subs	r0, r0, r6
 8008740:	6060      	str	r0, [r4, #4]
 8008742:	6863      	ldr	r3, [r4, #4]
 8008744:	6123      	str	r3, [r4, #16]
 8008746:	2300      	movs	r3, #0
 8008748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800874c:	e7aa      	b.n	80086a4 <_printf_i+0x148>
 800874e:	6923      	ldr	r3, [r4, #16]
 8008750:	4632      	mov	r2, r6
 8008752:	4649      	mov	r1, r9
 8008754:	4640      	mov	r0, r8
 8008756:	47d0      	blx	sl
 8008758:	3001      	adds	r0, #1
 800875a:	d0ad      	beq.n	80086b8 <_printf_i+0x15c>
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	079b      	lsls	r3, r3, #30
 8008760:	d413      	bmi.n	800878a <_printf_i+0x22e>
 8008762:	68e0      	ldr	r0, [r4, #12]
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	4298      	cmp	r0, r3
 8008768:	bfb8      	it	lt
 800876a:	4618      	movlt	r0, r3
 800876c:	e7a6      	b.n	80086bc <_printf_i+0x160>
 800876e:	2301      	movs	r3, #1
 8008770:	4632      	mov	r2, r6
 8008772:	4649      	mov	r1, r9
 8008774:	4640      	mov	r0, r8
 8008776:	47d0      	blx	sl
 8008778:	3001      	adds	r0, #1
 800877a:	d09d      	beq.n	80086b8 <_printf_i+0x15c>
 800877c:	3501      	adds	r5, #1
 800877e:	68e3      	ldr	r3, [r4, #12]
 8008780:	9903      	ldr	r1, [sp, #12]
 8008782:	1a5b      	subs	r3, r3, r1
 8008784:	42ab      	cmp	r3, r5
 8008786:	dcf2      	bgt.n	800876e <_printf_i+0x212>
 8008788:	e7eb      	b.n	8008762 <_printf_i+0x206>
 800878a:	2500      	movs	r5, #0
 800878c:	f104 0619 	add.w	r6, r4, #25
 8008790:	e7f5      	b.n	800877e <_printf_i+0x222>
 8008792:	bf00      	nop
 8008794:	0800a2f8 	.word	0x0800a2f8
 8008798:	0800a309 	.word	0x0800a309

0800879c <__sflush_r>:
 800879c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a4:	0716      	lsls	r6, r2, #28
 80087a6:	4605      	mov	r5, r0
 80087a8:	460c      	mov	r4, r1
 80087aa:	d454      	bmi.n	8008856 <__sflush_r+0xba>
 80087ac:	684b      	ldr	r3, [r1, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	dc02      	bgt.n	80087b8 <__sflush_r+0x1c>
 80087b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	dd48      	ble.n	800884a <__sflush_r+0xae>
 80087b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087ba:	2e00      	cmp	r6, #0
 80087bc:	d045      	beq.n	800884a <__sflush_r+0xae>
 80087be:	2300      	movs	r3, #0
 80087c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087c4:	682f      	ldr	r7, [r5, #0]
 80087c6:	6a21      	ldr	r1, [r4, #32]
 80087c8:	602b      	str	r3, [r5, #0]
 80087ca:	d030      	beq.n	800882e <__sflush_r+0x92>
 80087cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	0759      	lsls	r1, r3, #29
 80087d2:	d505      	bpl.n	80087e0 <__sflush_r+0x44>
 80087d4:	6863      	ldr	r3, [r4, #4]
 80087d6:	1ad2      	subs	r2, r2, r3
 80087d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087da:	b10b      	cbz	r3, 80087e0 <__sflush_r+0x44>
 80087dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087de:	1ad2      	subs	r2, r2, r3
 80087e0:	2300      	movs	r3, #0
 80087e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087e4:	6a21      	ldr	r1, [r4, #32]
 80087e6:	4628      	mov	r0, r5
 80087e8:	47b0      	blx	r6
 80087ea:	1c43      	adds	r3, r0, #1
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	d106      	bne.n	80087fe <__sflush_r+0x62>
 80087f0:	6829      	ldr	r1, [r5, #0]
 80087f2:	291d      	cmp	r1, #29
 80087f4:	d82b      	bhi.n	800884e <__sflush_r+0xb2>
 80087f6:	4a2a      	ldr	r2, [pc, #168]	@ (80088a0 <__sflush_r+0x104>)
 80087f8:	410a      	asrs	r2, r1
 80087fa:	07d6      	lsls	r6, r2, #31
 80087fc:	d427      	bmi.n	800884e <__sflush_r+0xb2>
 80087fe:	2200      	movs	r2, #0
 8008800:	6062      	str	r2, [r4, #4]
 8008802:	04d9      	lsls	r1, r3, #19
 8008804:	6922      	ldr	r2, [r4, #16]
 8008806:	6022      	str	r2, [r4, #0]
 8008808:	d504      	bpl.n	8008814 <__sflush_r+0x78>
 800880a:	1c42      	adds	r2, r0, #1
 800880c:	d101      	bne.n	8008812 <__sflush_r+0x76>
 800880e:	682b      	ldr	r3, [r5, #0]
 8008810:	b903      	cbnz	r3, 8008814 <__sflush_r+0x78>
 8008812:	6560      	str	r0, [r4, #84]	@ 0x54
 8008814:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008816:	602f      	str	r7, [r5, #0]
 8008818:	b1b9      	cbz	r1, 800884a <__sflush_r+0xae>
 800881a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800881e:	4299      	cmp	r1, r3
 8008820:	d002      	beq.n	8008828 <__sflush_r+0x8c>
 8008822:	4628      	mov	r0, r5
 8008824:	f7ff fbd4 	bl	8007fd0 <_free_r>
 8008828:	2300      	movs	r3, #0
 800882a:	6363      	str	r3, [r4, #52]	@ 0x34
 800882c:	e00d      	b.n	800884a <__sflush_r+0xae>
 800882e:	2301      	movs	r3, #1
 8008830:	4628      	mov	r0, r5
 8008832:	47b0      	blx	r6
 8008834:	4602      	mov	r2, r0
 8008836:	1c50      	adds	r0, r2, #1
 8008838:	d1c9      	bne.n	80087ce <__sflush_r+0x32>
 800883a:	682b      	ldr	r3, [r5, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d0c6      	beq.n	80087ce <__sflush_r+0x32>
 8008840:	2b1d      	cmp	r3, #29
 8008842:	d001      	beq.n	8008848 <__sflush_r+0xac>
 8008844:	2b16      	cmp	r3, #22
 8008846:	d11e      	bne.n	8008886 <__sflush_r+0xea>
 8008848:	602f      	str	r7, [r5, #0]
 800884a:	2000      	movs	r0, #0
 800884c:	e022      	b.n	8008894 <__sflush_r+0xf8>
 800884e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008852:	b21b      	sxth	r3, r3
 8008854:	e01b      	b.n	800888e <__sflush_r+0xf2>
 8008856:	690f      	ldr	r7, [r1, #16]
 8008858:	2f00      	cmp	r7, #0
 800885a:	d0f6      	beq.n	800884a <__sflush_r+0xae>
 800885c:	0793      	lsls	r3, r2, #30
 800885e:	680e      	ldr	r6, [r1, #0]
 8008860:	bf08      	it	eq
 8008862:	694b      	ldreq	r3, [r1, #20]
 8008864:	600f      	str	r7, [r1, #0]
 8008866:	bf18      	it	ne
 8008868:	2300      	movne	r3, #0
 800886a:	eba6 0807 	sub.w	r8, r6, r7
 800886e:	608b      	str	r3, [r1, #8]
 8008870:	f1b8 0f00 	cmp.w	r8, #0
 8008874:	dde9      	ble.n	800884a <__sflush_r+0xae>
 8008876:	6a21      	ldr	r1, [r4, #32]
 8008878:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800887a:	4643      	mov	r3, r8
 800887c:	463a      	mov	r2, r7
 800887e:	4628      	mov	r0, r5
 8008880:	47b0      	blx	r6
 8008882:	2800      	cmp	r0, #0
 8008884:	dc08      	bgt.n	8008898 <__sflush_r+0xfc>
 8008886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800888e:	81a3      	strh	r3, [r4, #12]
 8008890:	f04f 30ff 	mov.w	r0, #4294967295
 8008894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008898:	4407      	add	r7, r0
 800889a:	eba8 0800 	sub.w	r8, r8, r0
 800889e:	e7e7      	b.n	8008870 <__sflush_r+0xd4>
 80088a0:	dfbffffe 	.word	0xdfbffffe

080088a4 <_fflush_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	690b      	ldr	r3, [r1, #16]
 80088a8:	4605      	mov	r5, r0
 80088aa:	460c      	mov	r4, r1
 80088ac:	b913      	cbnz	r3, 80088b4 <_fflush_r+0x10>
 80088ae:	2500      	movs	r5, #0
 80088b0:	4628      	mov	r0, r5
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	b118      	cbz	r0, 80088be <_fflush_r+0x1a>
 80088b6:	6a03      	ldr	r3, [r0, #32]
 80088b8:	b90b      	cbnz	r3, 80088be <_fflush_r+0x1a>
 80088ba:	f7ff fa55 	bl	8007d68 <__sinit>
 80088be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d0f3      	beq.n	80088ae <_fflush_r+0xa>
 80088c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088c8:	07d0      	lsls	r0, r2, #31
 80088ca:	d404      	bmi.n	80088d6 <_fflush_r+0x32>
 80088cc:	0599      	lsls	r1, r3, #22
 80088ce:	d402      	bmi.n	80088d6 <_fflush_r+0x32>
 80088d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088d2:	f7ff fb5c 	bl	8007f8e <__retarget_lock_acquire_recursive>
 80088d6:	4628      	mov	r0, r5
 80088d8:	4621      	mov	r1, r4
 80088da:	f7ff ff5f 	bl	800879c <__sflush_r>
 80088de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088e0:	07da      	lsls	r2, r3, #31
 80088e2:	4605      	mov	r5, r0
 80088e4:	d4e4      	bmi.n	80088b0 <_fflush_r+0xc>
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	059b      	lsls	r3, r3, #22
 80088ea:	d4e1      	bmi.n	80088b0 <_fflush_r+0xc>
 80088ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088ee:	f7ff fb4f 	bl	8007f90 <__retarget_lock_release_recursive>
 80088f2:	e7dd      	b.n	80088b0 <_fflush_r+0xc>

080088f4 <fiprintf>:
 80088f4:	b40e      	push	{r1, r2, r3}
 80088f6:	b503      	push	{r0, r1, lr}
 80088f8:	4601      	mov	r1, r0
 80088fa:	ab03      	add	r3, sp, #12
 80088fc:	4805      	ldr	r0, [pc, #20]	@ (8008914 <fiprintf+0x20>)
 80088fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008902:	6800      	ldr	r0, [r0, #0]
 8008904:	9301      	str	r3, [sp, #4]
 8008906:	f000 f89d 	bl	8008a44 <_vfiprintf_r>
 800890a:	b002      	add	sp, #8
 800890c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008910:	b003      	add	sp, #12
 8008912:	4770      	bx	lr
 8008914:	20000028 	.word	0x20000028

08008918 <memmove>:
 8008918:	4288      	cmp	r0, r1
 800891a:	b510      	push	{r4, lr}
 800891c:	eb01 0402 	add.w	r4, r1, r2
 8008920:	d902      	bls.n	8008928 <memmove+0x10>
 8008922:	4284      	cmp	r4, r0
 8008924:	4623      	mov	r3, r4
 8008926:	d807      	bhi.n	8008938 <memmove+0x20>
 8008928:	1e43      	subs	r3, r0, #1
 800892a:	42a1      	cmp	r1, r4
 800892c:	d008      	beq.n	8008940 <memmove+0x28>
 800892e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008932:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008936:	e7f8      	b.n	800892a <memmove+0x12>
 8008938:	4402      	add	r2, r0
 800893a:	4601      	mov	r1, r0
 800893c:	428a      	cmp	r2, r1
 800893e:	d100      	bne.n	8008942 <memmove+0x2a>
 8008940:	bd10      	pop	{r4, pc}
 8008942:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008946:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800894a:	e7f7      	b.n	800893c <memmove+0x24>

0800894c <_sbrk_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4d06      	ldr	r5, [pc, #24]	@ (8008968 <_sbrk_r+0x1c>)
 8008950:	2300      	movs	r3, #0
 8008952:	4604      	mov	r4, r0
 8008954:	4608      	mov	r0, r1
 8008956:	602b      	str	r3, [r5, #0]
 8008958:	f7fb fa06 	bl	8003d68 <_sbrk>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_sbrk_r+0x1a>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	b103      	cbz	r3, 8008966 <_sbrk_r+0x1a>
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	20025ff4 	.word	0x20025ff4

0800896c <memcpy>:
 800896c:	440a      	add	r2, r1
 800896e:	4291      	cmp	r1, r2
 8008970:	f100 33ff 	add.w	r3, r0, #4294967295
 8008974:	d100      	bne.n	8008978 <memcpy+0xc>
 8008976:	4770      	bx	lr
 8008978:	b510      	push	{r4, lr}
 800897a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800897e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008982:	4291      	cmp	r1, r2
 8008984:	d1f9      	bne.n	800897a <memcpy+0xe>
 8008986:	bd10      	pop	{r4, pc}

08008988 <abort>:
 8008988:	b508      	push	{r3, lr}
 800898a:	2006      	movs	r0, #6
 800898c:	f000 fa2e 	bl	8008dec <raise>
 8008990:	2001      	movs	r0, #1
 8008992:	f7fb f970 	bl	8003c76 <_exit>

08008996 <_realloc_r>:
 8008996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800899a:	4680      	mov	r8, r0
 800899c:	4615      	mov	r5, r2
 800899e:	460c      	mov	r4, r1
 80089a0:	b921      	cbnz	r1, 80089ac <_realloc_r+0x16>
 80089a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089a6:	4611      	mov	r1, r2
 80089a8:	f7ff bb86 	b.w	80080b8 <_malloc_r>
 80089ac:	b92a      	cbnz	r2, 80089ba <_realloc_r+0x24>
 80089ae:	f7ff fb0f 	bl	8007fd0 <_free_r>
 80089b2:	2400      	movs	r4, #0
 80089b4:	4620      	mov	r0, r4
 80089b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ba:	f000 fa33 	bl	8008e24 <_malloc_usable_size_r>
 80089be:	4285      	cmp	r5, r0
 80089c0:	4606      	mov	r6, r0
 80089c2:	d802      	bhi.n	80089ca <_realloc_r+0x34>
 80089c4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80089c8:	d8f4      	bhi.n	80089b4 <_realloc_r+0x1e>
 80089ca:	4629      	mov	r1, r5
 80089cc:	4640      	mov	r0, r8
 80089ce:	f7ff fb73 	bl	80080b8 <_malloc_r>
 80089d2:	4607      	mov	r7, r0
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d0ec      	beq.n	80089b2 <_realloc_r+0x1c>
 80089d8:	42b5      	cmp	r5, r6
 80089da:	462a      	mov	r2, r5
 80089dc:	4621      	mov	r1, r4
 80089de:	bf28      	it	cs
 80089e0:	4632      	movcs	r2, r6
 80089e2:	f7ff ffc3 	bl	800896c <memcpy>
 80089e6:	4621      	mov	r1, r4
 80089e8:	4640      	mov	r0, r8
 80089ea:	f7ff faf1 	bl	8007fd0 <_free_r>
 80089ee:	463c      	mov	r4, r7
 80089f0:	e7e0      	b.n	80089b4 <_realloc_r+0x1e>

080089f2 <__sfputc_r>:
 80089f2:	6893      	ldr	r3, [r2, #8]
 80089f4:	3b01      	subs	r3, #1
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	b410      	push	{r4}
 80089fa:	6093      	str	r3, [r2, #8]
 80089fc:	da08      	bge.n	8008a10 <__sfputc_r+0x1e>
 80089fe:	6994      	ldr	r4, [r2, #24]
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	db01      	blt.n	8008a08 <__sfputc_r+0x16>
 8008a04:	290a      	cmp	r1, #10
 8008a06:	d103      	bne.n	8008a10 <__sfputc_r+0x1e>
 8008a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a0c:	f000 b932 	b.w	8008c74 <__swbuf_r>
 8008a10:	6813      	ldr	r3, [r2, #0]
 8008a12:	1c58      	adds	r0, r3, #1
 8008a14:	6010      	str	r0, [r2, #0]
 8008a16:	7019      	strb	r1, [r3, #0]
 8008a18:	4608      	mov	r0, r1
 8008a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <__sfputs_r>:
 8008a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a22:	4606      	mov	r6, r0
 8008a24:	460f      	mov	r7, r1
 8008a26:	4614      	mov	r4, r2
 8008a28:	18d5      	adds	r5, r2, r3
 8008a2a:	42ac      	cmp	r4, r5
 8008a2c:	d101      	bne.n	8008a32 <__sfputs_r+0x12>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	e007      	b.n	8008a42 <__sfputs_r+0x22>
 8008a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a36:	463a      	mov	r2, r7
 8008a38:	4630      	mov	r0, r6
 8008a3a:	f7ff ffda 	bl	80089f2 <__sfputc_r>
 8008a3e:	1c43      	adds	r3, r0, #1
 8008a40:	d1f3      	bne.n	8008a2a <__sfputs_r+0xa>
 8008a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a44 <_vfiprintf_r>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	460d      	mov	r5, r1
 8008a4a:	b09d      	sub	sp, #116	@ 0x74
 8008a4c:	4614      	mov	r4, r2
 8008a4e:	4698      	mov	r8, r3
 8008a50:	4606      	mov	r6, r0
 8008a52:	b118      	cbz	r0, 8008a5c <_vfiprintf_r+0x18>
 8008a54:	6a03      	ldr	r3, [r0, #32]
 8008a56:	b90b      	cbnz	r3, 8008a5c <_vfiprintf_r+0x18>
 8008a58:	f7ff f986 	bl	8007d68 <__sinit>
 8008a5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a5e:	07d9      	lsls	r1, r3, #31
 8008a60:	d405      	bmi.n	8008a6e <_vfiprintf_r+0x2a>
 8008a62:	89ab      	ldrh	r3, [r5, #12]
 8008a64:	059a      	lsls	r2, r3, #22
 8008a66:	d402      	bmi.n	8008a6e <_vfiprintf_r+0x2a>
 8008a68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a6a:	f7ff fa90 	bl	8007f8e <__retarget_lock_acquire_recursive>
 8008a6e:	89ab      	ldrh	r3, [r5, #12]
 8008a70:	071b      	lsls	r3, r3, #28
 8008a72:	d501      	bpl.n	8008a78 <_vfiprintf_r+0x34>
 8008a74:	692b      	ldr	r3, [r5, #16]
 8008a76:	b99b      	cbnz	r3, 8008aa0 <_vfiprintf_r+0x5c>
 8008a78:	4629      	mov	r1, r5
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f000 f938 	bl	8008cf0 <__swsetup_r>
 8008a80:	b170      	cbz	r0, 8008aa0 <_vfiprintf_r+0x5c>
 8008a82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a84:	07dc      	lsls	r4, r3, #31
 8008a86:	d504      	bpl.n	8008a92 <_vfiprintf_r+0x4e>
 8008a88:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8c:	b01d      	add	sp, #116	@ 0x74
 8008a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a92:	89ab      	ldrh	r3, [r5, #12]
 8008a94:	0598      	lsls	r0, r3, #22
 8008a96:	d4f7      	bmi.n	8008a88 <_vfiprintf_r+0x44>
 8008a98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a9a:	f7ff fa79 	bl	8007f90 <__retarget_lock_release_recursive>
 8008a9e:	e7f3      	b.n	8008a88 <_vfiprintf_r+0x44>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aa4:	2320      	movs	r3, #32
 8008aa6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008aaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aae:	2330      	movs	r3, #48	@ 0x30
 8008ab0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c60 <_vfiprintf_r+0x21c>
 8008ab4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ab8:	f04f 0901 	mov.w	r9, #1
 8008abc:	4623      	mov	r3, r4
 8008abe:	469a      	mov	sl, r3
 8008ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ac4:	b10a      	cbz	r2, 8008aca <_vfiprintf_r+0x86>
 8008ac6:	2a25      	cmp	r2, #37	@ 0x25
 8008ac8:	d1f9      	bne.n	8008abe <_vfiprintf_r+0x7a>
 8008aca:	ebba 0b04 	subs.w	fp, sl, r4
 8008ace:	d00b      	beq.n	8008ae8 <_vfiprintf_r+0xa4>
 8008ad0:	465b      	mov	r3, fp
 8008ad2:	4622      	mov	r2, r4
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	f7ff ffa2 	bl	8008a20 <__sfputs_r>
 8008adc:	3001      	adds	r0, #1
 8008ade:	f000 80a7 	beq.w	8008c30 <_vfiprintf_r+0x1ec>
 8008ae2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ae4:	445a      	add	r2, fp
 8008ae6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 809f 	beq.w	8008c30 <_vfiprintf_r+0x1ec>
 8008af2:	2300      	movs	r3, #0
 8008af4:	f04f 32ff 	mov.w	r2, #4294967295
 8008af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008afc:	f10a 0a01 	add.w	sl, sl, #1
 8008b00:	9304      	str	r3, [sp, #16]
 8008b02:	9307      	str	r3, [sp, #28]
 8008b04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b08:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b0a:	4654      	mov	r4, sl
 8008b0c:	2205      	movs	r2, #5
 8008b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b12:	4853      	ldr	r0, [pc, #332]	@ (8008c60 <_vfiprintf_r+0x21c>)
 8008b14:	f7f7 fb6c 	bl	80001f0 <memchr>
 8008b18:	9a04      	ldr	r2, [sp, #16]
 8008b1a:	b9d8      	cbnz	r0, 8008b54 <_vfiprintf_r+0x110>
 8008b1c:	06d1      	lsls	r1, r2, #27
 8008b1e:	bf44      	itt	mi
 8008b20:	2320      	movmi	r3, #32
 8008b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b26:	0713      	lsls	r3, r2, #28
 8008b28:	bf44      	itt	mi
 8008b2a:	232b      	movmi	r3, #43	@ 0x2b
 8008b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b30:	f89a 3000 	ldrb.w	r3, [sl]
 8008b34:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b36:	d015      	beq.n	8008b64 <_vfiprintf_r+0x120>
 8008b38:	9a07      	ldr	r2, [sp, #28]
 8008b3a:	4654      	mov	r4, sl
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	f04f 0c0a 	mov.w	ip, #10
 8008b42:	4621      	mov	r1, r4
 8008b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b48:	3b30      	subs	r3, #48	@ 0x30
 8008b4a:	2b09      	cmp	r3, #9
 8008b4c:	d94b      	bls.n	8008be6 <_vfiprintf_r+0x1a2>
 8008b4e:	b1b0      	cbz	r0, 8008b7e <_vfiprintf_r+0x13a>
 8008b50:	9207      	str	r2, [sp, #28]
 8008b52:	e014      	b.n	8008b7e <_vfiprintf_r+0x13a>
 8008b54:	eba0 0308 	sub.w	r3, r0, r8
 8008b58:	fa09 f303 	lsl.w	r3, r9, r3
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	9304      	str	r3, [sp, #16]
 8008b60:	46a2      	mov	sl, r4
 8008b62:	e7d2      	b.n	8008b0a <_vfiprintf_r+0xc6>
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	1d19      	adds	r1, r3, #4
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	9103      	str	r1, [sp, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bfbb      	ittet	lt
 8008b70:	425b      	neglt	r3, r3
 8008b72:	f042 0202 	orrlt.w	r2, r2, #2
 8008b76:	9307      	strge	r3, [sp, #28]
 8008b78:	9307      	strlt	r3, [sp, #28]
 8008b7a:	bfb8      	it	lt
 8008b7c:	9204      	strlt	r2, [sp, #16]
 8008b7e:	7823      	ldrb	r3, [r4, #0]
 8008b80:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b82:	d10a      	bne.n	8008b9a <_vfiprintf_r+0x156>
 8008b84:	7863      	ldrb	r3, [r4, #1]
 8008b86:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b88:	d132      	bne.n	8008bf0 <_vfiprintf_r+0x1ac>
 8008b8a:	9b03      	ldr	r3, [sp, #12]
 8008b8c:	1d1a      	adds	r2, r3, #4
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	9203      	str	r2, [sp, #12]
 8008b92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b96:	3402      	adds	r4, #2
 8008b98:	9305      	str	r3, [sp, #20]
 8008b9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c70 <_vfiprintf_r+0x22c>
 8008b9e:	7821      	ldrb	r1, [r4, #0]
 8008ba0:	2203      	movs	r2, #3
 8008ba2:	4650      	mov	r0, sl
 8008ba4:	f7f7 fb24 	bl	80001f0 <memchr>
 8008ba8:	b138      	cbz	r0, 8008bba <_vfiprintf_r+0x176>
 8008baa:	9b04      	ldr	r3, [sp, #16]
 8008bac:	eba0 000a 	sub.w	r0, r0, sl
 8008bb0:	2240      	movs	r2, #64	@ 0x40
 8008bb2:	4082      	lsls	r2, r0
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	3401      	adds	r4, #1
 8008bb8:	9304      	str	r3, [sp, #16]
 8008bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bbe:	4829      	ldr	r0, [pc, #164]	@ (8008c64 <_vfiprintf_r+0x220>)
 8008bc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bc4:	2206      	movs	r2, #6
 8008bc6:	f7f7 fb13 	bl	80001f0 <memchr>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d03f      	beq.n	8008c4e <_vfiprintf_r+0x20a>
 8008bce:	4b26      	ldr	r3, [pc, #152]	@ (8008c68 <_vfiprintf_r+0x224>)
 8008bd0:	bb1b      	cbnz	r3, 8008c1a <_vfiprintf_r+0x1d6>
 8008bd2:	9b03      	ldr	r3, [sp, #12]
 8008bd4:	3307      	adds	r3, #7
 8008bd6:	f023 0307 	bic.w	r3, r3, #7
 8008bda:	3308      	adds	r3, #8
 8008bdc:	9303      	str	r3, [sp, #12]
 8008bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008be0:	443b      	add	r3, r7
 8008be2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008be4:	e76a      	b.n	8008abc <_vfiprintf_r+0x78>
 8008be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bea:	460c      	mov	r4, r1
 8008bec:	2001      	movs	r0, #1
 8008bee:	e7a8      	b.n	8008b42 <_vfiprintf_r+0xfe>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	3401      	adds	r4, #1
 8008bf4:	9305      	str	r3, [sp, #20]
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	f04f 0c0a 	mov.w	ip, #10
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c02:	3a30      	subs	r2, #48	@ 0x30
 8008c04:	2a09      	cmp	r2, #9
 8008c06:	d903      	bls.n	8008c10 <_vfiprintf_r+0x1cc>
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d0c6      	beq.n	8008b9a <_vfiprintf_r+0x156>
 8008c0c:	9105      	str	r1, [sp, #20]
 8008c0e:	e7c4      	b.n	8008b9a <_vfiprintf_r+0x156>
 8008c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c14:	4604      	mov	r4, r0
 8008c16:	2301      	movs	r3, #1
 8008c18:	e7f0      	b.n	8008bfc <_vfiprintf_r+0x1b8>
 8008c1a:	ab03      	add	r3, sp, #12
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	462a      	mov	r2, r5
 8008c20:	4b12      	ldr	r3, [pc, #72]	@ (8008c6c <_vfiprintf_r+0x228>)
 8008c22:	a904      	add	r1, sp, #16
 8008c24:	4630      	mov	r0, r6
 8008c26:	f3af 8000 	nop.w
 8008c2a:	4607      	mov	r7, r0
 8008c2c:	1c78      	adds	r0, r7, #1
 8008c2e:	d1d6      	bne.n	8008bde <_vfiprintf_r+0x19a>
 8008c30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c32:	07d9      	lsls	r1, r3, #31
 8008c34:	d405      	bmi.n	8008c42 <_vfiprintf_r+0x1fe>
 8008c36:	89ab      	ldrh	r3, [r5, #12]
 8008c38:	059a      	lsls	r2, r3, #22
 8008c3a:	d402      	bmi.n	8008c42 <_vfiprintf_r+0x1fe>
 8008c3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c3e:	f7ff f9a7 	bl	8007f90 <__retarget_lock_release_recursive>
 8008c42:	89ab      	ldrh	r3, [r5, #12]
 8008c44:	065b      	lsls	r3, r3, #25
 8008c46:	f53f af1f 	bmi.w	8008a88 <_vfiprintf_r+0x44>
 8008c4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c4c:	e71e      	b.n	8008a8c <_vfiprintf_r+0x48>
 8008c4e:	ab03      	add	r3, sp, #12
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	462a      	mov	r2, r5
 8008c54:	4b05      	ldr	r3, [pc, #20]	@ (8008c6c <_vfiprintf_r+0x228>)
 8008c56:	a904      	add	r1, sp, #16
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f7ff fc7f 	bl	800855c <_printf_i>
 8008c5e:	e7e4      	b.n	8008c2a <_vfiprintf_r+0x1e6>
 8008c60:	0800a2e7 	.word	0x0800a2e7
 8008c64:	0800a2f1 	.word	0x0800a2f1
 8008c68:	00000000 	.word	0x00000000
 8008c6c:	08008a21 	.word	0x08008a21
 8008c70:	0800a2ed 	.word	0x0800a2ed

08008c74 <__swbuf_r>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	460e      	mov	r6, r1
 8008c78:	4614      	mov	r4, r2
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	b118      	cbz	r0, 8008c86 <__swbuf_r+0x12>
 8008c7e:	6a03      	ldr	r3, [r0, #32]
 8008c80:	b90b      	cbnz	r3, 8008c86 <__swbuf_r+0x12>
 8008c82:	f7ff f871 	bl	8007d68 <__sinit>
 8008c86:	69a3      	ldr	r3, [r4, #24]
 8008c88:	60a3      	str	r3, [r4, #8]
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	071a      	lsls	r2, r3, #28
 8008c8e:	d501      	bpl.n	8008c94 <__swbuf_r+0x20>
 8008c90:	6923      	ldr	r3, [r4, #16]
 8008c92:	b943      	cbnz	r3, 8008ca6 <__swbuf_r+0x32>
 8008c94:	4621      	mov	r1, r4
 8008c96:	4628      	mov	r0, r5
 8008c98:	f000 f82a 	bl	8008cf0 <__swsetup_r>
 8008c9c:	b118      	cbz	r0, 8008ca6 <__swbuf_r+0x32>
 8008c9e:	f04f 37ff 	mov.w	r7, #4294967295
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	6922      	ldr	r2, [r4, #16]
 8008caa:	1a98      	subs	r0, r3, r2
 8008cac:	6963      	ldr	r3, [r4, #20]
 8008cae:	b2f6      	uxtb	r6, r6
 8008cb0:	4283      	cmp	r3, r0
 8008cb2:	4637      	mov	r7, r6
 8008cb4:	dc05      	bgt.n	8008cc2 <__swbuf_r+0x4e>
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	4628      	mov	r0, r5
 8008cba:	f7ff fdf3 	bl	80088a4 <_fflush_r>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d1ed      	bne.n	8008c9e <__swbuf_r+0x2a>
 8008cc2:	68a3      	ldr	r3, [r4, #8]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	60a3      	str	r3, [r4, #8]
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	1c5a      	adds	r2, r3, #1
 8008ccc:	6022      	str	r2, [r4, #0]
 8008cce:	701e      	strb	r6, [r3, #0]
 8008cd0:	6962      	ldr	r2, [r4, #20]
 8008cd2:	1c43      	adds	r3, r0, #1
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d004      	beq.n	8008ce2 <__swbuf_r+0x6e>
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	07db      	lsls	r3, r3, #31
 8008cdc:	d5e1      	bpl.n	8008ca2 <__swbuf_r+0x2e>
 8008cde:	2e0a      	cmp	r6, #10
 8008ce0:	d1df      	bne.n	8008ca2 <__swbuf_r+0x2e>
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	f7ff fddd 	bl	80088a4 <_fflush_r>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d0d9      	beq.n	8008ca2 <__swbuf_r+0x2e>
 8008cee:	e7d6      	b.n	8008c9e <__swbuf_r+0x2a>

08008cf0 <__swsetup_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4b29      	ldr	r3, [pc, #164]	@ (8008d98 <__swsetup_r+0xa8>)
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	6818      	ldr	r0, [r3, #0]
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	b118      	cbz	r0, 8008d04 <__swsetup_r+0x14>
 8008cfc:	6a03      	ldr	r3, [r0, #32]
 8008cfe:	b90b      	cbnz	r3, 8008d04 <__swsetup_r+0x14>
 8008d00:	f7ff f832 	bl	8007d68 <__sinit>
 8008d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d08:	0719      	lsls	r1, r3, #28
 8008d0a:	d422      	bmi.n	8008d52 <__swsetup_r+0x62>
 8008d0c:	06da      	lsls	r2, r3, #27
 8008d0e:	d407      	bmi.n	8008d20 <__swsetup_r+0x30>
 8008d10:	2209      	movs	r2, #9
 8008d12:	602a      	str	r2, [r5, #0]
 8008d14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d18:	81a3      	strh	r3, [r4, #12]
 8008d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1e:	e033      	b.n	8008d88 <__swsetup_r+0x98>
 8008d20:	0758      	lsls	r0, r3, #29
 8008d22:	d512      	bpl.n	8008d4a <__swsetup_r+0x5a>
 8008d24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d26:	b141      	cbz	r1, 8008d3a <__swsetup_r+0x4a>
 8008d28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d2c:	4299      	cmp	r1, r3
 8008d2e:	d002      	beq.n	8008d36 <__swsetup_r+0x46>
 8008d30:	4628      	mov	r0, r5
 8008d32:	f7ff f94d 	bl	8007fd0 <_free_r>
 8008d36:	2300      	movs	r3, #0
 8008d38:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d3a:	89a3      	ldrh	r3, [r4, #12]
 8008d3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d40:	81a3      	strh	r3, [r4, #12]
 8008d42:	2300      	movs	r3, #0
 8008d44:	6063      	str	r3, [r4, #4]
 8008d46:	6923      	ldr	r3, [r4, #16]
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	89a3      	ldrh	r3, [r4, #12]
 8008d4c:	f043 0308 	orr.w	r3, r3, #8
 8008d50:	81a3      	strh	r3, [r4, #12]
 8008d52:	6923      	ldr	r3, [r4, #16]
 8008d54:	b94b      	cbnz	r3, 8008d6a <__swsetup_r+0x7a>
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d60:	d003      	beq.n	8008d6a <__swsetup_r+0x7a>
 8008d62:	4621      	mov	r1, r4
 8008d64:	4628      	mov	r0, r5
 8008d66:	f000 f88b 	bl	8008e80 <__smakebuf_r>
 8008d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d6e:	f013 0201 	ands.w	r2, r3, #1
 8008d72:	d00a      	beq.n	8008d8a <__swsetup_r+0x9a>
 8008d74:	2200      	movs	r2, #0
 8008d76:	60a2      	str	r2, [r4, #8]
 8008d78:	6962      	ldr	r2, [r4, #20]
 8008d7a:	4252      	negs	r2, r2
 8008d7c:	61a2      	str	r2, [r4, #24]
 8008d7e:	6922      	ldr	r2, [r4, #16]
 8008d80:	b942      	cbnz	r2, 8008d94 <__swsetup_r+0xa4>
 8008d82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d86:	d1c5      	bne.n	8008d14 <__swsetup_r+0x24>
 8008d88:	bd38      	pop	{r3, r4, r5, pc}
 8008d8a:	0799      	lsls	r1, r3, #30
 8008d8c:	bf58      	it	pl
 8008d8e:	6962      	ldrpl	r2, [r4, #20]
 8008d90:	60a2      	str	r2, [r4, #8]
 8008d92:	e7f4      	b.n	8008d7e <__swsetup_r+0x8e>
 8008d94:	2000      	movs	r0, #0
 8008d96:	e7f7      	b.n	8008d88 <__swsetup_r+0x98>
 8008d98:	20000028 	.word	0x20000028

08008d9c <_raise_r>:
 8008d9c:	291f      	cmp	r1, #31
 8008d9e:	b538      	push	{r3, r4, r5, lr}
 8008da0:	4605      	mov	r5, r0
 8008da2:	460c      	mov	r4, r1
 8008da4:	d904      	bls.n	8008db0 <_raise_r+0x14>
 8008da6:	2316      	movs	r3, #22
 8008da8:	6003      	str	r3, [r0, #0]
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008db2:	b112      	cbz	r2, 8008dba <_raise_r+0x1e>
 8008db4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008db8:	b94b      	cbnz	r3, 8008dce <_raise_r+0x32>
 8008dba:	4628      	mov	r0, r5
 8008dbc:	f000 f830 	bl	8008e20 <_getpid_r>
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	4601      	mov	r1, r0
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dca:	f000 b817 	b.w	8008dfc <_kill_r>
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d00a      	beq.n	8008de8 <_raise_r+0x4c>
 8008dd2:	1c59      	adds	r1, r3, #1
 8008dd4:	d103      	bne.n	8008dde <_raise_r+0x42>
 8008dd6:	2316      	movs	r3, #22
 8008dd8:	6003      	str	r3, [r0, #0]
 8008dda:	2001      	movs	r0, #1
 8008ddc:	e7e7      	b.n	8008dae <_raise_r+0x12>
 8008dde:	2100      	movs	r1, #0
 8008de0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008de4:	4620      	mov	r0, r4
 8008de6:	4798      	blx	r3
 8008de8:	2000      	movs	r0, #0
 8008dea:	e7e0      	b.n	8008dae <_raise_r+0x12>

08008dec <raise>:
 8008dec:	4b02      	ldr	r3, [pc, #8]	@ (8008df8 <raise+0xc>)
 8008dee:	4601      	mov	r1, r0
 8008df0:	6818      	ldr	r0, [r3, #0]
 8008df2:	f7ff bfd3 	b.w	8008d9c <_raise_r>
 8008df6:	bf00      	nop
 8008df8:	20000028 	.word	0x20000028

08008dfc <_kill_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4d07      	ldr	r5, [pc, #28]	@ (8008e1c <_kill_r+0x20>)
 8008e00:	2300      	movs	r3, #0
 8008e02:	4604      	mov	r4, r0
 8008e04:	4608      	mov	r0, r1
 8008e06:	4611      	mov	r1, r2
 8008e08:	602b      	str	r3, [r5, #0]
 8008e0a:	f7fa ff24 	bl	8003c56 <_kill>
 8008e0e:	1c43      	adds	r3, r0, #1
 8008e10:	d102      	bne.n	8008e18 <_kill_r+0x1c>
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	b103      	cbz	r3, 8008e18 <_kill_r+0x1c>
 8008e16:	6023      	str	r3, [r4, #0]
 8008e18:	bd38      	pop	{r3, r4, r5, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20025ff4 	.word	0x20025ff4

08008e20 <_getpid_r>:
 8008e20:	f7fa bf11 	b.w	8003c46 <_getpid>

08008e24 <_malloc_usable_size_r>:
 8008e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e28:	1f18      	subs	r0, r3, #4
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	bfbc      	itt	lt
 8008e2e:	580b      	ldrlt	r3, [r1, r0]
 8008e30:	18c0      	addlt	r0, r0, r3
 8008e32:	4770      	bx	lr

08008e34 <__swhatbuf_r>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	460c      	mov	r4, r1
 8008e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3c:	2900      	cmp	r1, #0
 8008e3e:	b096      	sub	sp, #88	@ 0x58
 8008e40:	4615      	mov	r5, r2
 8008e42:	461e      	mov	r6, r3
 8008e44:	da0d      	bge.n	8008e62 <__swhatbuf_r+0x2e>
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e4c:	f04f 0100 	mov.w	r1, #0
 8008e50:	bf14      	ite	ne
 8008e52:	2340      	movne	r3, #64	@ 0x40
 8008e54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e58:	2000      	movs	r0, #0
 8008e5a:	6031      	str	r1, [r6, #0]
 8008e5c:	602b      	str	r3, [r5, #0]
 8008e5e:	b016      	add	sp, #88	@ 0x58
 8008e60:	bd70      	pop	{r4, r5, r6, pc}
 8008e62:	466a      	mov	r2, sp
 8008e64:	f000 f848 	bl	8008ef8 <_fstat_r>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	dbec      	blt.n	8008e46 <__swhatbuf_r+0x12>
 8008e6c:	9901      	ldr	r1, [sp, #4]
 8008e6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e76:	4259      	negs	r1, r3
 8008e78:	4159      	adcs	r1, r3
 8008e7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e7e:	e7eb      	b.n	8008e58 <__swhatbuf_r+0x24>

08008e80 <__smakebuf_r>:
 8008e80:	898b      	ldrh	r3, [r1, #12]
 8008e82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e84:	079d      	lsls	r5, r3, #30
 8008e86:	4606      	mov	r6, r0
 8008e88:	460c      	mov	r4, r1
 8008e8a:	d507      	bpl.n	8008e9c <__smakebuf_r+0x1c>
 8008e8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	6123      	str	r3, [r4, #16]
 8008e94:	2301      	movs	r3, #1
 8008e96:	6163      	str	r3, [r4, #20]
 8008e98:	b003      	add	sp, #12
 8008e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e9c:	ab01      	add	r3, sp, #4
 8008e9e:	466a      	mov	r2, sp
 8008ea0:	f7ff ffc8 	bl	8008e34 <__swhatbuf_r>
 8008ea4:	9f00      	ldr	r7, [sp, #0]
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	4639      	mov	r1, r7
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f7ff f904 	bl	80080b8 <_malloc_r>
 8008eb0:	b948      	cbnz	r0, 8008ec6 <__smakebuf_r+0x46>
 8008eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb6:	059a      	lsls	r2, r3, #22
 8008eb8:	d4ee      	bmi.n	8008e98 <__smakebuf_r+0x18>
 8008eba:	f023 0303 	bic.w	r3, r3, #3
 8008ebe:	f043 0302 	orr.w	r3, r3, #2
 8008ec2:	81a3      	strh	r3, [r4, #12]
 8008ec4:	e7e2      	b.n	8008e8c <__smakebuf_r+0xc>
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	6020      	str	r0, [r4, #0]
 8008eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ece:	81a3      	strh	r3, [r4, #12]
 8008ed0:	9b01      	ldr	r3, [sp, #4]
 8008ed2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ed6:	b15b      	cbz	r3, 8008ef0 <__smakebuf_r+0x70>
 8008ed8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008edc:	4630      	mov	r0, r6
 8008ede:	f000 f81d 	bl	8008f1c <_isatty_r>
 8008ee2:	b128      	cbz	r0, 8008ef0 <__smakebuf_r+0x70>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	f023 0303 	bic.w	r3, r3, #3
 8008eea:	f043 0301 	orr.w	r3, r3, #1
 8008eee:	81a3      	strh	r3, [r4, #12]
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	431d      	orrs	r5, r3
 8008ef4:	81a5      	strh	r5, [r4, #12]
 8008ef6:	e7cf      	b.n	8008e98 <__smakebuf_r+0x18>

08008ef8 <_fstat_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4d07      	ldr	r5, [pc, #28]	@ (8008f18 <_fstat_r+0x20>)
 8008efc:	2300      	movs	r3, #0
 8008efe:	4604      	mov	r4, r0
 8008f00:	4608      	mov	r0, r1
 8008f02:	4611      	mov	r1, r2
 8008f04:	602b      	str	r3, [r5, #0]
 8008f06:	f7fa ff06 	bl	8003d16 <_fstat>
 8008f0a:	1c43      	adds	r3, r0, #1
 8008f0c:	d102      	bne.n	8008f14 <_fstat_r+0x1c>
 8008f0e:	682b      	ldr	r3, [r5, #0]
 8008f10:	b103      	cbz	r3, 8008f14 <_fstat_r+0x1c>
 8008f12:	6023      	str	r3, [r4, #0]
 8008f14:	bd38      	pop	{r3, r4, r5, pc}
 8008f16:	bf00      	nop
 8008f18:	20025ff4 	.word	0x20025ff4

08008f1c <_isatty_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4d06      	ldr	r5, [pc, #24]	@ (8008f38 <_isatty_r+0x1c>)
 8008f20:	2300      	movs	r3, #0
 8008f22:	4604      	mov	r4, r0
 8008f24:	4608      	mov	r0, r1
 8008f26:	602b      	str	r3, [r5, #0]
 8008f28:	f7fa ff05 	bl	8003d36 <_isatty>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_isatty_r+0x1a>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_isatty_r+0x1a>
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	20025ff4 	.word	0x20025ff4

08008f3c <_init>:
 8008f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3e:	bf00      	nop
 8008f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f42:	bc08      	pop	{r3}
 8008f44:	469e      	mov	lr, r3
 8008f46:	4770      	bx	lr

08008f48 <_fini>:
 8008f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4a:	bf00      	nop
 8008f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f4e:	bc08      	pop	{r3}
 8008f50:	469e      	mov	lr, r3
 8008f52:	4770      	bx	lr
