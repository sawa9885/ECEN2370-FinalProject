
SWalkerLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e8  0800489c  0800489c  0000589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a84  08005a84  0000701c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a84  08005a84  00006a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a8c  08005a8c  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a8c  08005a8c  00006a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a90  08005a90  00006a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08005a94  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000701c  2**0
                  CONTENTS
 10 .bss          00025b04  2000001c  2000001c  0000701c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025b20  20025b20  0000701c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b44  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a64  00000000  00000000  00018b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  0001b5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e73  00000000  00000000  0001c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026693  00000000  00000000  0001d71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b3c  00000000  00000000  00043dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e253b  00000000  00000000  0005a8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ce25  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004eac  00000000  00000000  0013ce68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00141d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004884 	.word	0x08004884

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08004884 	.word	0x08004884

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f001 fc87 	bl	8001df2 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 f918 	bl	8000718 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f8d5 	bl	8000698 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fa06 	bl	8000904 <LCD_Clear>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	visualDemo();
 8000500:	f000 fad2 	bl	8000aa8 <visualDemo>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
 8000512:	4b5a      	ldr	r3, [pc, #360]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000516:	4a59      	ldr	r2, [pc, #356]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000518:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800051c:	6453      	str	r3, [r2, #68]	@ 0x44
 800051e:	4b57      	ldr	r3, [pc, #348]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000522:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000526:	61bb      	str	r3, [r7, #24]
 8000528:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	4b53      	ldr	r3, [pc, #332]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4a52      	ldr	r2, [pc, #328]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
 800053a:	4b50      	ldr	r3, [pc, #320]	@ (800067c <LCD_GPIO_Init+0x174>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	4b4c      	ldr	r3, [pc, #304]	@ (800067c <LCD_GPIO_Init+0x174>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	4a4b      	ldr	r2, [pc, #300]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	6313      	str	r3, [r2, #48]	@ 0x30
 8000556:	4b49      	ldr	r3, [pc, #292]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	4b45      	ldr	r3, [pc, #276]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	4a44      	ldr	r2, [pc, #272]	@ (800067c <LCD_GPIO_Init+0x174>)
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	6313      	str	r3, [r2, #48]	@ 0x30
 8000572:	4b42      	ldr	r3, [pc, #264]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	4b3e      	ldr	r3, [pc, #248]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a3d      	ldr	r2, [pc, #244]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000588:	f043 0308 	orr.w	r3, r3, #8
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b3b      	ldr	r3, [pc, #236]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0308 	and.w	r3, r3, #8
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b37      	ldr	r3, [pc, #220]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a36      	ldr	r2, [pc, #216]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005a4:	f043 0320 	orr.w	r3, r3, #32
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0320 	and.w	r3, r3, #32
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	4b30      	ldr	r3, [pc, #192]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a2f      	ldr	r2, [pc, #188]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c6:	4b2d      	ldr	r3, [pc, #180]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80005d2:	f641 0358 	movw	r3, #6232	@ 0x1858
 80005d6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80005e0:	2302      	movs	r3, #2
 80005e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80005e4:	230e      	movs	r3, #14
 80005e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4619      	mov	r1, r3
 80005ee:	4824      	ldr	r0, [pc, #144]	@ (8000680 <LCD_GPIO_Init+0x178>)
 80005f0:	f001 fdbe 	bl	8002170 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80005f4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80005f8:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	4820      	ldr	r0, [pc, #128]	@ (8000684 <LCD_GPIO_Init+0x17c>)
 8000602:	f001 fdb5 	bl	8002170 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000606:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4619      	mov	r1, r3
 8000612:	481d      	ldr	r0, [pc, #116]	@ (8000688 <LCD_GPIO_Init+0x180>)
 8000614:	f001 fdac 	bl	8002170 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000618:	2348      	movs	r3, #72	@ 0x48
 800061a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	481a      	ldr	r0, [pc, #104]	@ (800068c <LCD_GPIO_Init+0x184>)
 8000624:	f001 fda4 	bl	8002170 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	4619      	mov	r1, r3
 8000634:	4816      	ldr	r0, [pc, #88]	@ (8000690 <LCD_GPIO_Init+0x188>)
 8000636:	f001 fd9b 	bl	8002170 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800063a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800063e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4619      	mov	r1, r3
 8000646:	4813      	ldr	r0, [pc, #76]	@ (8000694 <LCD_GPIO_Init+0x18c>)
 8000648:	f001 fd92 	bl	8002170 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800064c:	2303      	movs	r3, #3
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000650:	2309      	movs	r3, #9
 8000652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	480a      	ldr	r0, [pc, #40]	@ (8000684 <LCD_GPIO_Init+0x17c>)
 800065c:	f001 fd88 	bl	8002170 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000660:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <LCD_GPIO_Init+0x18c>)
 800066e:	f001 fd7f 	bl	8002170 <HAL_GPIO_Init>
}
 8000672:	bf00      	nop
 8000674:	3730      	adds	r7, #48	@ 0x30
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40020000 	.word	0x40020000
 8000684:	40020400 	.word	0x40020400
 8000688:	40020800 	.word	0x40020800
 800068c:	40020c00 	.word	0x40020c00
 8000690:	40021400 	.word	0x40021400
 8000694:	40021800 	.word	0x40021800

08000698 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b090      	sub	sp, #64	@ 0x40
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80006a6:	23f0      	movs	r3, #240	@ 0xf0
 80006a8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80006ae:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006b2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80006b8:	23ff      	movs	r3, #255	@ 0xff
 80006ba:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80006c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80006c6:	2305      	movs	r3, #5
 80006c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d101      	bne.n	80006d4 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <LTCD_Layer_Init+0x78>)
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80006d4:	23f0      	movs	r3, #240	@ 0xf0
 80006d6:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80006d8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	4806      	ldr	r0, [pc, #24]	@ (8000714 <LTCD_Layer_Init+0x7c>)
 80006fa:	f002 fa9b 	bl	8002c34 <HAL_LTDC_ConfigLayer>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000704:	f000 fa7c 	bl	8000c00 <LCD_Error_Handler>
	}
}
 8000708:	bf00      	nop
 800070a:	3740      	adds	r7, #64	@ 0x40
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000114 	.word	0x20000114
 8000714:	20000038 	.word	0x20000038

08000718 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800071c:	4b2a      	ldr	r3, [pc, #168]	@ (80007c8 <LTCD__Init+0xb0>)
 800071e:	4a2b      	ldr	r2, [pc, #172]	@ (80007cc <LTCD__Init+0xb4>)
 8000720:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000722:	4b29      	ldr	r3, [pc, #164]	@ (80007c8 <LTCD__Init+0xb0>)
 8000724:	2209      	movs	r2, #9
 8000726:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000728:	4b27      	ldr	r3, [pc, #156]	@ (80007c8 <LTCD__Init+0xb0>)
 800072a:	2201      	movs	r2, #1
 800072c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800072e:	4b26      	ldr	r3, [pc, #152]	@ (80007c8 <LTCD__Init+0xb0>)
 8000730:	221d      	movs	r2, #29
 8000732:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000734:	4b24      	ldr	r3, [pc, #144]	@ (80007c8 <LTCD__Init+0xb0>)
 8000736:	2203      	movs	r2, #3
 8000738:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800073a:	4b23      	ldr	r3, [pc, #140]	@ (80007c8 <LTCD__Init+0xb0>)
 800073c:	f240 120d 	movw	r2, #269	@ 0x10d
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000742:	4b21      	ldr	r3, [pc, #132]	@ (80007c8 <LTCD__Init+0xb0>)
 8000744:	f240 1243 	movw	r2, #323	@ 0x143
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800074a:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <LTCD__Init+0xb0>)
 800074c:	f240 1217 	movw	r2, #279	@ 0x117
 8000750:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000752:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <LTCD__Init+0xb0>)
 8000754:	f240 1247 	movw	r2, #327	@ 0x147
 8000758:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <LTCD__Init+0xb0>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <LTCD__Init+0xb0>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <LTCD__Init+0xb0>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000772:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <LTCD__Init+0xb8>)
 8000774:	2208      	movs	r2, #8
 8000776:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <LTCD__Init+0xb8>)
 800077a:	22c0      	movs	r2, #192	@ 0xc0
 800077c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800077e:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <LTCD__Init+0xb8>)
 8000780:	2204      	movs	r2, #4
 8000782:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <LTCD__Init+0xb8>)
 8000786:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800078a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800078c:	4810      	ldr	r0, [pc, #64]	@ (80007d0 <LTCD__Init+0xb8>)
 800078e:	f003 f8ab 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000792:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <LTCD__Init+0xb0>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000798:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <LTCD__Init+0xb0>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800079e:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <LTCD__Init+0xb0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007a4:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <LTCD__Init+0xb0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80007aa:	f7ff fead 	bl	8000508 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007ae:	4806      	ldr	r0, [pc, #24]	@ (80007c8 <LTCD__Init+0xb0>)
 80007b0:	f002 f970 	bl	8002a94 <HAL_LTDC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80007ba:	f000 fa21 	bl	8000c00 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80007be:	f000 fa25 	bl	8000c0c <ili9341_Init>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000038 	.word	0x20000038
 80007cc:	40016800 	.word	0x40016800
 80007d0:	200000e0 	.word	0x200000e0

080007d4 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	80fb      	strh	r3, [r7, #6]
 80007de:	460b      	mov	r3, r1
 80007e0:	80bb      	strh	r3, [r7, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80007e6:	88ba      	ldrh	r2, [r7, #4]
 80007e8:	4613      	mov	r3, r2
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	011b      	lsls	r3, r3, #4
 80007f0:	461a      	mov	r2, r3
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	4413      	add	r3, r2
 80007f6:	4905      	ldr	r1, [pc, #20]	@ (800080c <LCD_Draw_Pixel+0x38>)
 80007f8:	887a      	ldrh	r2, [r7, #2]
 80007fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000114 	.word	0x20000114

08000810 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	4604      	mov	r4, r0
 8000818:	4608      	mov	r0, r1
 800081a:	4611      	mov	r1, r2
 800081c:	461a      	mov	r2, r3
 800081e:	4623      	mov	r3, r4
 8000820:	80fb      	strh	r3, [r7, #6]
 8000822:	4603      	mov	r3, r0
 8000824:	80bb      	strh	r3, [r7, #4]
 8000826:	460b      	mov	r3, r1
 8000828:	807b      	strh	r3, [r7, #2]
 800082a:	4613      	mov	r3, r2
 800082c:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 800082e:	887b      	ldrh	r3, [r7, #2]
 8000830:	425b      	negs	r3, r3
 8000832:	b29b      	uxth	r3, r3
 8000834:	81fb      	strh	r3, [r7, #14]
 8000836:	e034      	b.n	80008a2 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000838:	887b      	ldrh	r3, [r7, #2]
 800083a:	425b      	negs	r3, r3
 800083c:	b29b      	uxth	r3, r3
 800083e:	81bb      	strh	r3, [r7, #12]
 8000840:	e024      	b.n	800088c <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000842:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000846:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800084a:	fb03 f202 	mul.w	r2, r3, r2
 800084e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000852:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000856:	fb01 f303 	mul.w	r3, r1, r3
 800085a:	441a      	add	r2, r3
 800085c:	887b      	ldrh	r3, [r7, #2]
 800085e:	8879      	ldrh	r1, [r7, #2]
 8000860:	fb01 f303 	mul.w	r3, r1, r3
 8000864:	429a      	cmp	r2, r3
 8000866:	dc0b      	bgt.n	8000880 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000868:	89ba      	ldrh	r2, [r7, #12]
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	4413      	add	r3, r2
 800086e:	b298      	uxth	r0, r3
 8000870:	89fa      	ldrh	r2, [r7, #14]
 8000872:	88bb      	ldrh	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	b29b      	uxth	r3, r3
 8000878:	883a      	ldrh	r2, [r7, #0]
 800087a:	4619      	mov	r1, r3
 800087c:	f7ff ffaa 	bl	80007d4 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000880:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000884:	b29b      	uxth	r3, r3
 8000886:	3301      	adds	r3, #1
 8000888:	b29b      	uxth	r3, r3
 800088a:	81bb      	strh	r3, [r7, #12]
 800088c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	429a      	cmp	r2, r3
 8000894:	ddd5      	ble.n	8000842 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000896:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800089a:	b29b      	uxth	r3, r3
 800089c:	3301      	adds	r3, #1
 800089e:	b29b      	uxth	r3, r3
 80008a0:	81fb      	strh	r3, [r7, #14]
 80008a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80008a6:	887b      	ldrh	r3, [r7, #2]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	ddc5      	ble.n	8000838 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd90      	pop	{r4, r7, pc}

080008b6 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80008b6:	b590      	push	{r4, r7, lr}
 80008b8:	b085      	sub	sp, #20
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4604      	mov	r4, r0
 80008be:	4608      	mov	r0, r1
 80008c0:	4611      	mov	r1, r2
 80008c2:	461a      	mov	r2, r3
 80008c4:	4623      	mov	r3, r4
 80008c6:	80fb      	strh	r3, [r7, #6]
 80008c8:	4603      	mov	r3, r0
 80008ca:	80bb      	strh	r3, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	807b      	strh	r3, [r7, #2]
 80008d0:	4613      	mov	r3, r2
 80008d2:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80008d4:	2300      	movs	r3, #0
 80008d6:	81fb      	strh	r3, [r7, #14]
 80008d8:	e00b      	b.n	80008f2 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 80008da:	89fa      	ldrh	r2, [r7, #14]
 80008dc:	88bb      	ldrh	r3, [r7, #4]
 80008de:	4413      	add	r3, r2
 80008e0:	b299      	uxth	r1, r3
 80008e2:	883a      	ldrh	r2, [r7, #0]
 80008e4:	88fb      	ldrh	r3, [r7, #6]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ff74 	bl	80007d4 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80008ec:	89fb      	ldrh	r3, [r7, #14]
 80008ee:	3301      	adds	r3, #1
 80008f0:	81fb      	strh	r3, [r7, #14]
 80008f2:	89fa      	ldrh	r2, [r7, #14]
 80008f4:	887b      	ldrh	r3, [r7, #2]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d3ef      	bcc.n	80008da <LCD_Draw_Vertical_Line+0x24>
  }
}
 80008fa:	bf00      	nop
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bd90      	pop	{r4, r7, pc}

08000904 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	460a      	mov	r2, r1
 800090e:	71fb      	strb	r3, [r7, #7]
 8000910:	4613      	mov	r3, r2
 8000912:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10e      	bne.n	8000938 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	e007      	b.n	8000930 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000920:	4908      	ldr	r1, [pc, #32]	@ (8000944 <LCD_Clear+0x40>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	88ba      	ldrh	r2, [r7, #4]
 8000926:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	3301      	adds	r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000936:	d3f3      	bcc.n	8000920 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	20000114 	.word	0x20000114

08000948 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000952:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <LCD_SetTextColor+0x1c>)
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	8013      	strh	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	20000000 	.word	0x20000000

08000968 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000970:	4a04      	ldr	r2, [pc, #16]	@ (8000984 <LCD_SetFont+0x1c>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6013      	str	r3, [r2, #0]
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000110 	.word	0x20000110

08000988 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	603a      	str	r2, [r7, #0]
 8000992:	80fb      	strh	r3, [r7, #6]
 8000994:	460b      	mov	r3, r1
 8000996:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	e04c      	b.n	8000a40 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	e03f      	b.n	8000a2c <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	4619      	mov	r1, r3
 80009b8:	4b27      	ldr	r3, [pc, #156]	@ (8000a58 <LCD_Draw_Char+0xd0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	889b      	ldrh	r3, [r3, #4]
 80009be:	4a27      	ldr	r2, [pc, #156]	@ (8000a5c <LCD_Draw_Char+0xd4>)
 80009c0:	fba2 2303 	umull	r2, r3, r2, r3
 80009c4:	08db      	lsrs	r3, r3, #3
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	2280      	movs	r2, #128	@ 0x80
 80009cc:	409a      	lsls	r2, r3
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	fa42 f303 	asr.w	r3, r2, r3
 80009d4:	400b      	ands	r3, r1
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d104      	bne.n	80009e4 <LCD_Draw_Char+0x5c>
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <LCD_Draw_Char+0xd0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	889b      	ldrh	r3, [r3, #4]
 80009e0:	2b0c      	cmp	r3, #12
 80009e2:	d920      	bls.n	8000a26 <LCD_Draw_Char+0x9e>
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	fa42 f303 	asr.w	r3, r2, r3
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d104      	bne.n	8000a08 <LCD_Draw_Char+0x80>
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <LCD_Draw_Char+0xd0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	889b      	ldrh	r3, [r3, #4]
 8000a04:	2b0c      	cmp	r3, #12
 8000a06:	d80e      	bhi.n	8000a26 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	4413      	add	r3, r2
 8000a10:	b298      	uxth	r0, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <LCD_Draw_Char+0xd8>)
 8000a1e:	8812      	ldrh	r2, [r2, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	f7ff fed7 	bl	80007d4 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <LCD_Draw_Char+0xd0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	889b      	ldrh	r3, [r3, #4]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d3b8      	bcc.n	80009ac <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <LCD_Draw_Char+0xd0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	88db      	ldrh	r3, [r3, #6]
 8000a46:	461a      	mov	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d3ab      	bcc.n	80009a6 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000a4e:	bf00      	nop
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000110 	.word	0x20000110
 8000a5c:	aaaaaaab 	.word	0xaaaaaaab
 8000a60:	20000000 	.word	0x20000000

08000a64 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	80bb      	strh	r3, [r7, #4]
 8000a72:	4613      	mov	r3, r2
 8000a74:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000a76:	78fb      	ldrb	r3, [r7, #3]
 8000a78:	3b20      	subs	r3, #32
 8000a7a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000a7c:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <LCD_DisplayChar+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	78fb      	ldrb	r3, [r7, #3]
 8000a84:	4907      	ldr	r1, [pc, #28]	@ (8000aa4 <LCD_DisplayChar+0x40>)
 8000a86:	6809      	ldr	r1, [r1, #0]
 8000a88:	88c9      	ldrh	r1, [r1, #6]
 8000a8a:	fb01 f303 	mul.w	r3, r1, r3
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	441a      	add	r2, r3
 8000a92:	88b9      	ldrh	r1, [r7, #4]
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff76 	bl	8000988 <LCD_Draw_Char>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000110 	.word	0x20000110

08000aa8 <visualDemo>:

void visualDemo(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	uint16_t x;
	uint16_t y;
	// This for loop just illustrates how with using logic and for loops, you can create interesting things
	// this may or not be useful ;)
	for(y=0; y<LCD_PIXEL_HEIGHT; y++){
 8000aae:	2300      	movs	r3, #0
 8000ab0:	80bb      	strh	r3, [r7, #4]
 8000ab2:	e022      	b.n	8000afa <visualDemo+0x52>
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	80fb      	strh	r3, [r7, #6]
 8000ab8:	e019      	b.n	8000aee <visualDemo+0x46>
			if (x & 32)
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	f003 0320 	and.w	r3, r3, #32
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d009      	beq.n	8000ad8 <visualDemo+0x30>
				frameBuffer[x*y] = LCD_COLOR_WHITE;
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	88ba      	ldrh	r2, [r7, #4]
 8000ac8:	fb02 f303 	mul.w	r3, r2, r3
 8000acc:	4a4a      	ldr	r2, [pc, #296]	@ (8000bf8 <visualDemo+0x150>)
 8000ace:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ad2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ad6:	e007      	b.n	8000ae8 <visualDemo+0x40>
			else
				frameBuffer[x*y] = LCD_COLOR_BLACK;
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	88ba      	ldrh	r2, [r7, #4]
 8000adc:	fb02 f303 	mul.w	r3, r2, r3
 8000ae0:	4a45      	ldr	r2, [pc, #276]	@ (8000bf8 <visualDemo+0x150>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	3301      	adds	r3, #1
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	2bef      	cmp	r3, #239	@ 0xef
 8000af2:	d9e2      	bls.n	8000aba <visualDemo+0x12>
	for(y=0; y<LCD_PIXEL_HEIGHT; y++){
 8000af4:	88bb      	ldrh	r3, [r7, #4]
 8000af6:	3301      	adds	r3, #1
 8000af8:	80bb      	strh	r3, [r7, #4]
 8000afa:	88bb      	ldrh	r3, [r7, #4]
 8000afc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b00:	d3d8      	bcc.n	8000ab4 <visualDemo+0xc>
		}
	}

	HAL_Delay(1500);
 8000b02:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b06:	f001 fa29 	bl	8001f5c <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_GREEN);
 8000b0a:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff fef8 	bl	8000904 <LCD_Clear>
	HAL_Delay(1500);
 8000b14:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b18:	f001 fa20 	bl	8001f5c <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_RED);
 8000b1c:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff feef 	bl	8000904 <LCD_Clear>
	HAL_Delay(1500);
 8000b26:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b2a:	f001 fa17 	bl	8001f5c <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000b2e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff fee6 	bl	8000904 <LCD_Clear>
	LCD_Draw_Vertical_Line(10,10,250,LCD_COLOR_MAGENTA);
 8000b38:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000b3c:	22fa      	movs	r2, #250	@ 0xfa
 8000b3e:	210a      	movs	r1, #10
 8000b40:	200a      	movs	r0, #10
 8000b42:	f7ff feb8 	bl	80008b6 <LCD_Draw_Vertical_Line>
	HAL_Delay(1500);
 8000b46:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b4a:	f001 fa07 	bl	8001f5c <HAL_Delay>
	LCD_Draw_Vertical_Line(230,10,250,LCD_COLOR_MAGENTA);
 8000b4e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000b52:	22fa      	movs	r2, #250	@ 0xfa
 8000b54:	210a      	movs	r1, #10
 8000b56:	20e6      	movs	r0, #230	@ 0xe6
 8000b58:	f7ff fead 	bl	80008b6 <LCD_Draw_Vertical_Line>
	HAL_Delay(1500);
 8000b5c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b60:	f001 f9fc 	bl	8001f5c <HAL_Delay>

	LCD_Draw_Circle_Fill(125,150,20,LCD_COLOR_BLACK);
 8000b64:	2300      	movs	r3, #0
 8000b66:	2214      	movs	r2, #20
 8000b68:	2196      	movs	r1, #150	@ 0x96
 8000b6a:	207d      	movs	r0, #125	@ 0x7d
 8000b6c:	f7ff fe50 	bl	8000810 <LCD_Draw_Circle_Fill>
	HAL_Delay(2000);
 8000b70:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b74:	f001 f9f2 	bl	8001f5c <HAL_Delay>

	LCD_Clear(0,LCD_COLOR_BLUE);
 8000b78:	211f      	movs	r1, #31
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff fec2 	bl	8000904 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff fee1 	bl	8000948 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000b86:	481d      	ldr	r0, [pc, #116]	@ (8000bfc <visualDemo+0x154>)
 8000b88:	f7ff feee 	bl	8000968 <LCD_SetFont>

	LCD_DisplayChar(100,140,'H');
 8000b8c:	2248      	movs	r2, #72	@ 0x48
 8000b8e:	218c      	movs	r1, #140	@ 0x8c
 8000b90:	2064      	movs	r0, #100	@ 0x64
 8000b92:	f7ff ff67 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'e');
 8000b96:	2265      	movs	r2, #101	@ 0x65
 8000b98:	218c      	movs	r1, #140	@ 0x8c
 8000b9a:	2073      	movs	r0, #115	@ 0x73
 8000b9c:	f7ff ff62 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'l');
 8000ba0:	226c      	movs	r2, #108	@ 0x6c
 8000ba2:	218c      	movs	r1, #140	@ 0x8c
 8000ba4:	207d      	movs	r0, #125	@ 0x7d
 8000ba6:	f7ff ff5d 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'l');
 8000baa:	226c      	movs	r2, #108	@ 0x6c
 8000bac:	218c      	movs	r1, #140	@ 0x8c
 8000bae:	2082      	movs	r0, #130	@ 0x82
 8000bb0:	f7ff ff58 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'o');
 8000bb4:	226f      	movs	r2, #111	@ 0x6f
 8000bb6:	218c      	movs	r1, #140	@ 0x8c
 8000bb8:	208c      	movs	r0, #140	@ 0x8c
 8000bba:	f7ff ff53 	bl	8000a64 <LCD_DisplayChar>

	LCD_DisplayChar(100,160,'W');
 8000bbe:	2257      	movs	r2, #87	@ 0x57
 8000bc0:	21a0      	movs	r1, #160	@ 0xa0
 8000bc2:	2064      	movs	r0, #100	@ 0x64
 8000bc4:	f7ff ff4e 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(115,160,'o');
 8000bc8:	226f      	movs	r2, #111	@ 0x6f
 8000bca:	21a0      	movs	r1, #160	@ 0xa0
 8000bcc:	2073      	movs	r0, #115	@ 0x73
 8000bce:	f7ff ff49 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(125,160,'r');
 8000bd2:	2272      	movs	r2, #114	@ 0x72
 8000bd4:	21a0      	movs	r1, #160	@ 0xa0
 8000bd6:	207d      	movs	r0, #125	@ 0x7d
 8000bd8:	f7ff ff44 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(130,160,'l');
 8000bdc:	226c      	movs	r2, #108	@ 0x6c
 8000bde:	21a0      	movs	r1, #160	@ 0xa0
 8000be0:	2082      	movs	r0, #130	@ 0x82
 8000be2:	f7ff ff3f 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(140,160,'d');
 8000be6:	2264      	movs	r2, #100	@ 0x64
 8000be8:	21a0      	movs	r1, #160	@ 0xa0
 8000bea:	208c      	movs	r0, #140	@ 0x8c
 8000bec:	f7ff ff3a 	bl	8000a64 <LCD_DisplayChar>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000114 	.word	0x20000114
 8000bfc:	20000004 	.word	0x20000004

08000c00 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <LCD_Error_Handler+0x8>

08000c0c <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000c10:	f000 f9fe 	bl	8001010 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000c14:	20ca      	movs	r0, #202	@ 0xca
 8000c16:	f000 f943 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000c1a:	20c3      	movs	r0, #195	@ 0xc3
 8000c1c:	f000 f94d 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000c20:	2008      	movs	r0, #8
 8000c22:	f000 f94a 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000c26:	2050      	movs	r0, #80	@ 0x50
 8000c28:	f000 f947 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000c2c:	20cf      	movs	r0, #207	@ 0xcf
 8000c2e:	f000 f937 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f941 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000c38:	20c1      	movs	r0, #193	@ 0xc1
 8000c3a:	f000 f93e 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000c3e:	2030      	movs	r0, #48	@ 0x30
 8000c40:	f000 f93b 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000c44:	20ed      	movs	r0, #237	@ 0xed
 8000c46:	f000 f92b 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000c4a:	2064      	movs	r0, #100	@ 0x64
 8000c4c:	f000 f935 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f932 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000c56:	2012      	movs	r0, #18
 8000c58:	f000 f92f 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000c5c:	2081      	movs	r0, #129	@ 0x81
 8000c5e:	f000 f92c 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000c62:	20e8      	movs	r0, #232	@ 0xe8
 8000c64:	f000 f91c 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000c68:	2085      	movs	r0, #133	@ 0x85
 8000c6a:	f000 f926 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f000 f923 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000c74:	2078      	movs	r0, #120	@ 0x78
 8000c76:	f000 f920 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000c7a:	20cb      	movs	r0, #203	@ 0xcb
 8000c7c:	f000 f910 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000c80:	2039      	movs	r0, #57	@ 0x39
 8000c82:	f000 f91a 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000c86:	202c      	movs	r0, #44	@ 0x2c
 8000c88:	f000 f917 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f000 f914 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000c92:	2034      	movs	r0, #52	@ 0x34
 8000c94:	f000 f911 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000c98:	2002      	movs	r0, #2
 8000c9a:	f000 f90e 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000c9e:	20f7      	movs	r0, #247	@ 0xf7
 8000ca0:	f000 f8fe 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000ca4:	2020      	movs	r0, #32
 8000ca6:	f000 f908 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000caa:	20ea      	movs	r0, #234	@ 0xea
 8000cac:	f000 f8f8 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 f902 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f8ff 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000cbc:	20b1      	movs	r0, #177	@ 0xb1
 8000cbe:	f000 f8ef 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 f8f9 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000cc8:	201b      	movs	r0, #27
 8000cca:	f000 f8f6 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000cce:	20b6      	movs	r0, #182	@ 0xb6
 8000cd0:	f000 f8e6 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000cd4:	200a      	movs	r0, #10
 8000cd6:	f000 f8f0 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000cda:	20a2      	movs	r0, #162	@ 0xa2
 8000cdc:	f000 f8ed 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000ce0:	20c0      	movs	r0, #192	@ 0xc0
 8000ce2:	f000 f8dd 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000ce6:	2010      	movs	r0, #16
 8000ce8:	f000 f8e7 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000cec:	20c1      	movs	r0, #193	@ 0xc1
 8000cee:	f000 f8d7 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000cf2:	2010      	movs	r0, #16
 8000cf4:	f000 f8e1 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000cf8:	20c5      	movs	r0, #197	@ 0xc5
 8000cfa:	f000 f8d1 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000cfe:	2045      	movs	r0, #69	@ 0x45
 8000d00:	f000 f8db 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000d04:	2015      	movs	r0, #21
 8000d06:	f000 f8d8 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000d0a:	20c7      	movs	r0, #199	@ 0xc7
 8000d0c:	f000 f8c8 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000d10:	2090      	movs	r0, #144	@ 0x90
 8000d12:	f000 f8d2 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000d16:	2036      	movs	r0, #54	@ 0x36
 8000d18:	f000 f8c2 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000d1c:	20c8      	movs	r0, #200	@ 0xc8
 8000d1e:	f000 f8cc 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000d22:	20f2      	movs	r0, #242	@ 0xf2
 8000d24:	f000 f8bc 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 f8c6 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000d2e:	20b0      	movs	r0, #176	@ 0xb0
 8000d30:	f000 f8b6 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000d34:	20c2      	movs	r0, #194	@ 0xc2
 8000d36:	f000 f8c0 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000d3a:	20b6      	movs	r0, #182	@ 0xb6
 8000d3c:	f000 f8b0 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f000 f8ba 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000d46:	20a7      	movs	r0, #167	@ 0xa7
 8000d48:	f000 f8b7 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000d4c:	2027      	movs	r0, #39	@ 0x27
 8000d4e:	f000 f8b4 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000d52:	2004      	movs	r0, #4
 8000d54:	f000 f8b1 	bl	8000eba <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000d58:	202a      	movs	r0, #42	@ 0x2a
 8000d5a:	f000 f8a1 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 f8ab 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f000 f8a8 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f8a5 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000d70:	20ef      	movs	r0, #239	@ 0xef
 8000d72:	f000 f8a2 	bl	8000eba <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000d76:	202b      	movs	r0, #43	@ 0x2b
 8000d78:	f000 f892 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f000 f89c 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 f899 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f000 f896 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000d8e:	203f      	movs	r0, #63	@ 0x3f
 8000d90:	f000 f893 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000d94:	20f6      	movs	r0, #246	@ 0xf6
 8000d96:	f000 f883 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f000 f88d 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000da0:	2000      	movs	r0, #0
 8000da2:	f000 f88a 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000da6:	2006      	movs	r0, #6
 8000da8:	f000 f887 	bl	8000eba <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000dac:	202c      	movs	r0, #44	@ 0x2c
 8000dae:	f000 f877 	bl	8000ea0 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000db2:	20c8      	movs	r0, #200	@ 0xc8
 8000db4:	f000 f9e8 	bl	8001188 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000db8:	2026      	movs	r0, #38	@ 0x26
 8000dba:	f000 f871 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f000 f87b 	bl	8000eba <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000dc4:	20e0      	movs	r0, #224	@ 0xe0
 8000dc6:	f000 f86b 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000dca:	200f      	movs	r0, #15
 8000dcc:	f000 f875 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000dd0:	2029      	movs	r0, #41	@ 0x29
 8000dd2:	f000 f872 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000dd6:	2024      	movs	r0, #36	@ 0x24
 8000dd8:	f000 f86f 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000ddc:	200c      	movs	r0, #12
 8000dde:	f000 f86c 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000de2:	200e      	movs	r0, #14
 8000de4:	f000 f869 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000de8:	2009      	movs	r0, #9
 8000dea:	f000 f866 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000dee:	204e      	movs	r0, #78	@ 0x4e
 8000df0:	f000 f863 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000df4:	2078      	movs	r0, #120	@ 0x78
 8000df6:	f000 f860 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000dfa:	203c      	movs	r0, #60	@ 0x3c
 8000dfc:	f000 f85d 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000e00:	2009      	movs	r0, #9
 8000e02:	f000 f85a 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000e06:	2013      	movs	r0, #19
 8000e08:	f000 f857 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000e0c:	2005      	movs	r0, #5
 8000e0e:	f000 f854 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000e12:	2017      	movs	r0, #23
 8000e14:	f000 f851 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000e18:	2011      	movs	r0, #17
 8000e1a:	f000 f84e 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f000 f84b 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000e24:	20e1      	movs	r0, #225	@ 0xe1
 8000e26:	f000 f83b 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f845 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000e30:	2016      	movs	r0, #22
 8000e32:	f000 f842 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000e36:	201b      	movs	r0, #27
 8000e38:	f000 f83f 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000e3c:	2004      	movs	r0, #4
 8000e3e:	f000 f83c 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000e42:	2011      	movs	r0, #17
 8000e44:	f000 f839 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000e48:	2007      	movs	r0, #7
 8000e4a:	f000 f836 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000e4e:	2031      	movs	r0, #49	@ 0x31
 8000e50:	f000 f833 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000e54:	2033      	movs	r0, #51	@ 0x33
 8000e56:	f000 f830 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000e5a:	2042      	movs	r0, #66	@ 0x42
 8000e5c:	f000 f82d 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000e60:	2005      	movs	r0, #5
 8000e62:	f000 f82a 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000e66:	200c      	movs	r0, #12
 8000e68:	f000 f827 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000e6c:	200a      	movs	r0, #10
 8000e6e:	f000 f824 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000e72:	2028      	movs	r0, #40	@ 0x28
 8000e74:	f000 f821 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000e78:	202f      	movs	r0, #47	@ 0x2f
 8000e7a:	f000 f81e 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000e7e:	200f      	movs	r0, #15
 8000e80:	f000 f81b 	bl	8000eba <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000e84:	2011      	movs	r0, #17
 8000e86:	f000 f80b 	bl	8000ea0 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000e8a:	20c8      	movs	r0, #200	@ 0xc8
 8000e8c:	f000 f97c 	bl	8001188 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000e90:	2029      	movs	r0, #41	@ 0x29
 8000e92:	f000 f805 	bl	8000ea0 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000e96:	202c      	movs	r0, #44	@ 0x2c
 8000e98:	f000 f802 	bl	8000ea0 <ili9341_Write_Reg>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 f949 	bl	8001144 <LCD_IO_WriteReg>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f91a 	bl	8001100 <LCD_IO_WriteData>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000ed8:	4819      	ldr	r0, [pc, #100]	@ (8000f40 <SPI_Init+0x6c>)
 8000eda:	f003 f8e4 	bl	80040a6 <HAL_SPI_GetState>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d12b      	bne.n	8000f3c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8000ee4:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <SPI_Init+0x6c>)
 8000ee6:	4a17      	ldr	r2, [pc, #92]	@ (8000f44 <SPI_Init+0x70>)
 8000ee8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <SPI_Init+0x6c>)
 8000eec:	2218      	movs	r2, #24
 8000eee:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000ef0:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <SPI_Init+0x6c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <SPI_Init+0x6c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000efc:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <SPI_Init+0x6c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000f02:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <SPI_Init+0x6c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000f08:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <SPI_Init+0x6c>)
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <SPI_Init+0x6c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000f14:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <SPI_Init+0x6c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000f1a:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <SPI_Init+0x6c>)
 8000f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f20:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <SPI_Init+0x6c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <SPI_Init+0x6c>)
 8000f2a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f2e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <SPI_Init+0x6c>)
 8000f32:	f000 f833 	bl	8000f9c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000f36:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <SPI_Init+0x6c>)
 8000f38:	f002 fec0 	bl	8003cbc <HAL_SPI_Init>
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20025914 	.word	0x20025914
 8000f44:	40015000 	.word	0x40015000

08000f48 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <SPI_Write+0x34>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	1db9      	adds	r1, r7, #6
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4808      	ldr	r0, [pc, #32]	@ (8000f80 <SPI_Write+0x38>)
 8000f60:	f002 ff5d 	bl	8003e1e <HAL_SPI_Transmit>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8000f6e:	f000 f809 	bl	8000f84 <SPI_Error>
  }
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000000c 	.word	0x2000000c
 8000f80:	20025914 	.word	0x20025914

08000f84 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000f88:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <SPI_Error+0x14>)
 8000f8a:	f002 ff20 	bl	8003dce <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8000f8e:	f7ff ffa1 	bl	8000ed4 <SPI_Init>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20025914 	.word	0x20025914

08000f9c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	@ 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <SPI_MspInit+0x6c>)
 8000faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fac:	4a16      	ldr	r2, [pc, #88]	@ (8001008 <SPI_MspInit+0x6c>)
 8000fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000fb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb4:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <SPI_MspInit+0x6c>)
 8000fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <SPI_MspInit+0x6c>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001008 <SPI_MspInit+0x6c>)
 8000fca:	f043 0320 	orr.w	r3, r3, #32
 8000fce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <SPI_MspInit+0x6c>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd4:	f003 0320 	and.w	r3, r3, #32
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8000fdc:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000fea:	2301      	movs	r3, #1
 8000fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8000fee:	2305      	movs	r3, #5
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4804      	ldr	r0, [pc, #16]	@ (800100c <SPI_MspInit+0x70>)
 8000ffa:	f001 f8b9 	bl	8002170 <HAL_GPIO_Init>
}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	@ 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40021400 	.word	0x40021400

08001010 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001016:	4b36      	ldr	r3, [pc, #216]	@ (80010f0 <LCD_IO_Init+0xe0>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d164      	bne.n	80010e8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800101e:	4b34      	ldr	r3, [pc, #208]	@ (80010f0 <LCD_IO_Init+0xe0>)
 8001020:	2201      	movs	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	4b32      	ldr	r3, [pc, #200]	@ (80010f4 <LCD_IO_Init+0xe4>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102c:	4a31      	ldr	r2, [pc, #196]	@ (80010f4 <LCD_IO_Init+0xe4>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	6313      	str	r3, [r2, #48]	@ 0x30
 8001034:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <LCD_IO_Init+0xe4>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001040:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001044:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4619      	mov	r1, r3
 8001058:	4827      	ldr	r0, [pc, #156]	@ (80010f8 <LCD_IO_Init+0xe8>)
 800105a:	f001 f889 	bl	8002170 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b24      	ldr	r3, [pc, #144]	@ (80010f4 <LCD_IO_Init+0xe4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a23      	ldr	r2, [pc, #140]	@ (80010f4 <LCD_IO_Init+0xe4>)
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <LCD_IO_Init+0xe4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800107a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800107e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001088:	2302      	movs	r3, #2
 800108a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4619      	mov	r1, r3
 8001092:	4819      	ldr	r0, [pc, #100]	@ (80010f8 <LCD_IO_Init+0xe8>)
 8001094:	f001 f86c 	bl	8002170 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <LCD_IO_Init+0xe4>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	4a14      	ldr	r2, [pc, #80]	@ (80010f4 <LCD_IO_Init+0xe4>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <LCD_IO_Init+0xe4>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80010b4:	2304      	movs	r3, #4
 80010b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4619      	mov	r1, r3
 80010ca:	480c      	ldr	r0, [pc, #48]	@ (80010fc <LCD_IO_Init+0xec>)
 80010cc:	f001 f850 	bl	8002170 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80010d0:	2200      	movs	r2, #0
 80010d2:	2104      	movs	r1, #4
 80010d4:	4809      	ldr	r0, [pc, #36]	@ (80010fc <LCD_IO_Init+0xec>)
 80010d6:	f001 fb03 	bl	80026e0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80010da:	2201      	movs	r2, #1
 80010dc:	2104      	movs	r1, #4
 80010de:	4807      	ldr	r0, [pc, #28]	@ (80010fc <LCD_IO_Init+0xec>)
 80010e0:	f001 fafe 	bl	80026e0 <HAL_GPIO_WritePin>

    SPI_Init();
 80010e4:	f7ff fef6 	bl	8000ed4 <SPI_Init>
  }
}
 80010e8:	bf00      	nop
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2002596c 	.word	0x2002596c
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020c00 	.word	0x40020c00
 80010fc:	40020800 	.word	0x40020800

08001100 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001110:	480a      	ldr	r0, [pc, #40]	@ (800113c <LCD_IO_WriteData+0x3c>)
 8001112:	f001 fae5 	bl	80026e0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001116:	2200      	movs	r2, #0
 8001118:	2104      	movs	r1, #4
 800111a:	4809      	ldr	r0, [pc, #36]	@ (8001140 <LCD_IO_WriteData+0x40>)
 800111c:	f001 fae0 	bl	80026e0 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff10 	bl	8000f48 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001128:	2201      	movs	r2, #1
 800112a:	2104      	movs	r1, #4
 800112c:	4804      	ldr	r0, [pc, #16]	@ (8001140 <LCD_IO_WriteData+0x40>)
 800112e:	f001 fad7 	bl	80026e0 <HAL_GPIO_WritePin>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40020800 	.word	0x40020800

08001144 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001154:	480a      	ldr	r0, [pc, #40]	@ (8001180 <LCD_IO_WriteReg+0x3c>)
 8001156:	f001 fac3 	bl	80026e0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800115a:	2200      	movs	r2, #0
 800115c:	2104      	movs	r1, #4
 800115e:	4809      	ldr	r0, [pc, #36]	@ (8001184 <LCD_IO_WriteReg+0x40>)
 8001160:	f001 fabe 	bl	80026e0 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	b29b      	uxth	r3, r3
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff feed 	bl	8000f48 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800116e:	2201      	movs	r2, #1
 8001170:	2104      	movs	r1, #4
 8001172:	4804      	ldr	r0, [pc, #16]	@ (8001184 <LCD_IO_WriteReg+0x40>)
 8001174:	f001 fab4 	bl	80026e0 <HAL_GPIO_WritePin>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40020c00 	.word	0x40020c00
 8001184:	40020800 	.word	0x40020800

08001188 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 fee3 	bl	8001f5c <HAL_Delay>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a2:	f000 fe69 	bl	8001e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClockOverride();
 80011a6:	f000 fb4d 	bl	8001844 <SystemClockOverride>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011aa:	f000 f99d 	bl	80014e8 <MX_GPIO_Init>
  MX_I2C3_Init();
 80011ae:	f000 f813 	bl	80011d8 <MX_I2C3_Init>
  MX_LTDC_Init();
 80011b2:	f000 f851 	bl	8001258 <MX_LTDC_Init>
  MX_RNG_Init();
 80011b6:	f000 f901 	bl	80013bc <MX_RNG_Init>
  MX_SPI5_Init();
 80011ba:	f000 f913 	bl	80013e4 <MX_SPI5_Init>
  MX_TIM2_Init();
 80011be:	f000 f947 	bl	8001450 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 80011c2:	f7ff f98b 	bl	80004dc <ApplicationInit>
  LCD_Visual_Demo();
 80011c6:	f7ff f999 	bl	80004fc <LCD_Visual_Demo>
  HAL_Delay(5000);
 80011ca:	f241 3088 	movw	r0, #5000	@ 0x1388
 80011ce:	f000 fec5 	bl	8001f5c <HAL_Delay>
  //LCD_Touch_Polling_Demo(); // This function Will not return
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011d2:	bf00      	nop
 80011d4:	e7fd      	b.n	80011d2 <main+0x34>
	...

080011d8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <MX_I2C3_Init+0x74>)
 80011de:	4a1c      	ldr	r2, [pc, #112]	@ (8001250 <MX_I2C3_Init+0x78>)
 80011e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <MX_I2C3_Init+0x74>)
 80011e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001254 <MX_I2C3_Init+0x7c>)
 80011e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e8:	4b18      	ldr	r3, [pc, #96]	@ (800124c <MX_I2C3_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80011ee:	4b17      	ldr	r3, [pc, #92]	@ (800124c <MX_I2C3_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <MX_I2C3_Init+0x74>)
 80011f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011fa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fc:	4b13      	ldr	r3, [pc, #76]	@ (800124c <MX_I2C3_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001202:	4b12      	ldr	r3, [pc, #72]	@ (800124c <MX_I2C3_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001208:	4b10      	ldr	r3, [pc, #64]	@ (800124c <MX_I2C3_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800120e:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <MX_I2C3_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001214:	480d      	ldr	r0, [pc, #52]	@ (800124c <MX_I2C3_Init+0x74>)
 8001216:	f001 fa7d 	bl	8002714 <HAL_I2C_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001220:	f000 fb50 	bl	80018c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001224:	2100      	movs	r1, #0
 8001226:	4809      	ldr	r0, [pc, #36]	@ (800124c <MX_I2C3_Init+0x74>)
 8001228:	f001 fbb8 	bl	800299c <HAL_I2CEx_ConfigAnalogFilter>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001232:	f000 fb47 	bl	80018c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001236:	2100      	movs	r1, #0
 8001238:	4804      	ldr	r0, [pc, #16]	@ (800124c <MX_I2C3_Init+0x74>)
 800123a:	f001 fbeb 	bl	8002a14 <HAL_I2CEx_ConfigDigitalFilter>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001244:	f000 fb3e 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20025970 	.word	0x20025970
 8001250:	40005c00 	.word	0x40005c00
 8001254:	000186a0 	.word	0x000186a0

08001258 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b09a      	sub	sp, #104	@ 0x68
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800125e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001262:	2234      	movs	r2, #52	@ 0x34
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fae0 	bl	800482c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2234      	movs	r2, #52	@ 0x34
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fada 	bl	800482c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001278:	4b4e      	ldr	r3, [pc, #312]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 800127a:	4a4f      	ldr	r2, [pc, #316]	@ (80013b8 <MX_LTDC_Init+0x160>)
 800127c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800127e:	4b4d      	ldr	r3, [pc, #308]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001284:	4b4b      	ldr	r3, [pc, #300]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800128a:	4b4a      	ldr	r3, [pc, #296]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001290:	4b48      	ldr	r3, [pc, #288]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001296:	4b47      	ldr	r3, [pc, #284]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 8001298:	2207      	movs	r2, #7
 800129a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800129c:	4b45      	ldr	r3, [pc, #276]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 800129e:	2203      	movs	r2, #3
 80012a0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80012a2:	4b44      	ldr	r3, [pc, #272]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 80012a4:	220e      	movs	r2, #14
 80012a6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80012a8:	4b42      	ldr	r3, [pc, #264]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 80012aa:	2205      	movs	r2, #5
 80012ac:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80012ae:	4b41      	ldr	r3, [pc, #260]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 80012b0:	f240 228e 	movw	r2, #654	@ 0x28e
 80012b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80012b6:	4b3f      	ldr	r3, [pc, #252]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 80012b8:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80012bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80012be:	4b3d      	ldr	r3, [pc, #244]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 80012c0:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80012c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80012c6:	4b3b      	ldr	r3, [pc, #236]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 80012c8:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80012cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80012ce:	4b39      	ldr	r3, [pc, #228]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80012d6:	4b37      	ldr	r3, [pc, #220]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80012de:	4b35      	ldr	r3, [pc, #212]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80012e6:	4833      	ldr	r0, [pc, #204]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 80012e8:	f001 fbd4 	bl	8002a94 <HAL_LTDC_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80012f2:	f000 fae7 	bl	80018c4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001306:	2300      	movs	r3, #0
 8001308:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001316:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001318:	2305      	movs	r3, #5
 800131a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800133a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800133e:	2200      	movs	r2, #0
 8001340:	4619      	mov	r1, r3
 8001342:	481c      	ldr	r0, [pc, #112]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 8001344:	f001 fc76 	bl	8002c34 <HAL_LTDC_ConfigLayer>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800134e:	f000 fab9 	bl	80018c4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800136e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001372:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001374:	2305      	movs	r3, #5
 8001376:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	2201      	movs	r2, #1
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_LTDC_Init+0x15c>)
 800139e:	f001 fc49 	bl	8002c34 <HAL_LTDC_ConfigLayer>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80013a8:	f000 fa8c 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	3768      	adds	r7, #104	@ 0x68
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200259c4 	.word	0x200259c4
 80013b8:	40016800 	.word	0x40016800

080013bc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <MX_RNG_Init+0x20>)
 80013c2:	4a07      	ldr	r2, [pc, #28]	@ (80013e0 <MX_RNG_Init+0x24>)
 80013c4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_RNG_Init+0x20>)
 80013c8:	f002 fc4e 	bl	8003c68 <HAL_RNG_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80013d2:	f000 fa77 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20025a6c 	.word	0x20025a6c
 80013e0:	50060800 	.word	0x50060800

080013e4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80013e8:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <MX_SPI5_Init+0x64>)
 80013ea:	4a18      	ldr	r2, [pc, #96]	@ (800144c <MX_SPI5_Init+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80013ee:	4b16      	ldr	r3, [pc, #88]	@ (8001448 <MX_SPI5_Init+0x64>)
 80013f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013f4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80013f6:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <MX_SPI5_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <MX_SPI5_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <MX_SPI5_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001408:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <MX_SPI5_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <MX_SPI5_Init+0x64>)
 8001410:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001414:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001416:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <MX_SPI5_Init+0x64>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800141c:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <MX_SPI5_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <MX_SPI5_Init+0x64>)
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001428:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <MX_SPI5_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <MX_SPI5_Init+0x64>)
 8001430:	220a      	movs	r2, #10
 8001432:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	@ (8001448 <MX_SPI5_Init+0x64>)
 8001436:	f002 fc41 	bl	8003cbc <HAL_SPI_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001440:	f000 fa40 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20025a7c 	.word	0x20025a7c
 800144c:	40015000 	.word	0x40015000

08001450 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	463b      	mov	r3, r7
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800146c:	4b1d      	ldr	r3, [pc, #116]	@ (80014e4 <MX_TIM2_Init+0x94>)
 800146e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001472:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <MX_TIM2_Init+0x94>)
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147a:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <MX_TIM2_Init+0x94>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001480:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <MX_TIM2_Init+0x94>)
 8001482:	f04f 32ff 	mov.w	r2, #4294967295
 8001486:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001488:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <MX_TIM2_Init+0x94>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <MX_TIM2_Init+0x94>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001494:	4813      	ldr	r0, [pc, #76]	@ (80014e4 <MX_TIM2_Init+0x94>)
 8001496:	f002 fef1 	bl	800427c <HAL_TIM_Base_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014a0:	f000 fa10 	bl	80018c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	4619      	mov	r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <MX_TIM2_Init+0x94>)
 80014b2:	f002 ff32 	bl	800431a <HAL_TIM_ConfigClockSource>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014bc:	f000 fa02 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c0:	2300      	movs	r3, #0
 80014c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c8:	463b      	mov	r3, r7
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <MX_TIM2_Init+0x94>)
 80014ce:	f003 f931 	bl	8004734 <HAL_TIMEx_MasterConfigSynchronization>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014d8:	f000 f9f4 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20025ad4 	.word	0x20025ad4

080014e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08e      	sub	sp, #56	@ 0x38
 80014ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
 8001502:	4bb2      	ldr	r3, [pc, #712]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4ab1      	ldr	r2, [pc, #708]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4baf      	ldr	r3, [pc, #700]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	623b      	str	r3, [r7, #32]
 8001518:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	4bab      	ldr	r3, [pc, #684]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4aaa      	ldr	r2, [pc, #680]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 8001524:	f043 0320 	orr.w	r3, r3, #32
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4ba8      	ldr	r3, [pc, #672]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0320 	and.w	r3, r3, #32
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	4ba4      	ldr	r3, [pc, #656]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4aa3      	ldr	r2, [pc, #652]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 8001540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4ba1      	ldr	r3, [pc, #644]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4b9d      	ldr	r3, [pc, #628]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a9c      	ldr	r2, [pc, #624]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b9a      	ldr	r3, [pc, #616]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b96      	ldr	r3, [pc, #600]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a95      	ldr	r2, [pc, #596]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b93      	ldr	r3, [pc, #588]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b8f      	ldr	r3, [pc, #572]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a8e      	ldr	r2, [pc, #568]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 8001594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b8c      	ldr	r3, [pc, #560]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b88      	ldr	r3, [pc, #544]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a87      	ldr	r2, [pc, #540]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 80015b0:	f043 0310 	orr.w	r3, r3, #16
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b85      	ldr	r3, [pc, #532]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b81      	ldr	r3, [pc, #516]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a80      	ldr	r2, [pc, #512]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b7e      	ldr	r3, [pc, #504]	@ (80017cc <MX_GPIO_Init+0x2e4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2116      	movs	r1, #22
 80015e2:	487b      	ldr	r0, [pc, #492]	@ (80017d0 <MX_GPIO_Init+0x2e8>)
 80015e4:	f001 f87c 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2180      	movs	r1, #128	@ 0x80
 80015ec:	4879      	ldr	r0, [pc, #484]	@ (80017d4 <MX_GPIO_Init+0x2ec>)
 80015ee:	f001 f877 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80015f8:	4877      	ldr	r0, [pc, #476]	@ (80017d8 <MX_GPIO_Init+0x2f0>)
 80015fa:	f001 f871 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001604:	4875      	ldr	r0, [pc, #468]	@ (80017dc <MX_GPIO_Init+0x2f4>)
 8001606:	f001 f86b 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800160a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800161c:	230c      	movs	r3, #12
 800161e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001620:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001624:	4619      	mov	r1, r3
 8001626:	486e      	ldr	r0, [pc, #440]	@ (80017e0 <MX_GPIO_Init+0x2f8>)
 8001628:	f000 fda2 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800162c:	2301      	movs	r3, #1
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800163c:	230c      	movs	r3, #12
 800163e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001644:	4619      	mov	r1, r3
 8001646:	4862      	ldr	r0, [pc, #392]	@ (80017d0 <MX_GPIO_Init+0x2e8>)
 8001648:	f000 fd92 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800164c:	2316      	movs	r3, #22
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001660:	4619      	mov	r1, r3
 8001662:	485b      	ldr	r0, [pc, #364]	@ (80017d0 <MX_GPIO_Init+0x2e8>)
 8001664:	f000 fd84 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001668:	f248 0307 	movw	r3, #32775	@ 0x8007
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800166e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001672:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	4855      	ldr	r0, [pc, #340]	@ (80017d4 <MX_GPIO_Init+0x2ec>)
 8001680:	f000 fd76 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001684:	2380      	movs	r3, #128	@ 0x80
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001698:	4619      	mov	r1, r3
 800169a:	484e      	ldr	r0, [pc, #312]	@ (80017d4 <MX_GPIO_Init+0x2ec>)
 800169c:	f000 fd68 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80016a0:	2320      	movs	r3, #32
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016a4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b2:	4619      	mov	r1, r3
 80016b4:	4846      	ldr	r0, [pc, #280]	@ (80017d0 <MX_GPIO_Init+0x2e8>)
 80016b6:	f000 fd5b 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80016ba:	2304      	movs	r3, #4
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016be:	2300      	movs	r3, #0
 80016c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	4845      	ldr	r0, [pc, #276]	@ (80017e4 <MX_GPIO_Init+0x2fc>)
 80016ce:	f000 fd4f 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80016d2:	f248 1333 	movw	r3, #33075	@ 0x8133
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016e4:	230c      	movs	r3, #12
 80016e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ec:	4619      	mov	r1, r3
 80016ee:	483b      	ldr	r0, [pc, #236]	@ (80017dc <MX_GPIO_Init+0x2f4>)
 80016f0:	f000 fd3e 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80016f4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001706:	230c      	movs	r3, #12
 8001708:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800170a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800170e:	4619      	mov	r1, r3
 8001710:	4835      	ldr	r0, [pc, #212]	@ (80017e8 <MX_GPIO_Init+0x300>)
 8001712:	f000 fd2d 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001716:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001728:	230c      	movs	r3, #12
 800172a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001730:	4619      	mov	r1, r3
 8001732:	482c      	ldr	r0, [pc, #176]	@ (80017e4 <MX_GPIO_Init+0x2fc>)
 8001734:	f000 fd1c 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001738:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800174a:	4619      	mov	r1, r3
 800174c:	4825      	ldr	r0, [pc, #148]	@ (80017e4 <MX_GPIO_Init+0x2fc>)
 800174e:	f000 fd0f 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001752:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001764:	230c      	movs	r3, #12
 8001766:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176c:	4619      	mov	r1, r3
 800176e:	481a      	ldr	r0, [pc, #104]	@ (80017d8 <MX_GPIO_Init+0x2f0>)
 8001770:	f000 fcfe 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001774:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177a:	2300      	movs	r3, #0
 800177c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	4813      	ldr	r0, [pc, #76]	@ (80017d8 <MX_GPIO_Init+0x2f0>)
 800178a:	f000 fcf1 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800178e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001794:	2301      	movs	r3, #1
 8001796:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <MX_GPIO_Init+0x2f0>)
 80017a8:	f000 fce2 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017ac:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017be:	2307      	movs	r3, #7
 80017c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c6:	4619      	mov	r1, r3
 80017c8:	e010      	b.n	80017ec <MX_GPIO_Init+0x304>
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40020c00 	.word	0x40020c00
 80017dc:	40021800 	.word	0x40021800
 80017e0:	40021400 	.word	0x40021400
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40021000 	.word	0x40021000
 80017ec:	4812      	ldr	r0, [pc, #72]	@ (8001838 <MX_GPIO_Init+0x350>)
 80017ee:	f000 fcbf 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80017f2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001808:	4619      	mov	r1, r3
 800180a:	480c      	ldr	r0, [pc, #48]	@ (800183c <MX_GPIO_Init+0x354>)
 800180c:	f000 fcb0 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001810:	2360      	movs	r3, #96	@ 0x60
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001820:	230c      	movs	r3, #12
 8001822:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001828:	4619      	mov	r1, r3
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <MX_GPIO_Init+0x358>)
 800182c:	f000 fca0 	bl	8002170 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001830:	bf00      	nop
 8001832:	3738      	adds	r7, #56	@ 0x38
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40020000 	.word	0x40020000
 800183c:	40021800 	.word	0x40021800
 8001840:	40020400 	.word	0x40020400

08001844 <SystemClockOverride>:

/* USER CODE BEGIN 4 */
void SystemClockOverride(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b092      	sub	sp, #72	@ 0x48
 8001848:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	4b1c      	ldr	r3, [pc, #112]	@ (80018c0 <SystemClockOverride+0x7c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	4a1b      	ldr	r2, [pc, #108]	@ (80018c0 <SystemClockOverride+0x7c>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001858:	6413      	str	r3, [r2, #64]	@ 0x40
 800185a:	4b19      	ldr	r3, [pc, #100]	@ (80018c0 <SystemClockOverride+0x7c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001866:	2301      	movs	r3, #1
 8001868:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800186a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800186e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001870:	2302      	movs	r3, #2
 8001872:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001874:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001878:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800187a:	2308      	movs	r3, #8
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 800187e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001884:	2302      	movs	r3, #2
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001888:	2307      	movs	r3, #7
 800188a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	4618      	mov	r0, r3
 8001890:	f001 fba6 	bl	8002fe0 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001894:	230f      	movs	r3, #15
 8001896:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001898:	2302      	movs	r3, #2
 800189a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018aa:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80018ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018b0:	2105      	movs	r1, #5
 80018b2:	4618      	mov	r0, r3
 80018b4:	f001 fe0c 	bl	80034d0 <HAL_RCC_ClockConfig>
}
 80018b8:	bf00      	nop
 80018ba:	3748      	adds	r7, #72	@ 0x48
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <Error_Handler+0x8>

080018d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	4a0f      	ldr	r2, [pc, #60]	@ (800191c <HAL_MspInit+0x4c>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e6:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	4a08      	ldr	r2, [pc, #32]	@ (800191c <HAL_MspInit+0x4c>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	@ 0x40
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_MspInit+0x4c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800190e:	2007      	movs	r0, #7
 8001910:	f000 fbfa 	bl	8002108 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800

08001920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	@ 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a29      	ldr	r2, [pc, #164]	@ (80019e4 <HAL_I2C_MspInit+0xc4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d14b      	bne.n	80019da <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b28      	ldr	r3, [pc, #160]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	4a27      	ldr	r2, [pc, #156]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6313      	str	r3, [r2, #48]	@ 0x30
 8001952:	4b25      	ldr	r3, [pc, #148]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a20      	ldr	r2, [pc, #128]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800197a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001980:	2312      	movs	r3, #18
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800198c:	2304      	movs	r3, #4
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4815      	ldr	r0, [pc, #84]	@ (80019ec <HAL_I2C_MspInit+0xcc>)
 8001998:	f000 fbea 	bl	8002170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800199c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a2:	2312      	movs	r3, #18
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019ae:	2304      	movs	r3, #4
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	480d      	ldr	r0, [pc, #52]	@ (80019f0 <HAL_I2C_MspInit+0xd0>)
 80019ba:	f000 fbd9 	bl	8002170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	4a08      	ldr	r2, [pc, #32]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 80019c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ce:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_I2C_MspInit+0xc8>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80019da:	bf00      	nop
 80019dc:	3728      	adds	r7, #40	@ 0x28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40005c00 	.word	0x40005c00
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020000 	.word	0x40020000

080019f4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b09a      	sub	sp, #104	@ 0x68
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a10:	2230      	movs	r2, #48	@ 0x30
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 ff09 	bl	800482c <memset>
  if(hltdc->Instance==LTDC)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a81      	ldr	r2, [pc, #516]	@ (8001c24 <HAL_LTDC_MspInit+0x230>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	f040 80fa 	bne.w	8001c1a <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a26:	2308      	movs	r3, #8
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001a2a:	2332      	movs	r3, #50	@ 0x32
 8001a2c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001a32:	2300      	movs	r3, #0
 8001a34:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 ff54 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001a46:	f7ff ff3d 	bl	80018c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	4b76      	ldr	r3, [pc, #472]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	4a75      	ldr	r2, [pc, #468]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001a54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5a:	4b73      	ldr	r3, [pc, #460]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a62:	623b      	str	r3, [r7, #32]
 8001a64:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a6e      	ldr	r2, [pc, #440]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001a70:	f043 0320 	orr.w	r3, r3, #32
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b6c      	ldr	r3, [pc, #432]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0320 	and.w	r3, r3, #32
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	4b68      	ldr	r3, [pc, #416]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	4a67      	ldr	r2, [pc, #412]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a92:	4b65      	ldr	r3, [pc, #404]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	4b61      	ldr	r3, [pc, #388]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a60      	ldr	r2, [pc, #384]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b5e      	ldr	r3, [pc, #376]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b5a      	ldr	r3, [pc, #360]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	4a59      	ldr	r2, [pc, #356]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aca:	4b57      	ldr	r3, [pc, #348]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b53      	ldr	r3, [pc, #332]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a52      	ldr	r2, [pc, #328]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b50      	ldr	r3, [pc, #320]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b4c      	ldr	r3, [pc, #304]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	4a4b      	ldr	r2, [pc, #300]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b02:	4b49      	ldr	r3, [pc, #292]	@ (8001c28 <HAL_LTDC_MspInit+0x234>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001b0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b12:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b20:	230e      	movs	r3, #14
 8001b22:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4840      	ldr	r0, [pc, #256]	@ (8001c2c <HAL_LTDC_MspInit+0x238>)
 8001b2c:	f000 fb20 	bl	8002170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001b30:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001b34:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b42:	230e      	movs	r3, #14
 8001b44:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b46:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4838      	ldr	r0, [pc, #224]	@ (8001c30 <HAL_LTDC_MspInit+0x23c>)
 8001b4e:	f000 fb0f 	bl	8002170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001b52:	2303      	movs	r3, #3
 8001b54:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b62:	2309      	movs	r3, #9
 8001b64:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4831      	ldr	r0, [pc, #196]	@ (8001c34 <HAL_LTDC_MspInit+0x240>)
 8001b6e:	f000 faff 	bl	8002170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001b72:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001b76:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b84:	230e      	movs	r3, #14
 8001b86:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4829      	ldr	r0, [pc, #164]	@ (8001c34 <HAL_LTDC_MspInit+0x240>)
 8001b90:	f000 faee 	bl	8002170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001b94:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001b98:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ba6:	230e      	movs	r3, #14
 8001ba8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001baa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4821      	ldr	r0, [pc, #132]	@ (8001c38 <HAL_LTDC_MspInit+0x244>)
 8001bb2:	f000 fadd 	bl	8002170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001bb6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001bba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bc8:	230e      	movs	r3, #14
 8001bca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bcc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	481a      	ldr	r0, [pc, #104]	@ (8001c3c <HAL_LTDC_MspInit+0x248>)
 8001bd4:	f000 facc 	bl	8002170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001bd8:	2348      	movs	r3, #72	@ 0x48
 8001bda:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001be8:	230e      	movs	r3, #14
 8001bea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4813      	ldr	r0, [pc, #76]	@ (8001c40 <HAL_LTDC_MspInit+0x24c>)
 8001bf4:	f000 fabc 	bl	8002170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001bf8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001bfc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c0a:	2309      	movs	r3, #9
 8001c0c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c0e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c12:	4619      	mov	r1, r3
 8001c14:	4808      	ldr	r0, [pc, #32]	@ (8001c38 <HAL_LTDC_MspInit+0x244>)
 8001c16:	f000 faab 	bl	8002170 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001c1a:	bf00      	nop
 8001c1c:	3768      	adds	r7, #104	@ 0x68
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40016800 	.word	0x40016800
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40021400 	.word	0x40021400
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40020400 	.word	0x40020400
 8001c38:	40021800 	.word	0x40021800
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40020c00 	.word	0x40020c00

08001c44 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0b      	ldr	r2, [pc, #44]	@ (8001c80 <HAL_RNG_MspInit+0x3c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d10d      	bne.n	8001c72 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <HAL_RNG_MspInit+0x40>)
 8001c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c5e:	4a09      	ldr	r2, [pc, #36]	@ (8001c84 <HAL_RNG_MspInit+0x40>)
 8001c60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c64:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <HAL_RNG_MspInit+0x40>)
 8001c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	50060800 	.word	0x50060800
 8001c84:	40023800 	.word	0x40023800

08001c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	@ 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	@ (8001d0c <HAL_SPI_MspInit+0x84>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d12c      	bne.n	8001d04 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	4a17      	ldr	r2, [pc, #92]	@ (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_SPI_MspInit+0x88>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	4a10      	ldr	r2, [pc, #64]	@ (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cd0:	f043 0320 	orr.w	r3, r3, #32
 8001cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001ce2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cf4:	2305      	movs	r3, #5
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <HAL_SPI_MspInit+0x8c>)
 8001d00:	f000 fa36 	bl	8002170 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	@ 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40015000 	.word	0x40015000
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40021400 	.word	0x40021400

08001d18 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a08      	ldr	r2, [pc, #32]	@ (8001d48 <HAL_SPI_MspDeInit+0x30>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10a      	bne.n	8001d40 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001d2a:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <HAL_SPI_MspDeInit+0x34>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	4a07      	ldr	r2, [pc, #28]	@ (8001d4c <HAL_SPI_MspDeInit+0x34>)
 8001d30:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001d34:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001d36:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001d3a:	4805      	ldr	r0, [pc, #20]	@ (8001d50 <HAL_SPI_MspDeInit+0x38>)
 8001d3c:	f000 fbc4 	bl	80024c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40015000 	.word	0x40015000
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40021400 	.word	0x40021400

08001d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d64:	d10d      	bne.n	8001d82 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <HAL_TIM_Base_MspInit+0x3c>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	4a08      	ldr	r2, [pc, #32]	@ (8001d90 <HAL_TIM_Base_MspInit+0x3c>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <HAL_TIM_Base_MspInit+0x3c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800

08001d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <NMI_Handler+0x4>

08001d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <HardFault_Handler+0x4>

08001da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <MemManage_Handler+0x4>

08001dac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <BusFault_Handler+0x4>

08001db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <UsageFault_Handler+0x4>

08001dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dea:	f000 f897 	bl	8001f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <SystemInit+0x20>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e0a:	4a05      	ldr	r2, [pc, #20]	@ (8001e20 <SystemInit+0x20>)
 8001e0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e28:	f7ff ffea 	bl	8001e00 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e2c:	480c      	ldr	r0, [pc, #48]	@ (8001e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e2e:	490d      	ldr	r1, [pc, #52]	@ (8001e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e30:	4a0d      	ldr	r2, [pc, #52]	@ (8001e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e44:	4c0a      	ldr	r4, [pc, #40]	@ (8001e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f002 fcf3 	bl	800483c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e56:	f7ff f9a2 	bl	800119e <main>
  bx  lr    
 8001e5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001e68:	08005a94 	.word	0x08005a94
  ldr r2, =_sbss
 8001e6c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001e70:	20025b20 	.word	0x20025b20

08001e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb8 <HAL_Init+0x40>)
 8001e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e88:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb8 <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb8 <HAL_Init+0x40>)
 8001e8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e94:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a07      	ldr	r2, [pc, #28]	@ (8001eb8 <HAL_Init+0x40>)
 8001e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f000 f931 	bl	8002108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f000 f808 	bl	8001ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eac:	f7ff fd10 	bl	80018d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023c00 	.word	0x40023c00

08001ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec4:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <HAL_InitTick+0x54>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <HAL_InitTick+0x58>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f93b 	bl	8002156 <HAL_SYSTICK_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00e      	b.n	8001f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b0f      	cmp	r3, #15
 8001eee:	d80a      	bhi.n	8001f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f000 f911 	bl	800211e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001efc:	4a06      	ldr	r2, [pc, #24]	@ (8001f18 <HAL_InitTick+0x5c>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000010 	.word	0x20000010
 8001f14:	20000018 	.word	0x20000018
 8001f18:	20000014 	.word	0x20000014

08001f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_IncTick+0x20>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_IncTick+0x24>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a04      	ldr	r2, [pc, #16]	@ (8001f40 <HAL_IncTick+0x24>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000018 	.word	0x20000018
 8001f40:	20025b1c 	.word	0x20025b1c

08001f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return uwTick;
 8001f48:	4b03      	ldr	r3, [pc, #12]	@ (8001f58 <HAL_GetTick+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20025b1c 	.word	0x20025b1c

08001f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff ffee 	bl	8001f44 <HAL_GetTick>
 8001f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d005      	beq.n	8001f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f76:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <HAL_Delay+0x44>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f82:	bf00      	nop
 8001f84:	f7ff ffde 	bl	8001f44 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d8f7      	bhi.n	8001f84 <HAL_Delay+0x28>
  {
  }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000018 	.word	0x20000018

08001fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd6:	4a04      	ldr	r2, [pc, #16]	@ (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	60d3      	str	r3, [r2, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	2b00      	cmp	r3, #0
 800201a:	db0a      	blt.n	8002032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	490c      	ldr	r1, [pc, #48]	@ (8002054 <__NVIC_SetPriority+0x4c>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	0112      	lsls	r2, r2, #4
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	440b      	add	r3, r1
 800202c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002030:	e00a      	b.n	8002048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4908      	ldr	r1, [pc, #32]	@ (8002058 <__NVIC_SetPriority+0x50>)
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	3b04      	subs	r3, #4
 8002040:	0112      	lsls	r2, r2, #4
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	440b      	add	r3, r1
 8002046:	761a      	strb	r2, [r3, #24]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000e100 	.word	0xe000e100
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	@ 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f1c3 0307 	rsb	r3, r3, #7
 8002076:	2b04      	cmp	r3, #4
 8002078:	bf28      	it	cs
 800207a:	2304      	movcs	r3, #4
 800207c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3304      	adds	r3, #4
 8002082:	2b06      	cmp	r3, #6
 8002084:	d902      	bls.n	800208c <NVIC_EncodePriority+0x30>
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3b03      	subs	r3, #3
 800208a:	e000      	b.n	800208e <NVIC_EncodePriority+0x32>
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	f04f 32ff 	mov.w	r2, #4294967295
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	401a      	ands	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43d9      	mvns	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	4313      	orrs	r3, r2
         );
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3724      	adds	r7, #36	@ 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020d4:	d301      	bcc.n	80020da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00f      	b.n	80020fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020da:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <SysTick_Config+0x40>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e2:	210f      	movs	r1, #15
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f7ff ff8e 	bl	8002008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ec:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <SysTick_Config+0x40>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f2:	4b04      	ldr	r3, [pc, #16]	@ (8002104 <SysTick_Config+0x40>)
 80020f4:	2207      	movs	r2, #7
 80020f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	e000e010 	.word	0xe000e010

08002108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff47 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002130:	f7ff ff5c 	bl	8001fec <__NVIC_GetPriorityGrouping>
 8002134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	6978      	ldr	r0, [r7, #20]
 800213c:	f7ff ff8e 	bl	800205c <NVIC_EncodePriority>
 8002140:	4602      	mov	r2, r0
 8002142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff5d 	bl	8002008 <__NVIC_SetPriority>
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff ffb0 	bl	80020c4 <SysTick_Config>
 8002164:	4603      	mov	r3, r0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	@ 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	e177      	b.n	800247c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800218c:	2201      	movs	r2, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	f040 8166 	bne.w	8002476 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d005      	beq.n	80021c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d130      	bne.n	8002224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 0201 	and.w	r2, r3, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	2b03      	cmp	r3, #3
 800222e:	d017      	beq.n	8002260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d123      	bne.n	80022b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	08da      	lsrs	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3208      	adds	r2, #8
 8002274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	220f      	movs	r2, #15
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	08da      	lsrs	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3208      	adds	r2, #8
 80022ae:	69b9      	ldr	r1, [r7, #24]
 80022b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0203 	and.w	r2, r3, #3
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80c0 	beq.w	8002476 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b66      	ldr	r3, [pc, #408]	@ (8002494 <HAL_GPIO_Init+0x324>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	4a65      	ldr	r2, [pc, #404]	@ (8002494 <HAL_GPIO_Init+0x324>)
 8002300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002304:	6453      	str	r3, [r2, #68]	@ 0x44
 8002306:	4b63      	ldr	r3, [pc, #396]	@ (8002494 <HAL_GPIO_Init+0x324>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002312:	4a61      	ldr	r2, [pc, #388]	@ (8002498 <HAL_GPIO_Init+0x328>)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	3302      	adds	r3, #2
 800231a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	220f      	movs	r2, #15
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a58      	ldr	r2, [pc, #352]	@ (800249c <HAL_GPIO_Init+0x32c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d037      	beq.n	80023ae <HAL_GPIO_Init+0x23e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a57      	ldr	r2, [pc, #348]	@ (80024a0 <HAL_GPIO_Init+0x330>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d031      	beq.n	80023aa <HAL_GPIO_Init+0x23a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a56      	ldr	r2, [pc, #344]	@ (80024a4 <HAL_GPIO_Init+0x334>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d02b      	beq.n	80023a6 <HAL_GPIO_Init+0x236>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a55      	ldr	r2, [pc, #340]	@ (80024a8 <HAL_GPIO_Init+0x338>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d025      	beq.n	80023a2 <HAL_GPIO_Init+0x232>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a54      	ldr	r2, [pc, #336]	@ (80024ac <HAL_GPIO_Init+0x33c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01f      	beq.n	800239e <HAL_GPIO_Init+0x22e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a53      	ldr	r2, [pc, #332]	@ (80024b0 <HAL_GPIO_Init+0x340>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d019      	beq.n	800239a <HAL_GPIO_Init+0x22a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a52      	ldr	r2, [pc, #328]	@ (80024b4 <HAL_GPIO_Init+0x344>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_GPIO_Init+0x226>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a51      	ldr	r2, [pc, #324]	@ (80024b8 <HAL_GPIO_Init+0x348>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00d      	beq.n	8002392 <HAL_GPIO_Init+0x222>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a50      	ldr	r2, [pc, #320]	@ (80024bc <HAL_GPIO_Init+0x34c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <HAL_GPIO_Init+0x21e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4f      	ldr	r2, [pc, #316]	@ (80024c0 <HAL_GPIO_Init+0x350>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <HAL_GPIO_Init+0x21a>
 8002386:	2309      	movs	r3, #9
 8002388:	e012      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 800238a:	230a      	movs	r3, #10
 800238c:	e010      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 800238e:	2308      	movs	r3, #8
 8002390:	e00e      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 8002392:	2307      	movs	r3, #7
 8002394:	e00c      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 8002396:	2306      	movs	r3, #6
 8002398:	e00a      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 800239a:	2305      	movs	r3, #5
 800239c:	e008      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 800239e:	2304      	movs	r3, #4
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 80023a2:	2303      	movs	r3, #3
 80023a4:	e004      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e002      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 80023ae:	2300      	movs	r3, #0
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	f002 0203 	and.w	r2, r2, #3
 80023b6:	0092      	lsls	r2, r2, #2
 80023b8:	4093      	lsls	r3, r2
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c0:	4935      	ldr	r1, [pc, #212]	@ (8002498 <HAL_GPIO_Init+0x328>)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ce:	4b3d      	ldr	r3, [pc, #244]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023f2:	4a34      	ldr	r2, [pc, #208]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f8:	4b32      	ldr	r3, [pc, #200]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800241c:	4a29      	ldr	r2, [pc, #164]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002422:	4b28      	ldr	r3, [pc, #160]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002446:	4a1f      	ldr	r2, [pc, #124]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800244c:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002470:	4a14      	ldr	r2, [pc, #80]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3301      	adds	r3, #1
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	2b0f      	cmp	r3, #15
 8002480:	f67f ae84 	bls.w	800218c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3724      	adds	r7, #36	@ 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800
 8002498:	40013800 	.word	0x40013800
 800249c:	40020000 	.word	0x40020000
 80024a0:	40020400 	.word	0x40020400
 80024a4:	40020800 	.word	0x40020800
 80024a8:	40020c00 	.word	0x40020c00
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40021400 	.word	0x40021400
 80024b4:	40021800 	.word	0x40021800
 80024b8:	40021c00 	.word	0x40021c00
 80024bc:	40022000 	.word	0x40022000
 80024c0:	40022400 	.word	0x40022400
 80024c4:	40013c00 	.word	0x40013c00

080024c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	e0d9      	b.n	8002698 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e4:	2201      	movs	r2, #1
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	f040 80c9 	bne.w	8002692 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002500:	4a6b      	ldr	r2, [pc, #428]	@ (80026b0 <HAL_GPIO_DeInit+0x1e8>)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3302      	adds	r3, #2
 8002508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	4013      	ands	r3, r2
 8002520:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a63      	ldr	r2, [pc, #396]	@ (80026b4 <HAL_GPIO_DeInit+0x1ec>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d037      	beq.n	800259a <HAL_GPIO_DeInit+0xd2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a62      	ldr	r2, [pc, #392]	@ (80026b8 <HAL_GPIO_DeInit+0x1f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d031      	beq.n	8002596 <HAL_GPIO_DeInit+0xce>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a61      	ldr	r2, [pc, #388]	@ (80026bc <HAL_GPIO_DeInit+0x1f4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d02b      	beq.n	8002592 <HAL_GPIO_DeInit+0xca>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a60      	ldr	r2, [pc, #384]	@ (80026c0 <HAL_GPIO_DeInit+0x1f8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d025      	beq.n	800258e <HAL_GPIO_DeInit+0xc6>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a5f      	ldr	r2, [pc, #380]	@ (80026c4 <HAL_GPIO_DeInit+0x1fc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01f      	beq.n	800258a <HAL_GPIO_DeInit+0xc2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a5e      	ldr	r2, [pc, #376]	@ (80026c8 <HAL_GPIO_DeInit+0x200>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d019      	beq.n	8002586 <HAL_GPIO_DeInit+0xbe>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a5d      	ldr	r2, [pc, #372]	@ (80026cc <HAL_GPIO_DeInit+0x204>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_GPIO_DeInit+0xba>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a5c      	ldr	r2, [pc, #368]	@ (80026d0 <HAL_GPIO_DeInit+0x208>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00d      	beq.n	800257e <HAL_GPIO_DeInit+0xb6>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a5b      	ldr	r2, [pc, #364]	@ (80026d4 <HAL_GPIO_DeInit+0x20c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d007      	beq.n	800257a <HAL_GPIO_DeInit+0xb2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a5a      	ldr	r2, [pc, #360]	@ (80026d8 <HAL_GPIO_DeInit+0x210>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d101      	bne.n	8002576 <HAL_GPIO_DeInit+0xae>
 8002572:	2309      	movs	r3, #9
 8002574:	e012      	b.n	800259c <HAL_GPIO_DeInit+0xd4>
 8002576:	230a      	movs	r3, #10
 8002578:	e010      	b.n	800259c <HAL_GPIO_DeInit+0xd4>
 800257a:	2308      	movs	r3, #8
 800257c:	e00e      	b.n	800259c <HAL_GPIO_DeInit+0xd4>
 800257e:	2307      	movs	r3, #7
 8002580:	e00c      	b.n	800259c <HAL_GPIO_DeInit+0xd4>
 8002582:	2306      	movs	r3, #6
 8002584:	e00a      	b.n	800259c <HAL_GPIO_DeInit+0xd4>
 8002586:	2305      	movs	r3, #5
 8002588:	e008      	b.n	800259c <HAL_GPIO_DeInit+0xd4>
 800258a:	2304      	movs	r3, #4
 800258c:	e006      	b.n	800259c <HAL_GPIO_DeInit+0xd4>
 800258e:	2303      	movs	r3, #3
 8002590:	e004      	b.n	800259c <HAL_GPIO_DeInit+0xd4>
 8002592:	2302      	movs	r3, #2
 8002594:	e002      	b.n	800259c <HAL_GPIO_DeInit+0xd4>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_GPIO_DeInit+0xd4>
 800259a:	2300      	movs	r3, #0
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	f002 0203 	and.w	r2, r2, #3
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	4093      	lsls	r3, r2
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d132      	bne.n	8002612 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80025ac:	4b4b      	ldr	r3, [pc, #300]	@ (80026dc <HAL_GPIO_DeInit+0x214>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	4949      	ldr	r1, [pc, #292]	@ (80026dc <HAL_GPIO_DeInit+0x214>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80025ba:	4b48      	ldr	r3, [pc, #288]	@ (80026dc <HAL_GPIO_DeInit+0x214>)
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	4946      	ldr	r1, [pc, #280]	@ (80026dc <HAL_GPIO_DeInit+0x214>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80025c8:	4b44      	ldr	r3, [pc, #272]	@ (80026dc <HAL_GPIO_DeInit+0x214>)
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	4942      	ldr	r1, [pc, #264]	@ (80026dc <HAL_GPIO_DeInit+0x214>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80025d6:	4b41      	ldr	r3, [pc, #260]	@ (80026dc <HAL_GPIO_DeInit+0x214>)
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	43db      	mvns	r3, r3
 80025de:	493f      	ldr	r1, [pc, #252]	@ (80026dc <HAL_GPIO_DeInit+0x214>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80025f4:	4a2e      	ldr	r2, [pc, #184]	@ (80026b0 <HAL_GPIO_DeInit+0x1e8>)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	3302      	adds	r3, #2
 80025fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	43da      	mvns	r2, r3
 8002604:	482a      	ldr	r0, [pc, #168]	@ (80026b0 <HAL_GPIO_DeInit+0x1e8>)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	400a      	ands	r2, r1
 800260c:	3302      	adds	r3, #2
 800260e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2103      	movs	r1, #3
 800261c:	fa01 f303 	lsl.w	r3, r1, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	401a      	ands	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	08da      	lsrs	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3208      	adds	r2, #8
 8002630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	220f      	movs	r2, #15
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	08d2      	lsrs	r2, r2, #3
 8002648:	4019      	ands	r1, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2103      	movs	r1, #3
 800265c:	fa01 f303 	lsl.w	r3, r1, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	401a      	ands	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	2101      	movs	r1, #1
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	401a      	ands	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2103      	movs	r1, #3
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	401a      	ands	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3301      	adds	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b0f      	cmp	r3, #15
 800269c:	f67f af22 	bls.w	80024e4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40013800 	.word	0x40013800
 80026b4:	40020000 	.word	0x40020000
 80026b8:	40020400 	.word	0x40020400
 80026bc:	40020800 	.word	0x40020800
 80026c0:	40020c00 	.word	0x40020c00
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40021400 	.word	0x40021400
 80026cc:	40021800 	.word	0x40021800
 80026d0:	40021c00 	.word	0x40021c00
 80026d4:	40022000 	.word	0x40022000
 80026d8:	40022400 	.word	0x40022400
 80026dc:	40013c00 	.word	0x40013c00

080026e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
 80026ec:	4613      	mov	r3, r2
 80026ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f0:	787b      	ldrb	r3, [r7, #1]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026fc:	e003      	b.n	8002706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026fe:	887b      	ldrh	r3, [r7, #2]
 8002700:	041a      	lsls	r2, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	619a      	str	r2, [r3, #24]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e12b      	b.n	800297e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff f8f0 	bl	8001920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2224      	movs	r2, #36	@ 0x24
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002766:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002776:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002778:	f001 f8a2 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 800277c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4a81      	ldr	r2, [pc, #516]	@ (8002988 <HAL_I2C_Init+0x274>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d807      	bhi.n	8002798 <HAL_I2C_Init+0x84>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4a80      	ldr	r2, [pc, #512]	@ (800298c <HAL_I2C_Init+0x278>)
 800278c:	4293      	cmp	r3, r2
 800278e:	bf94      	ite	ls
 8002790:	2301      	movls	r3, #1
 8002792:	2300      	movhi	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e006      	b.n	80027a6 <HAL_I2C_Init+0x92>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a7d      	ldr	r2, [pc, #500]	@ (8002990 <HAL_I2C_Init+0x27c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	bf94      	ite	ls
 80027a0:	2301      	movls	r3, #1
 80027a2:	2300      	movhi	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0e7      	b.n	800297e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4a78      	ldr	r2, [pc, #480]	@ (8002994 <HAL_I2C_Init+0x280>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0c9b      	lsrs	r3, r3, #18
 80027b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002988 <HAL_I2C_Init+0x274>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d802      	bhi.n	80027e8 <HAL_I2C_Init+0xd4>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	3301      	adds	r3, #1
 80027e6:	e009      	b.n	80027fc <HAL_I2C_Init+0xe8>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	4a69      	ldr	r2, [pc, #420]	@ (8002998 <HAL_I2C_Init+0x284>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	3301      	adds	r3, #1
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	430b      	orrs	r3, r1
 8002802:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800280e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	495c      	ldr	r1, [pc, #368]	@ (8002988 <HAL_I2C_Init+0x274>)
 8002818:	428b      	cmp	r3, r1
 800281a:	d819      	bhi.n	8002850 <HAL_I2C_Init+0x13c>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e59      	subs	r1, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fbb1 f3f3 	udiv	r3, r1, r3
 800282a:	1c59      	adds	r1, r3, #1
 800282c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002830:	400b      	ands	r3, r1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_I2C_Init+0x138>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1e59      	subs	r1, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fbb1 f3f3 	udiv	r3, r1, r3
 8002844:	3301      	adds	r3, #1
 8002846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284a:	e051      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 800284c:	2304      	movs	r3, #4
 800284e:	e04f      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d111      	bne.n	800287c <HAL_I2C_Init+0x168>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1e58      	subs	r0, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6859      	ldr	r1, [r3, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	440b      	add	r3, r1
 8002866:	fbb0 f3f3 	udiv	r3, r0, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	e012      	b.n	80028a2 <HAL_I2C_Init+0x18e>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1e58      	subs	r0, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6859      	ldr	r1, [r3, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	0099      	lsls	r1, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002892:	3301      	adds	r3, #1
 8002894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Init+0x196>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e022      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10e      	bne.n	80028d0 <HAL_I2C_Init+0x1bc>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1e58      	subs	r0, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6859      	ldr	r1, [r3, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	440b      	add	r3, r1
 80028c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c4:	3301      	adds	r3, #1
 80028c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028ce:	e00f      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1e58      	subs	r0, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	0099      	lsls	r1, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e6:	3301      	adds	r3, #1
 80028e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	6809      	ldr	r1, [r1, #0]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69da      	ldr	r2, [r3, #28]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800291e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6911      	ldr	r1, [r2, #16]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68d2      	ldr	r2, [r2, #12]
 800292a:	4311      	orrs	r1, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	430b      	orrs	r3, r1
 8002932:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	000186a0 	.word	0x000186a0
 800298c:	001e847f 	.word	0x001e847f
 8002990:	003d08ff 	.word	0x003d08ff
 8002994:	431bde83 	.word	0x431bde83
 8002998:	10624dd3 	.word	0x10624dd3

0800299c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d129      	bne.n	8002a06 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2224      	movs	r2, #36	@ 0x24
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0201 	bic.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0210 	bic.w	r2, r2, #16
 80029d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e000      	b.n	8002a08 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
  }
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	d12a      	bne.n	8002a84 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2224      	movs	r2, #36	@ 0x24
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002a4e:	89fb      	ldrh	r3, [r7, #14]
 8002a50:	f023 030f 	bic.w	r3, r3, #15
 8002a54:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	89fb      	ldrh	r3, [r7, #14]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	89fa      	ldrh	r2, [r7, #14]
 8002a66:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0bf      	b.n	8002c26 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe ff9a 	bl	80019f4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002ad6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6999      	ldr	r1, [r3, #24]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002aec:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6899      	ldr	r1, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b4a      	ldr	r3, [pc, #296]	@ (8002c30 <HAL_LTDC_Init+0x19c>)
 8002b08:	400b      	ands	r3, r1
 8002b0a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	041b      	lsls	r3, r3, #16
 8002b12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68d9      	ldr	r1, [r3, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b3e      	ldr	r3, [pc, #248]	@ (8002c30 <HAL_LTDC_Init+0x19c>)
 8002b36:	400b      	ands	r3, r1
 8002b38:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68d9      	ldr	r1, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1a      	ldr	r2, [r3, #32]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6919      	ldr	r1, [r3, #16]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	4b33      	ldr	r3, [pc, #204]	@ (8002c30 <HAL_LTDC_Init+0x19c>)
 8002b64:	400b      	ands	r3, r1
 8002b66:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6919      	ldr	r1, [r3, #16]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6959      	ldr	r1, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b27      	ldr	r3, [pc, #156]	@ (8002c30 <HAL_LTDC_Init+0x19c>)
 8002b92:	400b      	ands	r3, r1
 8002b94:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6959      	ldr	r1, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002bc4:	041b      	lsls	r3, r3, #16
 8002bc6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0206 	orr.w	r2, r2, #6
 8002c02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	f000f800 	.word	0xf000f800

08002c34 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002c34:	b5b0      	push	{r4, r5, r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_LTDC_ConfigLayer+0x1a>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e02c      	b.n	8002ca8 <HAL_LTDC_ConfigLayer+0x74>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2134      	movs	r1, #52	@ 0x34
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4614      	mov	r4, r2
 8002c72:	461d      	mov	r5, r3
 8002c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c80:	682b      	ldr	r3, [r5, #0]
 8002c82:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f811 	bl	8002cb0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2201      	movs	r2, #1
 8002c94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bdb0      	pop	{r4, r5, r7, pc}

08002cb0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b089      	sub	sp, #36	@ 0x24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	0c1b      	lsrs	r3, r3, #16
 8002cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ccc:	4413      	add	r3, r2
 8002cce:	041b      	lsls	r3, r3, #16
 8002cd0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	01db      	lsls	r3, r3, #7
 8002cdc:	4413      	add	r3, r2
 8002cde:	3384      	adds	r3, #132	@ 0x84
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	01d2      	lsls	r2, r2, #7
 8002cec:	440a      	add	r2, r1
 8002cee:	3284      	adds	r2, #132	@ 0x84
 8002cf0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002cf4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002d06:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002d08:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	01db      	lsls	r3, r3, #7
 8002d14:	440b      	add	r3, r1
 8002d16:	3384      	adds	r3, #132	@ 0x84
 8002d18:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002d1e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d2e:	4413      	add	r3, r2
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	01db      	lsls	r3, r3, #7
 8002d3e:	4413      	add	r3, r2
 8002d40:	3384      	adds	r3, #132	@ 0x84
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	4611      	mov	r1, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	01d2      	lsls	r2, r2, #7
 8002d4e:	440a      	add	r2, r1
 8002d50:	3284      	adds	r2, #132	@ 0x84
 8002d52:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002d56:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d66:	4413      	add	r3, r2
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	01db      	lsls	r3, r3, #7
 8002d74:	440b      	add	r3, r1
 8002d76:	3384      	adds	r3, #132	@ 0x84
 8002d78:	4619      	mov	r1, r3
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	01db      	lsls	r3, r3, #7
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3384      	adds	r3, #132	@ 0x84
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	4611      	mov	r1, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	01d2      	lsls	r2, r2, #7
 8002d9a:	440a      	add	r2, r1
 8002d9c:	3284      	adds	r2, #132	@ 0x84
 8002d9e:	f023 0307 	bic.w	r3, r3, #7
 8002da2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	01db      	lsls	r3, r3, #7
 8002dae:	4413      	add	r3, r2
 8002db0:	3384      	adds	r3, #132	@ 0x84
 8002db2:	461a      	mov	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002dca:	041b      	lsls	r3, r3, #16
 8002dcc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	061b      	lsls	r3, r3, #24
 8002dd4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	01db      	lsls	r3, r3, #7
 8002de0:	4413      	add	r3, r2
 8002de2:	3384      	adds	r3, #132	@ 0x84
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	01db      	lsls	r3, r3, #7
 8002df0:	4413      	add	r3, r2
 8002df2:	3384      	adds	r3, #132	@ 0x84
 8002df4:	461a      	mov	r2, r3
 8002df6:	2300      	movs	r3, #0
 8002df8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e00:	461a      	mov	r2, r3
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	01db      	lsls	r3, r3, #7
 8002e14:	440b      	add	r3, r1
 8002e16:	3384      	adds	r3, #132	@ 0x84
 8002e18:	4619      	mov	r1, r3
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	01db      	lsls	r3, r3, #7
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3384      	adds	r3, #132	@ 0x84
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	4611      	mov	r1, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	01d2      	lsls	r2, r2, #7
 8002e3a:	440a      	add	r2, r1
 8002e3c:	3284      	adds	r2, #132	@ 0x84
 8002e3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e42:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	01db      	lsls	r3, r3, #7
 8002e4e:	4413      	add	r3, r2
 8002e50:	3384      	adds	r3, #132	@ 0x84
 8002e52:	461a      	mov	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	01db      	lsls	r3, r3, #7
 8002e64:	4413      	add	r3, r2
 8002e66:	3384      	adds	r3, #132	@ 0x84
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	4611      	mov	r1, r2
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	01d2      	lsls	r2, r2, #7
 8002e74:	440a      	add	r2, r1
 8002e76:	3284      	adds	r2, #132	@ 0x84
 8002e78:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e7c:	f023 0307 	bic.w	r3, r3, #7
 8002e80:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	69da      	ldr	r2, [r3, #28]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	68f9      	ldr	r1, [r7, #12]
 8002e8c:	6809      	ldr	r1, [r1, #0]
 8002e8e:	4608      	mov	r0, r1
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	01c9      	lsls	r1, r1, #7
 8002e94:	4401      	add	r1, r0
 8002e96:	3184      	adds	r1, #132	@ 0x84
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	01db      	lsls	r3, r3, #7
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3384      	adds	r3, #132	@ 0x84
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	01db      	lsls	r3, r3, #7
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3384      	adds	r3, #132	@ 0x84
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	01db      	lsls	r3, r3, #7
 8002eca:	4413      	add	r3, r2
 8002ecc:	3384      	adds	r3, #132	@ 0x84
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002ede:	2304      	movs	r3, #4
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	e01b      	b.n	8002f1c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d102      	bne.n	8002ef2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002eec:	2303      	movs	r3, #3
 8002eee:	61fb      	str	r3, [r7, #28]
 8002ef0:	e014      	b.n	8002f1c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d00b      	beq.n	8002f12 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d007      	beq.n	8002f12 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d003      	beq.n	8002f12 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002f0e:	2b07      	cmp	r3, #7
 8002f10:	d102      	bne.n	8002f18 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002f12:	2302      	movs	r3, #2
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	e001      	b.n	8002f1c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	01db      	lsls	r3, r3, #7
 8002f26:	4413      	add	r3, r2
 8002f28:	3384      	adds	r3, #132	@ 0x84
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	4611      	mov	r1, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	01d2      	lsls	r2, r2, #7
 8002f36:	440a      	add	r2, r1
 8002f38:	3284      	adds	r2, #132	@ 0x84
 8002f3a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	1acb      	subs	r3, r1, r3
 8002f56:	69f9      	ldr	r1, [r7, #28]
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002f5e:	68f9      	ldr	r1, [r7, #12]
 8002f60:	6809      	ldr	r1, [r1, #0]
 8002f62:	4608      	mov	r0, r1
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	01c9      	lsls	r1, r1, #7
 8002f68:	4401      	add	r1, r0
 8002f6a:	3184      	adds	r1, #132	@ 0x84
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	01db      	lsls	r3, r3, #7
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3384      	adds	r3, #132	@ 0x84
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	4611      	mov	r1, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	01d2      	lsls	r2, r2, #7
 8002f8a:	440a      	add	r2, r1
 8002f8c:	3284      	adds	r2, #132	@ 0x84
 8002f8e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f92:	f023 0307 	bic.w	r3, r3, #7
 8002f96:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	01db      	lsls	r3, r3, #7
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3384      	adds	r3, #132	@ 0x84
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	01db      	lsls	r3, r3, #7
 8002fb8:	4413      	add	r3, r2
 8002fba:	3384      	adds	r3, #132	@ 0x84
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	01d2      	lsls	r2, r2, #7
 8002fc8:	440a      	add	r2, r1
 8002fca:	3284      	adds	r2, #132	@ 0x84
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6013      	str	r3, [r2, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	@ 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e267      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d075      	beq.n	80030ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ffe:	4b88      	ldr	r3, [pc, #544]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b04      	cmp	r3, #4
 8003008:	d00c      	beq.n	8003024 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300a:	4b85      	ldr	r3, [pc, #532]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003012:	2b08      	cmp	r3, #8
 8003014:	d112      	bne.n	800303c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003016:	4b82      	ldr	r3, [pc, #520]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003022:	d10b      	bne.n	800303c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	4b7e      	ldr	r3, [pc, #504]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d05b      	beq.n	80030e8 <HAL_RCC_OscConfig+0x108>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d157      	bne.n	80030e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e242      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003044:	d106      	bne.n	8003054 <HAL_RCC_OscConfig+0x74>
 8003046:	4b76      	ldr	r3, [pc, #472]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a75      	ldr	r2, [pc, #468]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e01d      	b.n	8003090 <HAL_RCC_OscConfig+0xb0>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x98>
 800305e:	4b70      	ldr	r3, [pc, #448]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a6f      	ldr	r2, [pc, #444]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003064:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b6d      	ldr	r3, [pc, #436]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a6c      	ldr	r2, [pc, #432]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0xb0>
 8003078:	4b69      	ldr	r3, [pc, #420]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a68      	ldr	r2, [pc, #416]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800307e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4b66      	ldr	r3, [pc, #408]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a65      	ldr	r2, [pc, #404]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800308a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800308e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d013      	beq.n	80030c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe ff54 	bl	8001f44 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe ff50 	bl	8001f44 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	@ 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e207      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0xc0>
 80030be:	e014      	b.n	80030ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe ff40 	bl	8001f44 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c8:	f7fe ff3c 	bl	8001f44 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	@ 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e1f3      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	4b51      	ldr	r3, [pc, #324]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0xe8>
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d063      	beq.n	80031be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00b      	beq.n	800311a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003102:	4b47      	ldr	r3, [pc, #284]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800310a:	2b08      	cmp	r3, #8
 800310c:	d11c      	bne.n	8003148 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310e:	4b44      	ldr	r3, [pc, #272]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d116      	bne.n	8003148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311a:	4b41      	ldr	r3, [pc, #260]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_RCC_OscConfig+0x152>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d001      	beq.n	8003132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e1c7      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003132:	4b3b      	ldr	r3, [pc, #236]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4937      	ldr	r1, [pc, #220]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	e03a      	b.n	80031be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d020      	beq.n	8003192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003150:	4b34      	ldr	r3, [pc, #208]	@ (8003224 <HAL_RCC_OscConfig+0x244>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fe fef5 	bl	8001f44 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315e:	f7fe fef1 	bl	8001f44 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e1a8      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	4b2b      	ldr	r3, [pc, #172]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317c:	4b28      	ldr	r3, [pc, #160]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4925      	ldr	r1, [pc, #148]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800318c:	4313      	orrs	r3, r2
 800318e:	600b      	str	r3, [r1, #0]
 8003190:	e015      	b.n	80031be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003192:	4b24      	ldr	r3, [pc, #144]	@ (8003224 <HAL_RCC_OscConfig+0x244>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7fe fed4 	bl	8001f44 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a0:	f7fe fed0 	bl	8001f44 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e187      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d036      	beq.n	8003238 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d016      	beq.n	8003200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d2:	4b15      	ldr	r3, [pc, #84]	@ (8003228 <HAL_RCC_OscConfig+0x248>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fe feb4 	bl	8001f44 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e0:	f7fe feb0 	bl	8001f44 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e167      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 80031f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0x200>
 80031fe:	e01b      	b.n	8003238 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003200:	4b09      	ldr	r3, [pc, #36]	@ (8003228 <HAL_RCC_OscConfig+0x248>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003206:	f7fe fe9d 	bl	8001f44 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320c:	e00e      	b.n	800322c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320e:	f7fe fe99 	bl	8001f44 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d907      	bls.n	800322c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e150      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
 8003220:	40023800 	.word	0x40023800
 8003224:	42470000 	.word	0x42470000
 8003228:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800322c:	4b88      	ldr	r3, [pc, #544]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800322e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1ea      	bne.n	800320e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8097 	beq.w	8003374 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003246:	2300      	movs	r3, #0
 8003248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800324a:	4b81      	ldr	r3, [pc, #516]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10f      	bne.n	8003276 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	4b7d      	ldr	r3, [pc, #500]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	4a7c      	ldr	r2, [pc, #496]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 8003260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003264:	6413      	str	r3, [r2, #64]	@ 0x40
 8003266:	4b7a      	ldr	r3, [pc, #488]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003276:	4b77      	ldr	r3, [pc, #476]	@ (8003454 <HAL_RCC_OscConfig+0x474>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d118      	bne.n	80032b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003282:	4b74      	ldr	r3, [pc, #464]	@ (8003454 <HAL_RCC_OscConfig+0x474>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a73      	ldr	r2, [pc, #460]	@ (8003454 <HAL_RCC_OscConfig+0x474>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800328c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800328e:	f7fe fe59 	bl	8001f44 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003296:	f7fe fe55 	bl	8001f44 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e10c      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003454 <HAL_RCC_OscConfig+0x474>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d106      	bne.n	80032ca <HAL_RCC_OscConfig+0x2ea>
 80032bc:	4b64      	ldr	r3, [pc, #400]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c0:	4a63      	ldr	r2, [pc, #396]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032c8:	e01c      	b.n	8003304 <HAL_RCC_OscConfig+0x324>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d10c      	bne.n	80032ec <HAL_RCC_OscConfig+0x30c>
 80032d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032d8:	f043 0304 	orr.w	r3, r3, #4
 80032dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032de:	4b5c      	ldr	r3, [pc, #368]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ea:	e00b      	b.n	8003304 <HAL_RCC_OscConfig+0x324>
 80032ec:	4b58      	ldr	r3, [pc, #352]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f0:	4a57      	ldr	r2, [pc, #348]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032f2:	f023 0301 	bic.w	r3, r3, #1
 80032f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f8:	4b55      	ldr	r3, [pc, #340]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fc:	4a54      	ldr	r2, [pc, #336]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032fe:	f023 0304 	bic.w	r3, r3, #4
 8003302:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d015      	beq.n	8003338 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fe fe1a 	bl	8001f44 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fe fe16 	bl	8001f44 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e0cb      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332a:	4b49      	ldr	r3, [pc, #292]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0ee      	beq.n	8003314 <HAL_RCC_OscConfig+0x334>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003338:	f7fe fe04 	bl	8001f44 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fe fe00 	bl	8001f44 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e0b5      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003356:	4b3e      	ldr	r3, [pc, #248]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1ee      	bne.n	8003340 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003362:	7dfb      	ldrb	r3, [r7, #23]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d105      	bne.n	8003374 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003368:	4b39      	ldr	r3, [pc, #228]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	4a38      	ldr	r2, [pc, #224]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800336e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003372:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80a1 	beq.w	80034c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800337e:	4b34      	ldr	r3, [pc, #208]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b08      	cmp	r3, #8
 8003388:	d05c      	beq.n	8003444 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d141      	bne.n	8003416 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003392:	4b31      	ldr	r3, [pc, #196]	@ (8003458 <HAL_RCC_OscConfig+0x478>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7fe fdd4 	bl	8001f44 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fe fdd0 	bl	8001f44 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e087      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	4b27      	ldr	r3, [pc, #156]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69da      	ldr	r2, [r3, #28]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	019b      	lsls	r3, r3, #6
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d4:	085b      	lsrs	r3, r3, #1
 80033d6:	3b01      	subs	r3, #1
 80033d8:	041b      	lsls	r3, r3, #16
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	061b      	lsls	r3, r3, #24
 80033e2:	491b      	ldr	r1, [pc, #108]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <HAL_RCC_OscConfig+0x478>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ee:	f7fe fda9 	bl	8001f44 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f6:	f7fe fda5 	bl	8001f44 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e05c      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003408:	4b11      	ldr	r3, [pc, #68]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_OscConfig+0x416>
 8003414:	e054      	b.n	80034c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003416:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <HAL_RCC_OscConfig+0x478>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fe fd92 	bl	8001f44 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003424:	f7fe fd8e 	bl	8001f44 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e045      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003436:	4b06      	ldr	r3, [pc, #24]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x444>
 8003442:	e03d      	b.n	80034c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d107      	bne.n	800345c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e038      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
 8003450:	40023800 	.word	0x40023800
 8003454:	40007000 	.word	0x40007000
 8003458:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800345c:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <HAL_RCC_OscConfig+0x4ec>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d028      	beq.n	80034bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d121      	bne.n	80034bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d11a      	bne.n	80034bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800348c:	4013      	ands	r3, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003492:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003494:	4293      	cmp	r3, r2
 8003496:	d111      	bne.n	80034bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	3b01      	subs	r3, #1
 80034a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d107      	bne.n	80034bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800

080034d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0cc      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034e4:	4b68      	ldr	r3, [pc, #416]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d90c      	bls.n	800350c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b65      	ldr	r3, [pc, #404]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b63      	ldr	r3, [pc, #396]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0b8      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003524:	4b59      	ldr	r3, [pc, #356]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a58      	ldr	r2, [pc, #352]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800352e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800353c:	4b53      	ldr	r3, [pc, #332]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a52      	ldr	r2, [pc, #328]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003548:	4b50      	ldr	r3, [pc, #320]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	494d      	ldr	r1, [pc, #308]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d044      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b47      	ldr	r3, [pc, #284]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d119      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e07f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d003      	beq.n	800358e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358a:	2b03      	cmp	r3, #3
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358e:	4b3f      	ldr	r3, [pc, #252]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e06f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	4b3b      	ldr	r3, [pc, #236]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e067      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ae:	4b37      	ldr	r3, [pc, #220]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4934      	ldr	r1, [pc, #208]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c0:	f7fe fcc0 	bl	8001f44 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	e00a      	b.n	80035de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c8:	f7fe fcbc 	bl	8001f44 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e04f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b2b      	ldr	r3, [pc, #172]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 020c 	and.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1eb      	bne.n	80035c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035f0:	4b25      	ldr	r3, [pc, #148]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d20c      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b22      	ldr	r3, [pc, #136]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b20      	ldr	r3, [pc, #128]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e032      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003624:	4b19      	ldr	r3, [pc, #100]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4916      	ldr	r1, [pc, #88]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003642:	4b12      	ldr	r3, [pc, #72]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	490e      	ldr	r1, [pc, #56]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003656:	f000 f821 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800365a:	4602      	mov	r2, r0
 800365c:	4b0b      	ldr	r3, [pc, #44]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	490a      	ldr	r1, [pc, #40]	@ (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	5ccb      	ldrb	r3, [r1, r3]
 800366a:	fa22 f303 	lsr.w	r3, r2, r3
 800366e:	4a09      	ldr	r2, [pc, #36]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003672:	4b09      	ldr	r3, [pc, #36]	@ (8003698 <HAL_RCC_ClockConfig+0x1c8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe fc20 	bl	8001ebc <HAL_InitTick>

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40023c00 	.word	0x40023c00
 800368c:	40023800 	.word	0x40023800
 8003690:	08005a6c 	.word	0x08005a6c
 8003694:	20000010 	.word	0x20000010
 8003698:	20000014 	.word	0x20000014

0800369c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800369c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a0:	b094      	sub	sp, #80	@ 0x50
 80036a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b4:	4b79      	ldr	r3, [pc, #484]	@ (800389c <HAL_RCC_GetSysClockFreq+0x200>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 030c 	and.w	r3, r3, #12
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d00d      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x40>
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	f200 80e1 	bhi.w	8003888 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x34>
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d003      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ce:	e0db      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036d0:	4b73      	ldr	r3, [pc, #460]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80036d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036d4:	e0db      	b.n	800388e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036d6:	4b73      	ldr	r3, [pc, #460]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80036d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036da:	e0d8      	b.n	800388e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036dc:	4b6f      	ldr	r3, [pc, #444]	@ (800389c <HAL_RCC_GetSysClockFreq+0x200>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036e6:	4b6d      	ldr	r3, [pc, #436]	@ (800389c <HAL_RCC_GetSysClockFreq+0x200>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d063      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f2:	4b6a      	ldr	r3, [pc, #424]	@ (800389c <HAL_RCC_GetSysClockFreq+0x200>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	2200      	movs	r2, #0
 80036fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80036fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003704:	633b      	str	r3, [r7, #48]	@ 0x30
 8003706:	2300      	movs	r3, #0
 8003708:	637b      	str	r3, [r7, #52]	@ 0x34
 800370a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800370e:	4622      	mov	r2, r4
 8003710:	462b      	mov	r3, r5
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	0159      	lsls	r1, r3, #5
 800371c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003720:	0150      	lsls	r0, r2, #5
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4621      	mov	r1, r4
 8003728:	1a51      	subs	r1, r2, r1
 800372a:	6139      	str	r1, [r7, #16]
 800372c:	4629      	mov	r1, r5
 800372e:	eb63 0301 	sbc.w	r3, r3, r1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003740:	4659      	mov	r1, fp
 8003742:	018b      	lsls	r3, r1, #6
 8003744:	4651      	mov	r1, sl
 8003746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800374a:	4651      	mov	r1, sl
 800374c:	018a      	lsls	r2, r1, #6
 800374e:	4651      	mov	r1, sl
 8003750:	ebb2 0801 	subs.w	r8, r2, r1
 8003754:	4659      	mov	r1, fp
 8003756:	eb63 0901 	sbc.w	r9, r3, r1
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800376a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800376e:	4690      	mov	r8, r2
 8003770:	4699      	mov	r9, r3
 8003772:	4623      	mov	r3, r4
 8003774:	eb18 0303 	adds.w	r3, r8, r3
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	462b      	mov	r3, r5
 800377c:	eb49 0303 	adc.w	r3, r9, r3
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800378e:	4629      	mov	r1, r5
 8003790:	024b      	lsls	r3, r1, #9
 8003792:	4621      	mov	r1, r4
 8003794:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003798:	4621      	mov	r1, r4
 800379a:	024a      	lsls	r2, r1, #9
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037a2:	2200      	movs	r2, #0
 80037a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037ac:	f7fc fd1e 	bl	80001ec <__aeabi_uldivmod>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4613      	mov	r3, r2
 80037b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037b8:	e058      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ba:	4b38      	ldr	r3, [pc, #224]	@ (800389c <HAL_RCC_GetSysClockFreq+0x200>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	099b      	lsrs	r3, r3, #6
 80037c0:	2200      	movs	r2, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	4611      	mov	r1, r2
 80037c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037ca:	623b      	str	r3, [r7, #32]
 80037cc:	2300      	movs	r3, #0
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037d4:	4642      	mov	r2, r8
 80037d6:	464b      	mov	r3, r9
 80037d8:	f04f 0000 	mov.w	r0, #0
 80037dc:	f04f 0100 	mov.w	r1, #0
 80037e0:	0159      	lsls	r1, r3, #5
 80037e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037e6:	0150      	lsls	r0, r2, #5
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4641      	mov	r1, r8
 80037ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80037f2:	4649      	mov	r1, r9
 80037f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003804:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003808:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800380c:	ebb2 040a 	subs.w	r4, r2, sl
 8003810:	eb63 050b 	sbc.w	r5, r3, fp
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	00eb      	lsls	r3, r5, #3
 800381e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003822:	00e2      	lsls	r2, r4, #3
 8003824:	4614      	mov	r4, r2
 8003826:	461d      	mov	r5, r3
 8003828:	4643      	mov	r3, r8
 800382a:	18e3      	adds	r3, r4, r3
 800382c:	603b      	str	r3, [r7, #0]
 800382e:	464b      	mov	r3, r9
 8003830:	eb45 0303 	adc.w	r3, r5, r3
 8003834:	607b      	str	r3, [r7, #4]
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003842:	4629      	mov	r1, r5
 8003844:	028b      	lsls	r3, r1, #10
 8003846:	4621      	mov	r1, r4
 8003848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800384c:	4621      	mov	r1, r4
 800384e:	028a      	lsls	r2, r1, #10
 8003850:	4610      	mov	r0, r2
 8003852:	4619      	mov	r1, r3
 8003854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003856:	2200      	movs	r2, #0
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	61fa      	str	r2, [r7, #28]
 800385c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003860:	f7fc fcc4 	bl	80001ec <__aeabi_uldivmod>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4613      	mov	r3, r2
 800386a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800386c:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <HAL_RCC_GetSysClockFreq+0x200>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	3301      	adds	r3, #1
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800387c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800387e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003880:	fbb2 f3f3 	udiv	r3, r2, r3
 8003884:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003886:	e002      	b.n	800388e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003888:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800388a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800388c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800388e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003890:	4618      	mov	r0, r3
 8003892:	3750      	adds	r7, #80	@ 0x50
 8003894:	46bd      	mov	sp, r7
 8003896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800
 80038a0:	00f42400 	.word	0x00f42400
 80038a4:	007a1200 	.word	0x007a1200

080038a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ac:	4b03      	ldr	r3, [pc, #12]	@ (80038bc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20000010 	.word	0x20000010

080038c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038c4:	f7ff fff0 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	0a9b      	lsrs	r3, r3, #10
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	4903      	ldr	r1, [pc, #12]	@ (80038e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038d6:	5ccb      	ldrb	r3, [r1, r3]
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40023800 	.word	0x40023800
 80038e4:	08005a7c 	.word	0x08005a7c

080038e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10b      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800390c:	2b00      	cmp	r3, #0
 800390e:	d105      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003918:	2b00      	cmp	r3, #0
 800391a:	d075      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800391c:	4b91      	ldr	r3, [pc, #580]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003922:	f7fe fb0f 	bl	8001f44 <HAL_GetTick>
 8003926:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003928:	e008      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800392a:	f7fe fb0b 	bl	8001f44 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e189      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800393c:	4b8a      	ldr	r3, [pc, #552]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f0      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d009      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	019a      	lsls	r2, r3, #6
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	071b      	lsls	r3, r3, #28
 8003960:	4981      	ldr	r1, [pc, #516]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01f      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003974:	4b7c      	ldr	r3, [pc, #496]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003976:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800397a:	0f1b      	lsrs	r3, r3, #28
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	019a      	lsls	r2, r3, #6
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	061b      	lsls	r3, r3, #24
 800398e:	431a      	orrs	r2, r3
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	071b      	lsls	r3, r3, #28
 8003994:	4974      	ldr	r1, [pc, #464]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800399c:	4b72      	ldr	r3, [pc, #456]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800399e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039a2:	f023 021f 	bic.w	r2, r3, #31
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	496e      	ldr	r1, [pc, #440]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00d      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	019a      	lsls	r2, r3, #6
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	061b      	lsls	r3, r3, #24
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	071b      	lsls	r3, r3, #28
 80039d4:	4964      	ldr	r1, [pc, #400]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039dc:	4b61      	ldr	r3, [pc, #388]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039e2:	f7fe faaf 	bl	8001f44 <HAL_GetTick>
 80039e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039ea:	f7fe faab 	bl	8001f44 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e129      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d079      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a20:	4b52      	ldr	r3, [pc, #328]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a26:	f7fe fa8d 	bl	8001f44 <HAL_GetTick>
 8003a2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a2e:	f7fe fa89 	bl	8001f44 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e107      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a40:	4b49      	ldr	r3, [pc, #292]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a4c:	d0ef      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d020      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a5a:	4b43      	ldr	r3, [pc, #268]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a60:	0f1b      	lsrs	r3, r3, #28
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	019a      	lsls	r2, r3, #6
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	061b      	lsls	r3, r3, #24
 8003a74:	431a      	orrs	r2, r3
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	071b      	lsls	r3, r3, #28
 8003a7a:	493b      	ldr	r1, [pc, #236]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a82:	4b39      	ldr	r3, [pc, #228]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a88:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	4934      	ldr	r1, [pc, #208]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01e      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aae:	0e1b      	lsrs	r3, r3, #24
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	019a      	lsls	r2, r3, #6
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	061b      	lsls	r3, r3, #24
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	071b      	lsls	r3, r3, #28
 8003ac8:	4927      	ldr	r1, [pc, #156]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ad0:	4b25      	ldr	r3, [pc, #148]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ad6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	4922      	ldr	r1, [pc, #136]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ae6:	4b21      	ldr	r3, [pc, #132]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aec:	f7fe fa2a 	bl	8001f44 <HAL_GetTick>
 8003af0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003af4:	f7fe fa26 	bl	8001f44 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e0a4      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b06:	4b18      	ldr	r3, [pc, #96]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b12:	d1ef      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 808b 	beq.w	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	4b10      	ldr	r3, [pc, #64]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b32:	4b0d      	ldr	r3, [pc, #52]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a0b      	ldr	r2, [pc, #44]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b4a:	f7fe f9fb 	bl	8001f44 <HAL_GetTick>
 8003b4e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b50:	e010      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b52:	f7fe f9f7 	bl	8001f44 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d909      	bls.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e075      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003b64:	42470068 	.word	0x42470068
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	42470070 	.word	0x42470070
 8003b70:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b74:	4b38      	ldr	r3, [pc, #224]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0e8      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b80:	4b36      	ldr	r3, [pc, #216]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b88:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d02f      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d028      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ba6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bae:	4b2c      	ldr	r3, [pc, #176]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003bb4:	4a29      	ldr	r2, [pc, #164]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bba:	4b28      	ldr	r3, [pc, #160]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d114      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7fe f9bd 	bl	8001f44 <HAL_GetTick>
 8003bca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bcc:	e00a      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f7fe f9b9 	bl	8001f44 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e035      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0ee      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bfc:	d10d      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003bfe:	4b17      	ldr	r3, [pc, #92]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003c0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c12:	4912      	ldr	r1, [pc, #72]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	608b      	str	r3, [r1, #8]
 8003c18:	e005      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003c1a:	4b10      	ldr	r3, [pc, #64]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c20:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003c24:	6093      	str	r3, [r2, #8]
 8003c26:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c32:	490a      	ldr	r1, [pc, #40]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d004      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003c4a:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003c4c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40007000 	.word	0x40007000
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	42470e40 	.word	0x42470e40
 8003c64:	424711e0 	.word	0x424711e0

08003c68 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e01c      	b.n	8003cb4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	795b      	ldrb	r3, [r3, #5]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fd ffda 	bl	8001c44 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0204 	orr.w	r2, r2, #4
 8003ca4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e07b      	b.n	8003dc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d108      	bne.n	8003ce8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cde:	d009      	beq.n	8003cf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	61da      	str	r2, [r3, #28]
 8003ce6:	e005      	b.n	8003cf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fd ffba 	bl	8001c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d78:	ea42 0103 	orr.w	r1, r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	0c1b      	lsrs	r3, r3, #16
 8003d92:	f003 0104 	and.w	r1, r3, #4
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9a:	f003 0210 	and.w	r2, r3, #16
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003db4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e01a      	b.n	8003e16 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003df6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7fd ff8d 	bl	8001d18 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b088      	sub	sp, #32
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e2e:	f7fe f889 	bl	8001f44 <HAL_GetTick>
 8003e32:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d001      	beq.n	8003e48 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
 8003e46:	e12a      	b.n	800409e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_SPI_Transmit+0x36>
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e122      	b.n	800409e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_SPI_Transmit+0x48>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e11b      	b.n	800409e <HAL_SPI_Transmit+0x280>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2203      	movs	r2, #3
 8003e72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	88fa      	ldrh	r2, [r7, #6]
 8003e86:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	88fa      	ldrh	r2, [r7, #6]
 8003e8c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eb4:	d10f      	bne.n	8003ed6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ec4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ed4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee0:	2b40      	cmp	r3, #64	@ 0x40
 8003ee2:	d007      	beq.n	8003ef4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ef2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003efc:	d152      	bne.n	8003fa4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_SPI_Transmit+0xee>
 8003f06:	8b7b      	ldrh	r3, [r7, #26]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d145      	bne.n	8003f98 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f10:	881a      	ldrh	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1c:	1c9a      	adds	r2, r3, #2
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f30:	e032      	b.n	8003f98 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d112      	bne.n	8003f66 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f44:	881a      	ldrh	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f50:	1c9a      	adds	r2, r3, #2
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f64:	e018      	b.n	8003f98 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f66:	f7fd ffed 	bl	8001f44 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d803      	bhi.n	8003f7e <HAL_SPI_Transmit+0x160>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d102      	bne.n	8003f84 <HAL_SPI_Transmit+0x166>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e082      	b.n	800409e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1c7      	bne.n	8003f32 <HAL_SPI_Transmit+0x114>
 8003fa2:	e053      	b.n	800404c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_SPI_Transmit+0x194>
 8003fac:	8b7b      	ldrh	r3, [r7, #26]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d147      	bne.n	8004042 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	330c      	adds	r3, #12
 8003fbc:	7812      	ldrb	r2, [r2, #0]
 8003fbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fd8:	e033      	b.n	8004042 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d113      	bne.n	8004010 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	7812      	ldrb	r2, [r2, #0]
 8003ff4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800400e:	e018      	b.n	8004042 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004010:	f7fd ff98 	bl	8001f44 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d803      	bhi.n	8004028 <HAL_SPI_Transmit+0x20a>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004026:	d102      	bne.n	800402e <HAL_SPI_Transmit+0x210>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d109      	bne.n	8004042 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e02d      	b.n	800409e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1c6      	bne.n	8003fda <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	6839      	ldr	r1, [r7, #0]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f8bf 	bl	80041d4 <SPI_EndRxTxTransaction>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800409c:	2300      	movs	r3, #0
  }
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040b4:	b2db      	uxtb	r3, r3
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	4613      	mov	r3, r2
 80040d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040d4:	f7fd ff36 	bl	8001f44 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	4413      	add	r3, r2
 80040e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040e4:	f7fd ff2e 	bl	8001f44 <HAL_GetTick>
 80040e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040ea:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	015b      	lsls	r3, r3, #5
 80040f0:	0d1b      	lsrs	r3, r3, #20
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	fb02 f303 	mul.w	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040fa:	e054      	b.n	80041a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004102:	d050      	beq.n	80041a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004104:	f7fd ff1e 	bl	8001f44 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	429a      	cmp	r2, r3
 8004112:	d902      	bls.n	800411a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d13d      	bne.n	8004196 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004128:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004132:	d111      	bne.n	8004158 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800413c:	d004      	beq.n	8004148 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004146:	d107      	bne.n	8004158 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004156:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004160:	d10f      	bne.n	8004182 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004180:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e017      	b.n	80041c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4013      	ands	r3, r2
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	bf0c      	ite	eq
 80041b6:	2301      	moveq	r3, #1
 80041b8:	2300      	movne	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d19b      	bne.n	80040fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000010 	.word	0x20000010

080041d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2201      	movs	r2, #1
 80041e8:	2102      	movs	r1, #2
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7ff ff6a 	bl	80040c4 <SPI_WaitFlagStateUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fa:	f043 0220 	orr.w	r2, r3, #32
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e032      	b.n	800426c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004206:	4b1b      	ldr	r3, [pc, #108]	@ (8004274 <SPI_EndRxTxTransaction+0xa0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1b      	ldr	r2, [pc, #108]	@ (8004278 <SPI_EndRxTxTransaction+0xa4>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	0d5b      	lsrs	r3, r3, #21
 8004212:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004224:	d112      	bne.n	800424c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2200      	movs	r2, #0
 800422e:	2180      	movs	r1, #128	@ 0x80
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7ff ff47 	bl	80040c4 <SPI_WaitFlagStateUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d016      	beq.n	800426a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004240:	f043 0220 	orr.w	r2, r3, #32
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e00f      	b.n	800426c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	3b01      	subs	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004262:	2b80      	cmp	r3, #128	@ 0x80
 8004264:	d0f2      	beq.n	800424c <SPI_EndRxTxTransaction+0x78>
 8004266:	e000      	b.n	800426a <SPI_EndRxTxTransaction+0x96>
        break;
 8004268:	bf00      	nop
  }

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000010 	.word	0x20000010
 8004278:	165e9f81 	.word	0x165e9f81

0800427c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e041      	b.n	8004312 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fd fd56 	bl	8001d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f000 f8f4 	bl	80044a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_TIM_ConfigClockSource+0x1c>
 8004332:	2302      	movs	r3, #2
 8004334:	e0b4      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x186>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2202      	movs	r2, #2
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004354:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800435c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800436e:	d03e      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0xd4>
 8004370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004374:	f200 8087 	bhi.w	8004486 <HAL_TIM_ConfigClockSource+0x16c>
 8004378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800437c:	f000 8086 	beq.w	800448c <HAL_TIM_ConfigClockSource+0x172>
 8004380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004384:	d87f      	bhi.n	8004486 <HAL_TIM_ConfigClockSource+0x16c>
 8004386:	2b70      	cmp	r3, #112	@ 0x70
 8004388:	d01a      	beq.n	80043c0 <HAL_TIM_ConfigClockSource+0xa6>
 800438a:	2b70      	cmp	r3, #112	@ 0x70
 800438c:	d87b      	bhi.n	8004486 <HAL_TIM_ConfigClockSource+0x16c>
 800438e:	2b60      	cmp	r3, #96	@ 0x60
 8004390:	d050      	beq.n	8004434 <HAL_TIM_ConfigClockSource+0x11a>
 8004392:	2b60      	cmp	r3, #96	@ 0x60
 8004394:	d877      	bhi.n	8004486 <HAL_TIM_ConfigClockSource+0x16c>
 8004396:	2b50      	cmp	r3, #80	@ 0x50
 8004398:	d03c      	beq.n	8004414 <HAL_TIM_ConfigClockSource+0xfa>
 800439a:	2b50      	cmp	r3, #80	@ 0x50
 800439c:	d873      	bhi.n	8004486 <HAL_TIM_ConfigClockSource+0x16c>
 800439e:	2b40      	cmp	r3, #64	@ 0x40
 80043a0:	d058      	beq.n	8004454 <HAL_TIM_ConfigClockSource+0x13a>
 80043a2:	2b40      	cmp	r3, #64	@ 0x40
 80043a4:	d86f      	bhi.n	8004486 <HAL_TIM_ConfigClockSource+0x16c>
 80043a6:	2b30      	cmp	r3, #48	@ 0x30
 80043a8:	d064      	beq.n	8004474 <HAL_TIM_ConfigClockSource+0x15a>
 80043aa:	2b30      	cmp	r3, #48	@ 0x30
 80043ac:	d86b      	bhi.n	8004486 <HAL_TIM_ConfigClockSource+0x16c>
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d060      	beq.n	8004474 <HAL_TIM_ConfigClockSource+0x15a>
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d867      	bhi.n	8004486 <HAL_TIM_ConfigClockSource+0x16c>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d05c      	beq.n	8004474 <HAL_TIM_ConfigClockSource+0x15a>
 80043ba:	2b10      	cmp	r3, #16
 80043bc:	d05a      	beq.n	8004474 <HAL_TIM_ConfigClockSource+0x15a>
 80043be:	e062      	b.n	8004486 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043d0:	f000 f990 	bl	80046f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	609a      	str	r2, [r3, #8]
      break;
 80043ec:	e04f      	b.n	800448e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043fe:	f000 f979 	bl	80046f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004410:	609a      	str	r2, [r3, #8]
      break;
 8004412:	e03c      	b.n	800448e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004420:	461a      	mov	r2, r3
 8004422:	f000 f8ed 	bl	8004600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2150      	movs	r1, #80	@ 0x50
 800442c:	4618      	mov	r0, r3
 800442e:	f000 f946 	bl	80046be <TIM_ITRx_SetConfig>
      break;
 8004432:	e02c      	b.n	800448e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004440:	461a      	mov	r2, r3
 8004442:	f000 f90c 	bl	800465e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2160      	movs	r1, #96	@ 0x60
 800444c:	4618      	mov	r0, r3
 800444e:	f000 f936 	bl	80046be <TIM_ITRx_SetConfig>
      break;
 8004452:	e01c      	b.n	800448e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004460:	461a      	mov	r2, r3
 8004462:	f000 f8cd 	bl	8004600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2140      	movs	r1, #64	@ 0x40
 800446c:	4618      	mov	r0, r3
 800446e:	f000 f926 	bl	80046be <TIM_ITRx_SetConfig>
      break;
 8004472:	e00c      	b.n	800448e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4619      	mov	r1, r3
 800447e:	4610      	mov	r0, r2
 8004480:	f000 f91d 	bl	80046be <TIM_ITRx_SetConfig>
      break;
 8004484:	e003      	b.n	800448e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	73fb      	strb	r3, [r7, #15]
      break;
 800448a:	e000      	b.n	800448e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800448c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800449e:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a46      	ldr	r2, [pc, #280]	@ (80045d4 <TIM_Base_SetConfig+0x12c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d013      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c6:	d00f      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a43      	ldr	r2, [pc, #268]	@ (80045d8 <TIM_Base_SetConfig+0x130>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00b      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a42      	ldr	r2, [pc, #264]	@ (80045dc <TIM_Base_SetConfig+0x134>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d007      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a41      	ldr	r2, [pc, #260]	@ (80045e0 <TIM_Base_SetConfig+0x138>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a40      	ldr	r2, [pc, #256]	@ (80045e4 <TIM_Base_SetConfig+0x13c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d108      	bne.n	80044fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a35      	ldr	r2, [pc, #212]	@ (80045d4 <TIM_Base_SetConfig+0x12c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d02b      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004508:	d027      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a32      	ldr	r2, [pc, #200]	@ (80045d8 <TIM_Base_SetConfig+0x130>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d023      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a31      	ldr	r2, [pc, #196]	@ (80045dc <TIM_Base_SetConfig+0x134>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d01f      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a30      	ldr	r2, [pc, #192]	@ (80045e0 <TIM_Base_SetConfig+0x138>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01b      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2f      	ldr	r2, [pc, #188]	@ (80045e4 <TIM_Base_SetConfig+0x13c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d017      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a2e      	ldr	r2, [pc, #184]	@ (80045e8 <TIM_Base_SetConfig+0x140>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a2d      	ldr	r2, [pc, #180]	@ (80045ec <TIM_Base_SetConfig+0x144>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00f      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a2c      	ldr	r2, [pc, #176]	@ (80045f0 <TIM_Base_SetConfig+0x148>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00b      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a2b      	ldr	r2, [pc, #172]	@ (80045f4 <TIM_Base_SetConfig+0x14c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d007      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2a      	ldr	r2, [pc, #168]	@ (80045f8 <TIM_Base_SetConfig+0x150>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d003      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a29      	ldr	r2, [pc, #164]	@ (80045fc <TIM_Base_SetConfig+0x154>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d108      	bne.n	800456c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a10      	ldr	r2, [pc, #64]	@ (80045d4 <TIM_Base_SetConfig+0x12c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_Base_SetConfig+0xf8>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a12      	ldr	r2, [pc, #72]	@ (80045e4 <TIM_Base_SetConfig+0x13c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d103      	bne.n	80045a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d105      	bne.n	80045c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f023 0201 	bic.w	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	611a      	str	r2, [r3, #16]
  }
}
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40010000 	.word	0x40010000
 80045d8:	40000400 	.word	0x40000400
 80045dc:	40000800 	.word	0x40000800
 80045e0:	40000c00 	.word	0x40000c00
 80045e4:	40010400 	.word	0x40010400
 80045e8:	40014000 	.word	0x40014000
 80045ec:	40014400 	.word	0x40014400
 80045f0:	40014800 	.word	0x40014800
 80045f4:	40001800 	.word	0x40001800
 80045f8:	40001c00 	.word	0x40001c00
 80045fc:	40002000 	.word	0x40002000

08004600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 0201 	bic.w	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800462a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f023 030a 	bic.w	r3, r3, #10
 800463c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	621a      	str	r2, [r3, #32]
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800465e:	b480      	push	{r7}
 8004660:	b087      	sub	sp, #28
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	f023 0210 	bic.w	r2, r3, #16
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	031b      	lsls	r3, r3, #12
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800469a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	621a      	str	r2, [r3, #32]
}
 80046b2:	bf00      	nop
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	f043 0307 	orr.w	r3, r3, #7
 80046e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	609a      	str	r2, [r3, #8]
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800470e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	021a      	lsls	r2, r3, #8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	431a      	orrs	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4313      	orrs	r3, r2
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	609a      	str	r2, [r3, #8]
}
 8004728:	bf00      	nop
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004748:	2302      	movs	r3, #2
 800474a:	e05a      	b.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004772:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a21      	ldr	r2, [pc, #132]	@ (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d022      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004798:	d01d      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1d      	ldr	r2, [pc, #116]	@ (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d018      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1a      	ldr	r2, [pc, #104]	@ (800481c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00e      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a18      	ldr	r2, [pc, #96]	@ (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d009      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a17      	ldr	r2, [pc, #92]	@ (8004824 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a15      	ldr	r2, [pc, #84]	@ (8004828 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d10c      	bne.n	80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40010000 	.word	0x40010000
 8004814:	40000400 	.word	0x40000400
 8004818:	40000800 	.word	0x40000800
 800481c:	40000c00 	.word	0x40000c00
 8004820:	40010400 	.word	0x40010400
 8004824:	40014000 	.word	0x40014000
 8004828:	40001800 	.word	0x40001800

0800482c <memset>:
 800482c:	4402      	add	r2, r0
 800482e:	4603      	mov	r3, r0
 8004830:	4293      	cmp	r3, r2
 8004832:	d100      	bne.n	8004836 <memset+0xa>
 8004834:	4770      	bx	lr
 8004836:	f803 1b01 	strb.w	r1, [r3], #1
 800483a:	e7f9      	b.n	8004830 <memset+0x4>

0800483c <__libc_init_array>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	4d0d      	ldr	r5, [pc, #52]	@ (8004874 <__libc_init_array+0x38>)
 8004840:	4c0d      	ldr	r4, [pc, #52]	@ (8004878 <__libc_init_array+0x3c>)
 8004842:	1b64      	subs	r4, r4, r5
 8004844:	10a4      	asrs	r4, r4, #2
 8004846:	2600      	movs	r6, #0
 8004848:	42a6      	cmp	r6, r4
 800484a:	d109      	bne.n	8004860 <__libc_init_array+0x24>
 800484c:	4d0b      	ldr	r5, [pc, #44]	@ (800487c <__libc_init_array+0x40>)
 800484e:	4c0c      	ldr	r4, [pc, #48]	@ (8004880 <__libc_init_array+0x44>)
 8004850:	f000 f818 	bl	8004884 <_init>
 8004854:	1b64      	subs	r4, r4, r5
 8004856:	10a4      	asrs	r4, r4, #2
 8004858:	2600      	movs	r6, #0
 800485a:	42a6      	cmp	r6, r4
 800485c:	d105      	bne.n	800486a <__libc_init_array+0x2e>
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	f855 3b04 	ldr.w	r3, [r5], #4
 8004864:	4798      	blx	r3
 8004866:	3601      	adds	r6, #1
 8004868:	e7ee      	b.n	8004848 <__libc_init_array+0xc>
 800486a:	f855 3b04 	ldr.w	r3, [r5], #4
 800486e:	4798      	blx	r3
 8004870:	3601      	adds	r6, #1
 8004872:	e7f2      	b.n	800485a <__libc_init_array+0x1e>
 8004874:	08005a8c 	.word	0x08005a8c
 8004878:	08005a8c 	.word	0x08005a8c
 800487c:	08005a8c 	.word	0x08005a8c
 8004880:	08005a90 	.word	0x08005a90

08004884 <_init>:
 8004884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004886:	bf00      	nop
 8004888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488a:	bc08      	pop	{r3}
 800488c:	469e      	mov	lr, r3
 800488e:	4770      	bx	lr

08004890 <_fini>:
 8004890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004892:	bf00      	nop
 8004894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004896:	bc08      	pop	{r3}
 8004898:	469e      	mov	lr, r3
 800489a:	4770      	bx	lr
